// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: chipperpb.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Chippergrpc2 {

  /// <summary>Holder for reflection information generated from chipperpb.proto</summary>
  public static partial class ChipperpbReflection {

    #region Descriptor
    /// <summary>File descriptor for chipperpb.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static ChipperpbReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cg9jaGlwcGVycGIucHJvdG8SDGNoaXBwZXJncnBjMiKAAgoLVGV4dFJlcXVl",
            "c3QSDwoHc2Vzc2lvbhgBIAEoCRIRCglkZXZpY2VfaWQYAiABKAkSEgoKdGV4",
            "dF9pbnB1dBgDIAEoCRIxCg1sYW5ndWFnZV9jb2RlGAQgASgOMhouY2hpcHBl",
            "cmdycGMyLkxhbmd1YWdlQ29kZRIzCg5pbnRlbnRfc2VydmljZRgFIAEoDjIb",
            "LmNoaXBwZXJncnBjMi5JbnRlbnRTZXJ2aWNlEhgKEGZpcm13YXJlX3ZlcnNp",
            "b24YBiABKAkSJQoEbW9kZRgHIAEoDjIXLmNoaXBwZXJncnBjMi5Sb2JvdE1v",
            "ZGUSEAoIc2tpcF9kYXMYCCABKAgipgMKFlN0cmVhbWluZ0ludGVudFJlcXVl",
            "c3QSDwoHc2Vzc2lvbhgBIAEoCRIRCglkZXZpY2VfaWQYAiABKAkSEwoLaW5w",
            "dXRfYXVkaW8YAyABKAwSMQoNbGFuZ3VhZ2VfY29kZRgEIAEoDjIaLmNoaXBw",
            "ZXJncnBjMi5MYW5ndWFnZUNvZGUSEwoLc3BlZWNoX29ubHkYBSABKAgSGAoQ",
            "ZmlybXdhcmVfdmVyc2lvbhgGIAEoCRIlCgRtb2RlGAcgASgOMhcuY2hpcHBl",
            "cmdycGMyLlJvYm90TW9kZRIPCgdib290X2lkGAggASgJEhAKCHNraXBfZGFz",
            "GAkgASgIEjMKDmF1ZGlvX2VuY29kaW5nGA0gASgOMhsuY2hpcHBlcmdycGMy",
            "LkF1ZGlvRW5jb2RpbmcSGAoQc2luZ2xlX3V0dGVyYW5jZRgOIAEoCBIzCg5p",
            "bnRlbnRfc2VydmljZRgPIAEoDjIbLmNoaXBwZXJncnBjMi5JbnRlbnRTZXJ2",
            "aWNlEg8KB2FwcF9rZXkYECABKAkSEgoKc2F2ZV9hdWRpbxgRIAEoCCK1Agoe",
            "U3RyZWFtaW5nS25vd2xlZGdlR3JhcGhSZXF1ZXN0Eg8KB3Nlc3Npb24YASAB",
            "KAkSEQoJZGV2aWNlX2lkGAIgASgJEhMKC2lucHV0X2F1ZGlvGAMgASgMEjEK",
            "DWxhbmd1YWdlX2NvZGUYBCABKA4yGi5jaGlwcGVyZ3JwYzIuTGFuZ3VhZ2VD",
            "b2RlEhgKEGZpcm13YXJlX3ZlcnNpb24YBSABKAkSMwoOYXVkaW9fZW5jb2Rp",
            "bmcYBiABKA4yGy5jaGlwcGVyZ3JwYzIuQXVkaW9FbmNvZGluZxIPCgdhcHBf",
            "a2V5GAcgASgJEhIKCnNhdmVfYXVkaW8YCCABKAgSDwoHYm9vdF9pZBgJIAEo",
            "CRIQCghza2lwX2RhcxgKIAEoCBIQCgh0aW1lem9uZRgLIAEoCSK4AQofU3Ry",
            "ZWFtaW5nQ29ubmVjdGlvbkNoZWNrUmVxdWVzdBIPCgdzZXNzaW9uGAEgASgJ",
            "EhEKCWRldmljZV9pZBgCIAEoCRITCgtpbnB1dF9hdWRpbxgDIAEoDBIYChBm",
            "aXJtd2FyZV92ZXJzaW9uGAQgASgJEg8KB2FwcF9rZXkYBSABKAkSFgoOdG90",
            "YWxfYXVkaW9fbXMYBiABKA0SGQoRYXVkaW9fcGVyX3JlcXVlc3QYByABKA0i",
            "5QEKDkludGVudFJlc3BvbnNlEg8KB3Nlc3Npb24YASABKAkSEQoJZGV2aWNl",
            "X2lkGAIgASgJEhAKCGlzX2ZpbmFsGAMgASgIEjEKDWludGVudF9yZXN1bHQY",
            "BCABKAsyGi5jaGlwcGVyZ3JwYzIuSW50ZW50UmVzdWx0EjEKDXNwZWVjaF9y",
            "ZXN1bHQYBSABKAsyGi5jaGlwcGVyZ3JwYzIuU3BlZWNoUmVzdWx0EiUKBG1v",
            "ZGUYBiABKA4yFy5jaGlwcGVyZ3JwYzIuUm9ib3RNb2RlEhAKCGF1ZGlvX2lk",
            "GBAgASgJIjQKDFNwZWVjaFJlc3VsdBISCgp0cmFuc2NyaXB0GAEgASgJEhAK",
            "CGlzX2ZpbmFsGAIgASgIIvgCCgxJbnRlbnRSZXN1bHQSEgoKcXVlcnlfdGV4",
            "dBgBIAEoCRIOCgZhY3Rpb24YAiABKAkSGQoRaW50ZW50X2NvbmZpZGVuY2UY",
            "AyABKAISGQoRc3BlZWNoX2NvbmZpZGVuY2UYBCABKAISPgoKcGFyYW1ldGVy",
            "cxgFIAMoCzIqLmNoaXBwZXJncnBjMi5JbnRlbnRSZXN1bHQuUGFyYW1ldGVy",
            "c0VudHJ5Eh4KFmFsbF9wYXJhbWV0ZXJzX3ByZXNlbnQYBiABKAgSEwoLaGFz",
            "X2NvbnRleHQYByABKAgSLAoHc2VydmljZRgIIAEoDjIbLmNoaXBwZXJncnBj",
            "Mi5JbnRlbnRTZXJ2aWNlEjgKCmtncmVzcG9uc2UYCSABKAsyJC5jaGlwcGVy",
            "Z3JwYzIuS25vd2xlZGdlR3JhcGhSZXNwb25zZRoxCg9QYXJhbWV0ZXJzRW50",
            "cnkSCwoDa2V5GAEgASgJEg0KBXZhbHVlGAIgASgJOgI4ASKjAQoWS25vd2xl",
            "ZGdlR3JhcGhSZXNwb25zZRIPCgdzZXNzaW9uGAEgASgJEhEKCWRldmljZV9p",
            "ZBgCIAEoCRISCgpxdWVyeV90ZXh0GAMgASgJEhMKC3Nwb2tlbl90ZXh0GAQg",
            "ASgJEhQKDGNvbW1hbmRfdHlwZRgFIAEoCRIUCgxkb21haW5zX3VzZWQYBiAD",
            "KAkSEAoIYXVkaW9faWQYByABKAkiQgoXQ29ubmVjdGlvbkNoZWNrUmVzcG9u",
            "c2USDgoGc3RhdHVzGAEgASgJEhcKD2ZyYW1lc19yZWNlaXZlZBgCIAEoDSI/",
            "Cg9XZWF0aGVyTG9jYXRpb24SDAoEY2l0eRgBIAEoCRINCgVzdGF0ZRgCIAEo",
            "CRIPCgdjb3VudHJ5GAMgASgJKlYKDExhbmd1YWdlQ29kZRIOCgpFTkdMSVNI",
            "X1VTEAASDgoKRU5HTElTSF9VSxABEg4KCkVOR0xJU0hfQVUQAhIKCgZHRVJN",
            "QU4QAxIKCgZGUkVOQ0gQBCpSCg1JbnRlbnRTZXJ2aWNlEgsKB0RFRkFVTFQQ",
            "ABIOCgpESUFMT0dGTE9XEAESDQoJQklOR19MVUlTEAISBwoDTEVYEAMSDAoI",
            "SE9VTkRJRlkQBCotCg1BdWRpb0VuY29kaW5nEg4KCkxJTkVBUl9QQ00QABIM",
            "CghPR0dfT1BVUxABKigKCVJvYm90TW9kZRIRCg1WT0lDRV9DT01NQU5EEAAS",
            "CAoER0FNRRABMpoDCgtDaGlwcGVyR3JwYxJHCgpUZXh0SW50ZW50EhkuY2hp",
            "cHBlcmdycGMyLlRleHRSZXF1ZXN0GhwuY2hpcHBlcmdycGMyLkludGVudFJl",
            "c3BvbnNlIgASWQoPU3RyZWFtaW5nSW50ZW50EiQuY2hpcHBlcmdycGMyLlN0",
            "cmVhbWluZ0ludGVudFJlcXVlc3QaHC5jaGlwcGVyZ3JwYzIuSW50ZW50UmVz",
            "cG9uc2UoATABEnEKF1N0cmVhbWluZ0tub3dsZWRnZUdyYXBoEiwuY2hpcHBl",
            "cmdycGMyLlN0cmVhbWluZ0tub3dsZWRnZUdyYXBoUmVxdWVzdBokLmNoaXBw",
            "ZXJncnBjMi5Lbm93bGVkZ2VHcmFwaFJlc3BvbnNlKAEwARJ0ChhTdHJlYW1p",
            "bmdDb25uZWN0aW9uQ2hlY2sSLS5jaGlwcGVyZ3JwYzIuU3RyZWFtaW5nQ29u",
            "bmVjdGlvbkNoZWNrUmVxdWVzdBolLmNoaXBwZXJncnBjMi5Db25uZWN0aW9u",
            "Q2hlY2tSZXNwb25zZSgBMAFCM1oxZ2l0aHViLmNvbS9kaWdpdGFsLWRyZWFt",
            "LWxhYnMvYXBpL2dvL2NoaXBwZXJncnBjMmIGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::Chippergrpc2.LanguageCode), typeof(global::Chippergrpc2.IntentService), typeof(global::Chippergrpc2.AudioEncoding), typeof(global::Chippergrpc2.RobotMode), }, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Chippergrpc2.TextRequest), global::Chippergrpc2.TextRequest.Parser, new[]{ "Session", "DeviceId", "TextInput", "LanguageCode", "IntentService", "FirmwareVersion", "Mode", "SkipDas" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Chippergrpc2.StreamingIntentRequest), global::Chippergrpc2.StreamingIntentRequest.Parser, new[]{ "Session", "DeviceId", "InputAudio", "LanguageCode", "SpeechOnly", "FirmwareVersion", "Mode", "BootId", "SkipDas", "AudioEncoding", "SingleUtterance", "IntentService", "AppKey", "SaveAudio" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Chippergrpc2.StreamingKnowledgeGraphRequest), global::Chippergrpc2.StreamingKnowledgeGraphRequest.Parser, new[]{ "Session", "DeviceId", "InputAudio", "LanguageCode", "FirmwareVersion", "AudioEncoding", "AppKey", "SaveAudio", "BootId", "SkipDas", "Timezone" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Chippergrpc2.StreamingConnectionCheckRequest), global::Chippergrpc2.StreamingConnectionCheckRequest.Parser, new[]{ "Session", "DeviceId", "InputAudio", "FirmwareVersion", "AppKey", "TotalAudioMs", "AudioPerRequest" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Chippergrpc2.IntentResponse), global::Chippergrpc2.IntentResponse.Parser, new[]{ "Session", "DeviceId", "IsFinal", "IntentResult", "SpeechResult", "Mode", "AudioId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Chippergrpc2.SpeechResult), global::Chippergrpc2.SpeechResult.Parser, new[]{ "Transcript", "IsFinal" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Chippergrpc2.IntentResult), global::Chippergrpc2.IntentResult.Parser, new[]{ "QueryText", "Action", "IntentConfidence", "SpeechConfidence", "Parameters", "AllParametersPresent", "HasContext", "Service", "Kgresponse" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::Chippergrpc2.KnowledgeGraphResponse), global::Chippergrpc2.KnowledgeGraphResponse.Parser, new[]{ "Session", "DeviceId", "QueryText", "SpokenText", "CommandType", "DomainsUsed", "AudioId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Chippergrpc2.ConnectionCheckResponse), global::Chippergrpc2.ConnectionCheckResponse.Parser, new[]{ "Status", "FramesReceived" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Chippergrpc2.WeatherLocation), global::Chippergrpc2.WeatherLocation.Parser, new[]{ "City", "State", "Country" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  /// <summary>
  /// Supported languages
  /// </summary>
  public enum LanguageCode {
    /// <summary>
    /// default if not specified
    /// </summary>
    [pbr::OriginalName("ENGLISH_US")] EnglishUs = 0,
    [pbr::OriginalName("ENGLISH_UK")] EnglishUk = 1,
    [pbr::OriginalName("ENGLISH_AU")] EnglishAu = 2,
    [pbr::OriginalName("GERMAN")] German = 3,
    [pbr::OriginalName("FRENCH")] French = 4,
  }

  public enum IntentService {
    [pbr::OriginalName("DEFAULT")] Default = 0,
    [pbr::OriginalName("DIALOGFLOW")] Dialogflow = 1,
    [pbr::OriginalName("BING_LUIS")] BingLuis = 2,
    [pbr::OriginalName("LEX")] Lex = 3,
    [pbr::OriginalName("HOUNDIFY")] Houndify = 4,
  }

  public enum AudioEncoding {
    [pbr::OriginalName("LINEAR_PCM")] LinearPcm = 0,
    [pbr::OriginalName("OGG_OPUS")] OggOpus = 1,
  }

  public enum RobotMode {
    /// <summary>
    /// default is voice command mode if not specified
    /// </summary>
    [pbr::OriginalName("VOICE_COMMAND")] VoiceCommand = 0,
    [pbr::OriginalName("GAME")] Game = 1,
  }

  #endregion

  #region Messages
  public sealed partial class TextRequest : pb::IMessage<TextRequest> {
    private static readonly pb::MessageParser<TextRequest> _parser = new pb::MessageParser<TextRequest>(() => new TextRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TextRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Chippergrpc2.ChipperpbReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TextRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TextRequest(TextRequest other) : this() {
      session_ = other.session_;
      deviceId_ = other.deviceId_;
      textInput_ = other.textInput_;
      languageCode_ = other.languageCode_;
      intentService_ = other.intentService_;
      firmwareVersion_ = other.firmwareVersion_;
      mode_ = other.mode_;
      skipDas_ = other.skipDas_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TextRequest Clone() {
      return new TextRequest(this);
    }

    /// <summary>Field number for the "session" field.</summary>
    public const int SessionFieldNumber = 1;
    private string session_ = "";
    /// <summary>
    /// Required. Can be random number or user identifier.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Session {
      get { return session_; }
      set {
        session_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "device_id" field.</summary>
    public const int DeviceIdFieldNumber = 2;
    private string deviceId_ = "";
    /// <summary>
    /// Required. Robot identifier.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DeviceId {
      get { return deviceId_; }
      set {
        deviceId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "text_input" field.</summary>
    public const int TextInputFieldNumber = 3;
    private string textInput_ = "";
    /// <summary>
    /// Required. Text of query
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TextInput {
      get { return textInput_; }
      set {
        textInput_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "language_code" field.</summary>
    public const int LanguageCodeFieldNumber = 4;
    private global::Chippergrpc2.LanguageCode languageCode_ = global::Chippergrpc2.LanguageCode.EnglishUs;
    /// <summary>
    /// Optional. Specify language for intent-service, default is ENGLISH_US
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Chippergrpc2.LanguageCode LanguageCode {
      get { return languageCode_; }
      set {
        languageCode_ = value;
      }
    }

    /// <summary>Field number for the "intent_service" field.</summary>
    public const int IntentServiceFieldNumber = 5;
    private global::Chippergrpc2.IntentService intentService_ = global::Chippergrpc2.IntentService.Default;
    /// <summary>
    /// Optional. Choose intent-service to process request, default is server's default
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Chippergrpc2.IntentService IntentService {
      get { return intentService_; }
      set {
        intentService_ = value;
      }
    }

    /// <summary>Field number for the "firmware_version" field.</summary>
    public const int FirmwareVersionFieldNumber = 6;
    private string firmwareVersion_ = "";
    /// <summary>
    /// Required. Robot firmware version. Use to choose intent-service version.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FirmwareVersion {
      get { return firmwareVersion_; }
      set {
        firmwareVersion_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "mode" field.</summary>
    public const int ModeFieldNumber = 7;
    private global::Chippergrpc2.RobotMode mode_ = global::Chippergrpc2.RobotMode.VoiceCommand;
    /// <summary>
    /// Optional. Robot mode for games and knowledge-graph. default is VOICE_COMMAND
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Chippergrpc2.RobotMode Mode {
      get { return mode_; }
      set {
        mode_ = value;
      }
    }

    /// <summary>Field number for the "skip_das" field.</summary>
    public const int SkipDasFieldNumber = 8;
    private bool skipDas_;
    /// <summary>
    /// Required. Skip DAS will turn off DAS logging, for GDPR
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool SkipDas {
      get { return skipDas_; }
      set {
        skipDas_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TextRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TextRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Session != other.Session) return false;
      if (DeviceId != other.DeviceId) return false;
      if (TextInput != other.TextInput) return false;
      if (LanguageCode != other.LanguageCode) return false;
      if (IntentService != other.IntentService) return false;
      if (FirmwareVersion != other.FirmwareVersion) return false;
      if (Mode != other.Mode) return false;
      if (SkipDas != other.SkipDas) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Session.Length != 0) hash ^= Session.GetHashCode();
      if (DeviceId.Length != 0) hash ^= DeviceId.GetHashCode();
      if (TextInput.Length != 0) hash ^= TextInput.GetHashCode();
      if (LanguageCode != global::Chippergrpc2.LanguageCode.EnglishUs) hash ^= LanguageCode.GetHashCode();
      if (IntentService != global::Chippergrpc2.IntentService.Default) hash ^= IntentService.GetHashCode();
      if (FirmwareVersion.Length != 0) hash ^= FirmwareVersion.GetHashCode();
      if (Mode != global::Chippergrpc2.RobotMode.VoiceCommand) hash ^= Mode.GetHashCode();
      if (SkipDas != false) hash ^= SkipDas.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Session.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Session);
      }
      if (DeviceId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(DeviceId);
      }
      if (TextInput.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(TextInput);
      }
      if (LanguageCode != global::Chippergrpc2.LanguageCode.EnglishUs) {
        output.WriteRawTag(32);
        output.WriteEnum((int) LanguageCode);
      }
      if (IntentService != global::Chippergrpc2.IntentService.Default) {
        output.WriteRawTag(40);
        output.WriteEnum((int) IntentService);
      }
      if (FirmwareVersion.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(FirmwareVersion);
      }
      if (Mode != global::Chippergrpc2.RobotMode.VoiceCommand) {
        output.WriteRawTag(56);
        output.WriteEnum((int) Mode);
      }
      if (SkipDas != false) {
        output.WriteRawTag(64);
        output.WriteBool(SkipDas);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Session.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Session);
      }
      if (DeviceId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DeviceId);
      }
      if (TextInput.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TextInput);
      }
      if (LanguageCode != global::Chippergrpc2.LanguageCode.EnglishUs) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) LanguageCode);
      }
      if (IntentService != global::Chippergrpc2.IntentService.Default) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) IntentService);
      }
      if (FirmwareVersion.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FirmwareVersion);
      }
      if (Mode != global::Chippergrpc2.RobotMode.VoiceCommand) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Mode);
      }
      if (SkipDas != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TextRequest other) {
      if (other == null) {
        return;
      }
      if (other.Session.Length != 0) {
        Session = other.Session;
      }
      if (other.DeviceId.Length != 0) {
        DeviceId = other.DeviceId;
      }
      if (other.TextInput.Length != 0) {
        TextInput = other.TextInput;
      }
      if (other.LanguageCode != global::Chippergrpc2.LanguageCode.EnglishUs) {
        LanguageCode = other.LanguageCode;
      }
      if (other.IntentService != global::Chippergrpc2.IntentService.Default) {
        IntentService = other.IntentService;
      }
      if (other.FirmwareVersion.Length != 0) {
        FirmwareVersion = other.FirmwareVersion;
      }
      if (other.Mode != global::Chippergrpc2.RobotMode.VoiceCommand) {
        Mode = other.Mode;
      }
      if (other.SkipDas != false) {
        SkipDas = other.SkipDas;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Session = input.ReadString();
            break;
          }
          case 18: {
            DeviceId = input.ReadString();
            break;
          }
          case 26: {
            TextInput = input.ReadString();
            break;
          }
          case 32: {
            LanguageCode = (global::Chippergrpc2.LanguageCode) input.ReadEnum();
            break;
          }
          case 40: {
            IntentService = (global::Chippergrpc2.IntentService) input.ReadEnum();
            break;
          }
          case 50: {
            FirmwareVersion = input.ReadString();
            break;
          }
          case 56: {
            Mode = (global::Chippergrpc2.RobotMode) input.ReadEnum();
            break;
          }
          case 64: {
            SkipDas = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class StreamingIntentRequest : pb::IMessage<StreamingIntentRequest> {
    private static readonly pb::MessageParser<StreamingIntentRequest> _parser = new pb::MessageParser<StreamingIntentRequest>(() => new StreamingIntentRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<StreamingIntentRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Chippergrpc2.ChipperpbReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StreamingIntentRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StreamingIntentRequest(StreamingIntentRequest other) : this() {
      session_ = other.session_;
      deviceId_ = other.deviceId_;
      inputAudio_ = other.inputAudio_;
      languageCode_ = other.languageCode_;
      speechOnly_ = other.speechOnly_;
      firmwareVersion_ = other.firmwareVersion_;
      mode_ = other.mode_;
      bootId_ = other.bootId_;
      skipDas_ = other.skipDas_;
      audioEncoding_ = other.audioEncoding_;
      singleUtterance_ = other.singleUtterance_;
      intentService_ = other.intentService_;
      appKey_ = other.appKey_;
      saveAudio_ = other.saveAudio_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StreamingIntentRequest Clone() {
      return new StreamingIntentRequest(this);
    }

    /// <summary>Field number for the "session" field.</summary>
    public const int SessionFieldNumber = 1;
    private string session_ = "";
    /// <summary>
    /// Required. Can be random number or user identifier.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Session {
      get { return session_; }
      set {
        session_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "device_id" field.</summary>
    public const int DeviceIdFieldNumber = 2;
    private string deviceId_ = "";
    /// <summary>
    /// Required. Robot identifier.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DeviceId {
      get { return deviceId_; }
      set {
        deviceId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "input_audio" field.</summary>
    public const int InputAudioFieldNumber = 3;
    private pb::ByteString inputAudio_ = pb::ByteString.Empty;
    /// <summary>
    /// Required. Input audio content format: 16k SR, 1-channel, 100ms chunks.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString InputAudio {
      get { return inputAudio_; }
      set {
        inputAudio_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "language_code" field.</summary>
    public const int LanguageCodeFieldNumber = 4;
    private global::Chippergrpc2.LanguageCode languageCode_ = global::Chippergrpc2.LanguageCode.EnglishUs;
    /// <summary>
    /// Optional. Specify language for intent-service, default is ENGLISH_US
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Chippergrpc2.LanguageCode LanguageCode {
      get { return languageCode_; }
      set {
        languageCode_ = value;
      }
    }

    /// <summary>Field number for the "speech_only" field.</summary>
    public const int SpeechOnlyFieldNumber = 5;
    private bool speechOnly_;
    /// <summary>
    /// Optional. ASR only using Bing Speech (for now).
    /// Returns text transcript with intent_speech_only. Default is false
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool SpeechOnly {
      get { return speechOnly_; }
      set {
        speechOnly_ = value;
      }
    }

    /// <summary>Field number for the "firmware_version" field.</summary>
    public const int FirmwareVersionFieldNumber = 6;
    private string firmwareVersion_ = "";
    /// <summary>
    /// Required. Robot firmware version. Use to choose intent-service version.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FirmwareVersion {
      get { return firmwareVersion_; }
      set {
        firmwareVersion_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "mode" field.</summary>
    public const int ModeFieldNumber = 7;
    private global::Chippergrpc2.RobotMode mode_ = global::Chippergrpc2.RobotMode.VoiceCommand;
    /// <summary>
    /// Optional. Robot mode for games and knowledge-graph. default is VOICE_COMMAND
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Chippergrpc2.RobotMode Mode {
      get { return mode_; }
      set {
        mode_ = value;
      }
    }

    /// <summary>Field number for the "boot_id" field.</summary>
    public const int BootIdFieldNumber = 8;
    private string bootId_ = "";
    /// <summary>
    /// Optional. boot_id for DAS cloud event
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string BootId {
      get { return bootId_; }
      set {
        bootId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "skip_das" field.</summary>
    public const int SkipDasFieldNumber = 9;
    private bool skipDas_;
    /// <summary>
    /// Required. Skip DAS will turn off DAS logging, for GDPR
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool SkipDas {
      get { return skipDas_; }
      set {
        skipDas_ = value;
      }
    }

    /// <summary>Field number for the "audio_encoding" field.</summary>
    public const int AudioEncodingFieldNumber = 13;
    private global::Chippergrpc2.AudioEncoding audioEncoding_ = global::Chippergrpc2.AudioEncoding.LinearPcm;
    /// <summary>
    /// Optional. Choose audio encoding, default is PCM 16K
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Chippergrpc2.AudioEncoding AudioEncoding {
      get { return audioEncoding_; }
      set {
        audioEncoding_ = value;
      }
    }

    /// <summary>Field number for the "single_utterance" field.</summary>
    public const int SingleUtteranceFieldNumber = 14;
    private bool singleUtterance_;
    /// <summary>
    /// Optional. If using dialogflow, set single_utterance true to use dialogflow-VAD.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool SingleUtterance {
      get { return singleUtterance_; }
      set {
        singleUtterance_ = value;
      }
    }

    /// <summary>Field number for the "intent_service" field.</summary>
    public const int IntentServiceFieldNumber = 15;
    private global::Chippergrpc2.IntentService intentService_ = global::Chippergrpc2.IntentService.Default;
    /// <summary>
    /// Optional. Default is whatever that is defined on Chipper Cloud.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Chippergrpc2.IntentService IntentService {
      get { return intentService_; }
      set {
        intentService_ = value;
      }
    }

    /// <summary>Field number for the "app_key" field.</summary>
    public const int AppKeyFieldNumber = 16;
    private string appKey_ = "";
    /// <summary>
    /// Required for now till TMS is ready. Anki application key
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string AppKey {
      get { return appKey_; }
      set {
        appKey_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "save_audio" field.</summary>
    public const int SaveAudioFieldNumber = 17;
    private bool saveAudio_;
    /// <summary>
    /// Optional. Set whether to save-audio in Dev
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool SaveAudio {
      get { return saveAudio_; }
      set {
        saveAudio_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as StreamingIntentRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(StreamingIntentRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Session != other.Session) return false;
      if (DeviceId != other.DeviceId) return false;
      if (InputAudio != other.InputAudio) return false;
      if (LanguageCode != other.LanguageCode) return false;
      if (SpeechOnly != other.SpeechOnly) return false;
      if (FirmwareVersion != other.FirmwareVersion) return false;
      if (Mode != other.Mode) return false;
      if (BootId != other.BootId) return false;
      if (SkipDas != other.SkipDas) return false;
      if (AudioEncoding != other.AudioEncoding) return false;
      if (SingleUtterance != other.SingleUtterance) return false;
      if (IntentService != other.IntentService) return false;
      if (AppKey != other.AppKey) return false;
      if (SaveAudio != other.SaveAudio) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Session.Length != 0) hash ^= Session.GetHashCode();
      if (DeviceId.Length != 0) hash ^= DeviceId.GetHashCode();
      if (InputAudio.Length != 0) hash ^= InputAudio.GetHashCode();
      if (LanguageCode != global::Chippergrpc2.LanguageCode.EnglishUs) hash ^= LanguageCode.GetHashCode();
      if (SpeechOnly != false) hash ^= SpeechOnly.GetHashCode();
      if (FirmwareVersion.Length != 0) hash ^= FirmwareVersion.GetHashCode();
      if (Mode != global::Chippergrpc2.RobotMode.VoiceCommand) hash ^= Mode.GetHashCode();
      if (BootId.Length != 0) hash ^= BootId.GetHashCode();
      if (SkipDas != false) hash ^= SkipDas.GetHashCode();
      if (AudioEncoding != global::Chippergrpc2.AudioEncoding.LinearPcm) hash ^= AudioEncoding.GetHashCode();
      if (SingleUtterance != false) hash ^= SingleUtterance.GetHashCode();
      if (IntentService != global::Chippergrpc2.IntentService.Default) hash ^= IntentService.GetHashCode();
      if (AppKey.Length != 0) hash ^= AppKey.GetHashCode();
      if (SaveAudio != false) hash ^= SaveAudio.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Session.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Session);
      }
      if (DeviceId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(DeviceId);
      }
      if (InputAudio.Length != 0) {
        output.WriteRawTag(26);
        output.WriteBytes(InputAudio);
      }
      if (LanguageCode != global::Chippergrpc2.LanguageCode.EnglishUs) {
        output.WriteRawTag(32);
        output.WriteEnum((int) LanguageCode);
      }
      if (SpeechOnly != false) {
        output.WriteRawTag(40);
        output.WriteBool(SpeechOnly);
      }
      if (FirmwareVersion.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(FirmwareVersion);
      }
      if (Mode != global::Chippergrpc2.RobotMode.VoiceCommand) {
        output.WriteRawTag(56);
        output.WriteEnum((int) Mode);
      }
      if (BootId.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(BootId);
      }
      if (SkipDas != false) {
        output.WriteRawTag(72);
        output.WriteBool(SkipDas);
      }
      if (AudioEncoding != global::Chippergrpc2.AudioEncoding.LinearPcm) {
        output.WriteRawTag(104);
        output.WriteEnum((int) AudioEncoding);
      }
      if (SingleUtterance != false) {
        output.WriteRawTag(112);
        output.WriteBool(SingleUtterance);
      }
      if (IntentService != global::Chippergrpc2.IntentService.Default) {
        output.WriteRawTag(120);
        output.WriteEnum((int) IntentService);
      }
      if (AppKey.Length != 0) {
        output.WriteRawTag(130, 1);
        output.WriteString(AppKey);
      }
      if (SaveAudio != false) {
        output.WriteRawTag(136, 1);
        output.WriteBool(SaveAudio);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Session.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Session);
      }
      if (DeviceId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DeviceId);
      }
      if (InputAudio.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(InputAudio);
      }
      if (LanguageCode != global::Chippergrpc2.LanguageCode.EnglishUs) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) LanguageCode);
      }
      if (SpeechOnly != false) {
        size += 1 + 1;
      }
      if (FirmwareVersion.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FirmwareVersion);
      }
      if (Mode != global::Chippergrpc2.RobotMode.VoiceCommand) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Mode);
      }
      if (BootId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(BootId);
      }
      if (SkipDas != false) {
        size += 1 + 1;
      }
      if (AudioEncoding != global::Chippergrpc2.AudioEncoding.LinearPcm) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) AudioEncoding);
      }
      if (SingleUtterance != false) {
        size += 1 + 1;
      }
      if (IntentService != global::Chippergrpc2.IntentService.Default) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) IntentService);
      }
      if (AppKey.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(AppKey);
      }
      if (SaveAudio != false) {
        size += 2 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(StreamingIntentRequest other) {
      if (other == null) {
        return;
      }
      if (other.Session.Length != 0) {
        Session = other.Session;
      }
      if (other.DeviceId.Length != 0) {
        DeviceId = other.DeviceId;
      }
      if (other.InputAudio.Length != 0) {
        InputAudio = other.InputAudio;
      }
      if (other.LanguageCode != global::Chippergrpc2.LanguageCode.EnglishUs) {
        LanguageCode = other.LanguageCode;
      }
      if (other.SpeechOnly != false) {
        SpeechOnly = other.SpeechOnly;
      }
      if (other.FirmwareVersion.Length != 0) {
        FirmwareVersion = other.FirmwareVersion;
      }
      if (other.Mode != global::Chippergrpc2.RobotMode.VoiceCommand) {
        Mode = other.Mode;
      }
      if (other.BootId.Length != 0) {
        BootId = other.BootId;
      }
      if (other.SkipDas != false) {
        SkipDas = other.SkipDas;
      }
      if (other.AudioEncoding != global::Chippergrpc2.AudioEncoding.LinearPcm) {
        AudioEncoding = other.AudioEncoding;
      }
      if (other.SingleUtterance != false) {
        SingleUtterance = other.SingleUtterance;
      }
      if (other.IntentService != global::Chippergrpc2.IntentService.Default) {
        IntentService = other.IntentService;
      }
      if (other.AppKey.Length != 0) {
        AppKey = other.AppKey;
      }
      if (other.SaveAudio != false) {
        SaveAudio = other.SaveAudio;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Session = input.ReadString();
            break;
          }
          case 18: {
            DeviceId = input.ReadString();
            break;
          }
          case 26: {
            InputAudio = input.ReadBytes();
            break;
          }
          case 32: {
            LanguageCode = (global::Chippergrpc2.LanguageCode) input.ReadEnum();
            break;
          }
          case 40: {
            SpeechOnly = input.ReadBool();
            break;
          }
          case 50: {
            FirmwareVersion = input.ReadString();
            break;
          }
          case 56: {
            Mode = (global::Chippergrpc2.RobotMode) input.ReadEnum();
            break;
          }
          case 66: {
            BootId = input.ReadString();
            break;
          }
          case 72: {
            SkipDas = input.ReadBool();
            break;
          }
          case 104: {
            AudioEncoding = (global::Chippergrpc2.AudioEncoding) input.ReadEnum();
            break;
          }
          case 112: {
            SingleUtterance = input.ReadBool();
            break;
          }
          case 120: {
            IntentService = (global::Chippergrpc2.IntentService) input.ReadEnum();
            break;
          }
          case 130: {
            AppKey = input.ReadString();
            break;
          }
          case 136: {
            SaveAudio = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class StreamingKnowledgeGraphRequest : pb::IMessage<StreamingKnowledgeGraphRequest> {
    private static readonly pb::MessageParser<StreamingKnowledgeGraphRequest> _parser = new pb::MessageParser<StreamingKnowledgeGraphRequest>(() => new StreamingKnowledgeGraphRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<StreamingKnowledgeGraphRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Chippergrpc2.ChipperpbReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StreamingKnowledgeGraphRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StreamingKnowledgeGraphRequest(StreamingKnowledgeGraphRequest other) : this() {
      session_ = other.session_;
      deviceId_ = other.deviceId_;
      inputAudio_ = other.inputAudio_;
      languageCode_ = other.languageCode_;
      firmwareVersion_ = other.firmwareVersion_;
      audioEncoding_ = other.audioEncoding_;
      appKey_ = other.appKey_;
      saveAudio_ = other.saveAudio_;
      bootId_ = other.bootId_;
      skipDas_ = other.skipDas_;
      timezone_ = other.timezone_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StreamingKnowledgeGraphRequest Clone() {
      return new StreamingKnowledgeGraphRequest(this);
    }

    /// <summary>Field number for the "session" field.</summary>
    public const int SessionFieldNumber = 1;
    private string session_ = "";
    /// <summary>
    /// Required. Can be random number or user identifier.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Session {
      get { return session_; }
      set {
        session_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "device_id" field.</summary>
    public const int DeviceIdFieldNumber = 2;
    private string deviceId_ = "";
    /// <summary>
    /// Required. Robot identifier.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DeviceId {
      get { return deviceId_; }
      set {
        deviceId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "input_audio" field.</summary>
    public const int InputAudioFieldNumber = 3;
    private pb::ByteString inputAudio_ = pb::ByteString.Empty;
    /// <summary>
    /// Required. Input audio content format: 16k SR, 1-channel, 100ms chunks
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString InputAudio {
      get { return inputAudio_; }
      set {
        inputAudio_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "language_code" field.</summary>
    public const int LanguageCodeFieldNumber = 4;
    private global::Chippergrpc2.LanguageCode languageCode_ = global::Chippergrpc2.LanguageCode.EnglishUs;
    /// <summary>
    /// Optional. Specify language for intent-service, default is ENGLISH_US
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Chippergrpc2.LanguageCode LanguageCode {
      get { return languageCode_; }
      set {
        languageCode_ = value;
      }
    }

    /// <summary>Field number for the "firmware_version" field.</summary>
    public const int FirmwareVersionFieldNumber = 5;
    private string firmwareVersion_ = "";
    /// <summary>
    /// Required. Robot firmware version. Use for stats
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FirmwareVersion {
      get { return firmwareVersion_; }
      set {
        firmwareVersion_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "audio_encoding" field.</summary>
    public const int AudioEncodingFieldNumber = 6;
    private global::Chippergrpc2.AudioEncoding audioEncoding_ = global::Chippergrpc2.AudioEncoding.LinearPcm;
    /// <summary>
    /// Optional. Choose audio encoding, default is PCM 16K
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Chippergrpc2.AudioEncoding AudioEncoding {
      get { return audioEncoding_; }
      set {
        audioEncoding_ = value;
      }
    }

    /// <summary>Field number for the "app_key" field.</summary>
    public const int AppKeyFieldNumber = 7;
    private string appKey_ = "";
    /// <summary>
    /// Required for now till TMS is ready. Anki application key
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string AppKey {
      get { return appKey_; }
      set {
        appKey_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "save_audio" field.</summary>
    public const int SaveAudioFieldNumber = 8;
    private bool saveAudio_;
    /// <summary>
    /// Optional. Set whether to save-audio in Dev
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool SaveAudio {
      get { return saveAudio_; }
      set {
        saveAudio_ = value;
      }
    }

    /// <summary>Field number for the "boot_id" field.</summary>
    public const int BootIdFieldNumber = 9;
    private string bootId_ = "";
    /// <summary>
    /// Optional. boot_id for DAS cloud event
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string BootId {
      get { return bootId_; }
      set {
        bootId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "skip_das" field.</summary>
    public const int SkipDasFieldNumber = 10;
    private bool skipDas_;
    /// <summary>
    /// Required. Skip DAS will turn off DAS logging, for GDPR
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool SkipDas {
      get { return skipDas_; }
      set {
        skipDas_ = value;
      }
    }

    /// <summary>Field number for the "timezone" field.</summary>
    public const int TimezoneFieldNumber = 11;
    private string timezone_ = "";
    /// <summary>
    /// Optional. Timezone from robot
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Timezone {
      get { return timezone_; }
      set {
        timezone_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as StreamingKnowledgeGraphRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(StreamingKnowledgeGraphRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Session != other.Session) return false;
      if (DeviceId != other.DeviceId) return false;
      if (InputAudio != other.InputAudio) return false;
      if (LanguageCode != other.LanguageCode) return false;
      if (FirmwareVersion != other.FirmwareVersion) return false;
      if (AudioEncoding != other.AudioEncoding) return false;
      if (AppKey != other.AppKey) return false;
      if (SaveAudio != other.SaveAudio) return false;
      if (BootId != other.BootId) return false;
      if (SkipDas != other.SkipDas) return false;
      if (Timezone != other.Timezone) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Session.Length != 0) hash ^= Session.GetHashCode();
      if (DeviceId.Length != 0) hash ^= DeviceId.GetHashCode();
      if (InputAudio.Length != 0) hash ^= InputAudio.GetHashCode();
      if (LanguageCode != global::Chippergrpc2.LanguageCode.EnglishUs) hash ^= LanguageCode.GetHashCode();
      if (FirmwareVersion.Length != 0) hash ^= FirmwareVersion.GetHashCode();
      if (AudioEncoding != global::Chippergrpc2.AudioEncoding.LinearPcm) hash ^= AudioEncoding.GetHashCode();
      if (AppKey.Length != 0) hash ^= AppKey.GetHashCode();
      if (SaveAudio != false) hash ^= SaveAudio.GetHashCode();
      if (BootId.Length != 0) hash ^= BootId.GetHashCode();
      if (SkipDas != false) hash ^= SkipDas.GetHashCode();
      if (Timezone.Length != 0) hash ^= Timezone.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Session.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Session);
      }
      if (DeviceId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(DeviceId);
      }
      if (InputAudio.Length != 0) {
        output.WriteRawTag(26);
        output.WriteBytes(InputAudio);
      }
      if (LanguageCode != global::Chippergrpc2.LanguageCode.EnglishUs) {
        output.WriteRawTag(32);
        output.WriteEnum((int) LanguageCode);
      }
      if (FirmwareVersion.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(FirmwareVersion);
      }
      if (AudioEncoding != global::Chippergrpc2.AudioEncoding.LinearPcm) {
        output.WriteRawTag(48);
        output.WriteEnum((int) AudioEncoding);
      }
      if (AppKey.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(AppKey);
      }
      if (SaveAudio != false) {
        output.WriteRawTag(64);
        output.WriteBool(SaveAudio);
      }
      if (BootId.Length != 0) {
        output.WriteRawTag(74);
        output.WriteString(BootId);
      }
      if (SkipDas != false) {
        output.WriteRawTag(80);
        output.WriteBool(SkipDas);
      }
      if (Timezone.Length != 0) {
        output.WriteRawTag(90);
        output.WriteString(Timezone);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Session.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Session);
      }
      if (DeviceId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DeviceId);
      }
      if (InputAudio.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(InputAudio);
      }
      if (LanguageCode != global::Chippergrpc2.LanguageCode.EnglishUs) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) LanguageCode);
      }
      if (FirmwareVersion.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FirmwareVersion);
      }
      if (AudioEncoding != global::Chippergrpc2.AudioEncoding.LinearPcm) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) AudioEncoding);
      }
      if (AppKey.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(AppKey);
      }
      if (SaveAudio != false) {
        size += 1 + 1;
      }
      if (BootId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(BootId);
      }
      if (SkipDas != false) {
        size += 1 + 1;
      }
      if (Timezone.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Timezone);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(StreamingKnowledgeGraphRequest other) {
      if (other == null) {
        return;
      }
      if (other.Session.Length != 0) {
        Session = other.Session;
      }
      if (other.DeviceId.Length != 0) {
        DeviceId = other.DeviceId;
      }
      if (other.InputAudio.Length != 0) {
        InputAudio = other.InputAudio;
      }
      if (other.LanguageCode != global::Chippergrpc2.LanguageCode.EnglishUs) {
        LanguageCode = other.LanguageCode;
      }
      if (other.FirmwareVersion.Length != 0) {
        FirmwareVersion = other.FirmwareVersion;
      }
      if (other.AudioEncoding != global::Chippergrpc2.AudioEncoding.LinearPcm) {
        AudioEncoding = other.AudioEncoding;
      }
      if (other.AppKey.Length != 0) {
        AppKey = other.AppKey;
      }
      if (other.SaveAudio != false) {
        SaveAudio = other.SaveAudio;
      }
      if (other.BootId.Length != 0) {
        BootId = other.BootId;
      }
      if (other.SkipDas != false) {
        SkipDas = other.SkipDas;
      }
      if (other.Timezone.Length != 0) {
        Timezone = other.Timezone;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Session = input.ReadString();
            break;
          }
          case 18: {
            DeviceId = input.ReadString();
            break;
          }
          case 26: {
            InputAudio = input.ReadBytes();
            break;
          }
          case 32: {
            LanguageCode = (global::Chippergrpc2.LanguageCode) input.ReadEnum();
            break;
          }
          case 42: {
            FirmwareVersion = input.ReadString();
            break;
          }
          case 48: {
            AudioEncoding = (global::Chippergrpc2.AudioEncoding) input.ReadEnum();
            break;
          }
          case 58: {
            AppKey = input.ReadString();
            break;
          }
          case 64: {
            SaveAudio = input.ReadBool();
            break;
          }
          case 74: {
            BootId = input.ReadString();
            break;
          }
          case 80: {
            SkipDas = input.ReadBool();
            break;
          }
          case 90: {
            Timezone = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class StreamingConnectionCheckRequest : pb::IMessage<StreamingConnectionCheckRequest> {
    private static readonly pb::MessageParser<StreamingConnectionCheckRequest> _parser = new pb::MessageParser<StreamingConnectionCheckRequest>(() => new StreamingConnectionCheckRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<StreamingConnectionCheckRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Chippergrpc2.ChipperpbReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StreamingConnectionCheckRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StreamingConnectionCheckRequest(StreamingConnectionCheckRequest other) : this() {
      session_ = other.session_;
      deviceId_ = other.deviceId_;
      inputAudio_ = other.inputAudio_;
      firmwareVersion_ = other.firmwareVersion_;
      appKey_ = other.appKey_;
      totalAudioMs_ = other.totalAudioMs_;
      audioPerRequest_ = other.audioPerRequest_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StreamingConnectionCheckRequest Clone() {
      return new StreamingConnectionCheckRequest(this);
    }

    /// <summary>Field number for the "session" field.</summary>
    public const int SessionFieldNumber = 1;
    private string session_ = "";
    /// <summary>
    /// Required. Can be random number or user identifier.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Session {
      get { return session_; }
      set {
        session_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "device_id" field.</summary>
    public const int DeviceIdFieldNumber = 2;
    private string deviceId_ = "";
    /// <summary>
    /// Required. Robot identifier.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DeviceId {
      get { return deviceId_; }
      set {
        deviceId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "input_audio" field.</summary>
    public const int InputAudioFieldNumber = 3;
    private pb::ByteString inputAudio_ = pb::ByteString.Empty;
    /// <summary>
    /// Required. Fake audio for connection check. 100ms chunks of 16k SR, 1-channel
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString InputAudio {
      get { return inputAudio_; }
      set {
        inputAudio_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "firmware_version" field.</summary>
    public const int FirmwareVersionFieldNumber = 4;
    private string firmwareVersion_ = "";
    /// <summary>
    /// Required. Robot firmware version. Use for stats
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FirmwareVersion {
      get { return firmwareVersion_; }
      set {
        firmwareVersion_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "app_key" field.</summary>
    public const int AppKeyFieldNumber = 5;
    private string appKey_ = "";
    /// <summary>
    /// Required for now till TMS is ready. Anki application key
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string AppKey {
      get { return appKey_; }
      set {
        appKey_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "total_audio_ms" field.</summary>
    public const int TotalAudioMsFieldNumber = 6;
    private uint totalAudioMs_;
    /// <summary>
    /// Required. How many ms of audio total will be sent up
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TotalAudioMs {
      get { return totalAudioMs_; }
      set {
        totalAudioMs_ = value;
      }
    }

    /// <summary>Field number for the "audio_per_request" field.</summary>
    public const int AudioPerRequestFieldNumber = 7;
    private uint audioPerRequest_;
    /// <summary>
    /// Required. How many ms of audio will be sent per request
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint AudioPerRequest {
      get { return audioPerRequest_; }
      set {
        audioPerRequest_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as StreamingConnectionCheckRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(StreamingConnectionCheckRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Session != other.Session) return false;
      if (DeviceId != other.DeviceId) return false;
      if (InputAudio != other.InputAudio) return false;
      if (FirmwareVersion != other.FirmwareVersion) return false;
      if (AppKey != other.AppKey) return false;
      if (TotalAudioMs != other.TotalAudioMs) return false;
      if (AudioPerRequest != other.AudioPerRequest) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Session.Length != 0) hash ^= Session.GetHashCode();
      if (DeviceId.Length != 0) hash ^= DeviceId.GetHashCode();
      if (InputAudio.Length != 0) hash ^= InputAudio.GetHashCode();
      if (FirmwareVersion.Length != 0) hash ^= FirmwareVersion.GetHashCode();
      if (AppKey.Length != 0) hash ^= AppKey.GetHashCode();
      if (TotalAudioMs != 0) hash ^= TotalAudioMs.GetHashCode();
      if (AudioPerRequest != 0) hash ^= AudioPerRequest.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Session.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Session);
      }
      if (DeviceId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(DeviceId);
      }
      if (InputAudio.Length != 0) {
        output.WriteRawTag(26);
        output.WriteBytes(InputAudio);
      }
      if (FirmwareVersion.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(FirmwareVersion);
      }
      if (AppKey.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(AppKey);
      }
      if (TotalAudioMs != 0) {
        output.WriteRawTag(48);
        output.WriteUInt32(TotalAudioMs);
      }
      if (AudioPerRequest != 0) {
        output.WriteRawTag(56);
        output.WriteUInt32(AudioPerRequest);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Session.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Session);
      }
      if (DeviceId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DeviceId);
      }
      if (InputAudio.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(InputAudio);
      }
      if (FirmwareVersion.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FirmwareVersion);
      }
      if (AppKey.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(AppKey);
      }
      if (TotalAudioMs != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TotalAudioMs);
      }
      if (AudioPerRequest != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(AudioPerRequest);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(StreamingConnectionCheckRequest other) {
      if (other == null) {
        return;
      }
      if (other.Session.Length != 0) {
        Session = other.Session;
      }
      if (other.DeviceId.Length != 0) {
        DeviceId = other.DeviceId;
      }
      if (other.InputAudio.Length != 0) {
        InputAudio = other.InputAudio;
      }
      if (other.FirmwareVersion.Length != 0) {
        FirmwareVersion = other.FirmwareVersion;
      }
      if (other.AppKey.Length != 0) {
        AppKey = other.AppKey;
      }
      if (other.TotalAudioMs != 0) {
        TotalAudioMs = other.TotalAudioMs;
      }
      if (other.AudioPerRequest != 0) {
        AudioPerRequest = other.AudioPerRequest;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Session = input.ReadString();
            break;
          }
          case 18: {
            DeviceId = input.ReadString();
            break;
          }
          case 26: {
            InputAudio = input.ReadBytes();
            break;
          }
          case 34: {
            FirmwareVersion = input.ReadString();
            break;
          }
          case 42: {
            AppKey = input.ReadString();
            break;
          }
          case 48: {
            TotalAudioMs = input.ReadUInt32();
            break;
          }
          case 56: {
            AudioPerRequest = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Response message from server
  /// </summary>
  public sealed partial class IntentResponse : pb::IMessage<IntentResponse> {
    private static readonly pb::MessageParser<IntentResponse> _parser = new pb::MessageParser<IntentResponse>(() => new IntentResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<IntentResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Chippergrpc2.ChipperpbReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IntentResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IntentResponse(IntentResponse other) : this() {
      session_ = other.session_;
      deviceId_ = other.deviceId_;
      isFinal_ = other.isFinal_;
      intentResult_ = other.intentResult_ != null ? other.intentResult_.Clone() : null;
      speechResult_ = other.speechResult_ != null ? other.speechResult_.Clone() : null;
      mode_ = other.mode_;
      audioId_ = other.audioId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IntentResponse Clone() {
      return new IntentResponse(this);
    }

    /// <summary>Field number for the "session" field.</summary>
    public const int SessionFieldNumber = 1;
    private string session_ = "";
    /// <summary>
    /// Session of the request.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Session {
      get { return session_; }
      set {
        session_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "device_id" field.</summary>
    public const int DeviceIdFieldNumber = 2;
    private string deviceId_ = "";
    /// <summary>
    /// Robot identifier.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DeviceId {
      get { return deviceId_; }
      set {
        deviceId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "is_final" field.</summary>
    public const int IsFinalFieldNumber = 3;
    private bool isFinal_;
    /// <summary>
    /// Final response flag. If set to `true`, this will be the last response.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsFinal {
      get { return isFinal_; }
      set {
        isFinal_ = value;
      }
    }

    /// <summary>Field number for the "intent_result" field.</summary>
    public const int IntentResultFieldNumber = 4;
    private global::Chippergrpc2.IntentResult intentResult_;
    /// <summary>
    /// Intent result. Only available when is_final is `true`.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Chippergrpc2.IntentResult IntentResult {
      get { return intentResult_; }
      set {
        intentResult_ = value;
      }
    }

    /// <summary>Field number for the "speech_result" field.</summary>
    public const int SpeechResultFieldNumber = 5;
    private global::Chippergrpc2.SpeechResult speechResult_;
    /// <summary>
    /// Speech result. Available in the interim as speech is transcribed.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Chippergrpc2.SpeechResult SpeechResult {
      get { return speechResult_; }
      set {
        speechResult_ = value;
      }
    }

    /// <summary>Field number for the "mode" field.</summary>
    public const int ModeFieldNumber = 6;
    private global::Chippergrpc2.RobotMode mode_ = global::Chippergrpc2.RobotMode.VoiceCommand;
    /// <summary>
    /// Optional. Robot mode for games and knowledge-graph. default is VOICE_COMMAND
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Chippergrpc2.RobotMode Mode {
      get { return mode_; }
      set {
        mode_ = value;
      }
    }

    /// <summary>Field number for the "audio_id" field.</summary>
    public const int AudioIdFieldNumber = 16;
    private string audioId_ = "";
    /// <summary>
    /// blob-id to audio saved in BlobStore, dev only for debugging.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string AudioId {
      get { return audioId_; }
      set {
        audioId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as IntentResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(IntentResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Session != other.Session) return false;
      if (DeviceId != other.DeviceId) return false;
      if (IsFinal != other.IsFinal) return false;
      if (!object.Equals(IntentResult, other.IntentResult)) return false;
      if (!object.Equals(SpeechResult, other.SpeechResult)) return false;
      if (Mode != other.Mode) return false;
      if (AudioId != other.AudioId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Session.Length != 0) hash ^= Session.GetHashCode();
      if (DeviceId.Length != 0) hash ^= DeviceId.GetHashCode();
      if (IsFinal != false) hash ^= IsFinal.GetHashCode();
      if (intentResult_ != null) hash ^= IntentResult.GetHashCode();
      if (speechResult_ != null) hash ^= SpeechResult.GetHashCode();
      if (Mode != global::Chippergrpc2.RobotMode.VoiceCommand) hash ^= Mode.GetHashCode();
      if (AudioId.Length != 0) hash ^= AudioId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Session.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Session);
      }
      if (DeviceId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(DeviceId);
      }
      if (IsFinal != false) {
        output.WriteRawTag(24);
        output.WriteBool(IsFinal);
      }
      if (intentResult_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(IntentResult);
      }
      if (speechResult_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(SpeechResult);
      }
      if (Mode != global::Chippergrpc2.RobotMode.VoiceCommand) {
        output.WriteRawTag(48);
        output.WriteEnum((int) Mode);
      }
      if (AudioId.Length != 0) {
        output.WriteRawTag(130, 1);
        output.WriteString(AudioId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Session.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Session);
      }
      if (DeviceId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DeviceId);
      }
      if (IsFinal != false) {
        size += 1 + 1;
      }
      if (intentResult_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(IntentResult);
      }
      if (speechResult_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(SpeechResult);
      }
      if (Mode != global::Chippergrpc2.RobotMode.VoiceCommand) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Mode);
      }
      if (AudioId.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(AudioId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(IntentResponse other) {
      if (other == null) {
        return;
      }
      if (other.Session.Length != 0) {
        Session = other.Session;
      }
      if (other.DeviceId.Length != 0) {
        DeviceId = other.DeviceId;
      }
      if (other.IsFinal != false) {
        IsFinal = other.IsFinal;
      }
      if (other.intentResult_ != null) {
        if (intentResult_ == null) {
          IntentResult = new global::Chippergrpc2.IntentResult();
        }
        IntentResult.MergeFrom(other.IntentResult);
      }
      if (other.speechResult_ != null) {
        if (speechResult_ == null) {
          SpeechResult = new global::Chippergrpc2.SpeechResult();
        }
        SpeechResult.MergeFrom(other.SpeechResult);
      }
      if (other.Mode != global::Chippergrpc2.RobotMode.VoiceCommand) {
        Mode = other.Mode;
      }
      if (other.AudioId.Length != 0) {
        AudioId = other.AudioId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Session = input.ReadString();
            break;
          }
          case 18: {
            DeviceId = input.ReadString();
            break;
          }
          case 24: {
            IsFinal = input.ReadBool();
            break;
          }
          case 34: {
            if (intentResult_ == null) {
              IntentResult = new global::Chippergrpc2.IntentResult();
            }
            input.ReadMessage(IntentResult);
            break;
          }
          case 42: {
            if (speechResult_ == null) {
              SpeechResult = new global::Chippergrpc2.SpeechResult();
            }
            input.ReadMessage(SpeechResult);
            break;
          }
          case 48: {
            Mode = (global::Chippergrpc2.RobotMode) input.ReadEnum();
            break;
          }
          case 130: {
            AudioId = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class SpeechResult : pb::IMessage<SpeechResult> {
    private static readonly pb::MessageParser<SpeechResult> _parser = new pb::MessageParser<SpeechResult>(() => new SpeechResult());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SpeechResult> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Chippergrpc2.ChipperpbReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SpeechResult() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SpeechResult(SpeechResult other) : this() {
      transcript_ = other.transcript_;
      isFinal_ = other.isFinal_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SpeechResult Clone() {
      return new SpeechResult(this);
    }

    /// <summary>Field number for the "transcript" field.</summary>
    public const int TranscriptFieldNumber = 1;
    private string transcript_ = "";
    /// <summary>
    /// Text from transcribed audio.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Transcript {
      get { return transcript_; }
      set {
        transcript_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "is_final" field.</summary>
    public const int IsFinalFieldNumber = 2;
    private bool isFinal_;
    /// <summary>
    /// Final result flag. If `false`, represents an interim result.
    /// If `true`, the ASR will not process any additional audio.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsFinal {
      get { return isFinal_; }
      set {
        isFinal_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SpeechResult);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SpeechResult other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Transcript != other.Transcript) return false;
      if (IsFinal != other.IsFinal) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Transcript.Length != 0) hash ^= Transcript.GetHashCode();
      if (IsFinal != false) hash ^= IsFinal.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Transcript.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Transcript);
      }
      if (IsFinal != false) {
        output.WriteRawTag(16);
        output.WriteBool(IsFinal);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Transcript.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Transcript);
      }
      if (IsFinal != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SpeechResult other) {
      if (other == null) {
        return;
      }
      if (other.Transcript.Length != 0) {
        Transcript = other.Transcript;
      }
      if (other.IsFinal != false) {
        IsFinal = other.IsFinal;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Transcript = input.ReadString();
            break;
          }
          case 16: {
            IsFinal = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class IntentResult : pb::IMessage<IntentResult> {
    private static readonly pb::MessageParser<IntentResult> _parser = new pb::MessageParser<IntentResult>(() => new IntentResult());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<IntentResult> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Chippergrpc2.ChipperpbReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IntentResult() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IntentResult(IntentResult other) : this() {
      queryText_ = other.queryText_;
      action_ = other.action_;
      intentConfidence_ = other.intentConfidence_;
      speechConfidence_ = other.speechConfidence_;
      parameters_ = other.parameters_.Clone();
      allParametersPresent_ = other.allParametersPresent_;
      hasContext_ = other.hasContext_;
      service_ = other.service_;
      kgresponse_ = other.kgresponse_ != null ? other.kgresponse_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IntentResult Clone() {
      return new IntentResult(this);
    }

    /// <summary>Field number for the "query_text" field.</summary>
    public const int QueryTextFieldNumber = 1;
    private string queryText_ = "";
    /// <summary>
    /// Transcribed text used for matching.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string QueryText {
      get { return queryText_; }
      set {
        queryText_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "action" field.</summary>
    public const int ActionFieldNumber = 2;
    private string action_ = "";
    /// <summary>
    /// Matched intent name.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Action {
      get { return action_; }
      set {
        action_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "intent_confidence" field.</summary>
    public const int IntentConfidenceFieldNumber = 3;
    private float intentConfidence_;
    /// <summary>
    /// Intent-matching confidence. Value between 0.0 and 1.0 (absolutely certain).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float IntentConfidence {
      get { return intentConfidence_; }
      set {
        intentConfidence_ = value;
      }
    }

    /// <summary>Field number for the "speech_confidence" field.</summary>
    public const int SpeechConfidenceFieldNumber = 4;
    private float speechConfidence_;
    /// <summary>
    /// Speech recognition confidence. Higher is better.
    /// 0.0 is a sentinel value representing no value set.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float SpeechConfidence {
      get { return speechConfidence_; }
      set {
        speechConfidence_ = value;
      }
    }

    /// <summary>Field number for the "parameters" field.</summary>
    public const int ParametersFieldNumber = 5;
    private static readonly pbc::MapField<string, string>.Codec _map_parameters_codec
        = new pbc::MapField<string, string>.Codec(pb::FieldCodec.ForString(10, ""), pb::FieldCodec.ForString(18, ""), 42);
    private readonly pbc::MapField<string, string> parameters_ = new pbc::MapField<string, string>();
    /// <summary>
    /// Collection of extracted entities if available.
    /// google.protobuf.Struct parameters = 5;
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, string> Parameters {
      get { return parameters_; }
    }

    /// <summary>Field number for the "all_parameters_present" field.</summary>
    public const int AllParametersPresentFieldNumber = 6;
    private bool allParametersPresent_;
    /// <summary>
    /// All expected entities are parsed correctly.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool AllParametersPresent {
      get { return allParametersPresent_; }
      set {
        allParametersPresent_ = value;
      }
    }

    /// <summary>Field number for the "has_context" field.</summary>
    public const int HasContextFieldNumber = 7;
    private bool hasContext_;
    /// <summary>
    /// Context flag. If `true`, next request should use same session string
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasContext {
      get { return hasContext_; }
      set {
        hasContext_ = value;
      }
    }

    /// <summary>Field number for the "service" field.</summary>
    public const int ServiceFieldNumber = 8;
    private global::Chippergrpc2.IntentService service_ = global::Chippergrpc2.IntentService.Default;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Chippergrpc2.IntentService Service {
      get { return service_; }
      set {
        service_ = value;
      }
    }

    /// <summary>Field number for the "kgresponse" field.</summary>
    public const int KgresponseFieldNumber = 9;
    private global::Chippergrpc2.KnowledgeGraphResponse kgresponse_;
    /// <summary>
    /// Embed a knowledge graph response if one is available.  This also ensures backwards compatibility
    /// with older robots who won't know whether to look for this or not.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Chippergrpc2.KnowledgeGraphResponse Kgresponse {
      get { return kgresponse_; }
      set {
        kgresponse_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as IntentResult);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(IntentResult other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (QueryText != other.QueryText) return false;
      if (Action != other.Action) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(IntentConfidence, other.IntentConfidence)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(SpeechConfidence, other.SpeechConfidence)) return false;
      if (!Parameters.Equals(other.Parameters)) return false;
      if (AllParametersPresent != other.AllParametersPresent) return false;
      if (HasContext != other.HasContext) return false;
      if (Service != other.Service) return false;
      if (!object.Equals(Kgresponse, other.Kgresponse)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (QueryText.Length != 0) hash ^= QueryText.GetHashCode();
      if (Action.Length != 0) hash ^= Action.GetHashCode();
      if (IntentConfidence != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(IntentConfidence);
      if (SpeechConfidence != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(SpeechConfidence);
      hash ^= Parameters.GetHashCode();
      if (AllParametersPresent != false) hash ^= AllParametersPresent.GetHashCode();
      if (HasContext != false) hash ^= HasContext.GetHashCode();
      if (Service != global::Chippergrpc2.IntentService.Default) hash ^= Service.GetHashCode();
      if (kgresponse_ != null) hash ^= Kgresponse.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (QueryText.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(QueryText);
      }
      if (Action.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Action);
      }
      if (IntentConfidence != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(IntentConfidence);
      }
      if (SpeechConfidence != 0F) {
        output.WriteRawTag(37);
        output.WriteFloat(SpeechConfidence);
      }
      parameters_.WriteTo(output, _map_parameters_codec);
      if (AllParametersPresent != false) {
        output.WriteRawTag(48);
        output.WriteBool(AllParametersPresent);
      }
      if (HasContext != false) {
        output.WriteRawTag(56);
        output.WriteBool(HasContext);
      }
      if (Service != global::Chippergrpc2.IntentService.Default) {
        output.WriteRawTag(64);
        output.WriteEnum((int) Service);
      }
      if (kgresponse_ != null) {
        output.WriteRawTag(74);
        output.WriteMessage(Kgresponse);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (QueryText.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(QueryText);
      }
      if (Action.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Action);
      }
      if (IntentConfidence != 0F) {
        size += 1 + 4;
      }
      if (SpeechConfidence != 0F) {
        size += 1 + 4;
      }
      size += parameters_.CalculateSize(_map_parameters_codec);
      if (AllParametersPresent != false) {
        size += 1 + 1;
      }
      if (HasContext != false) {
        size += 1 + 1;
      }
      if (Service != global::Chippergrpc2.IntentService.Default) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Service);
      }
      if (kgresponse_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Kgresponse);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(IntentResult other) {
      if (other == null) {
        return;
      }
      if (other.QueryText.Length != 0) {
        QueryText = other.QueryText;
      }
      if (other.Action.Length != 0) {
        Action = other.Action;
      }
      if (other.IntentConfidence != 0F) {
        IntentConfidence = other.IntentConfidence;
      }
      if (other.SpeechConfidence != 0F) {
        SpeechConfidence = other.SpeechConfidence;
      }
      parameters_.Add(other.parameters_);
      if (other.AllParametersPresent != false) {
        AllParametersPresent = other.AllParametersPresent;
      }
      if (other.HasContext != false) {
        HasContext = other.HasContext;
      }
      if (other.Service != global::Chippergrpc2.IntentService.Default) {
        Service = other.Service;
      }
      if (other.kgresponse_ != null) {
        if (kgresponse_ == null) {
          Kgresponse = new global::Chippergrpc2.KnowledgeGraphResponse();
        }
        Kgresponse.MergeFrom(other.Kgresponse);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            QueryText = input.ReadString();
            break;
          }
          case 18: {
            Action = input.ReadString();
            break;
          }
          case 29: {
            IntentConfidence = input.ReadFloat();
            break;
          }
          case 37: {
            SpeechConfidence = input.ReadFloat();
            break;
          }
          case 42: {
            parameters_.AddEntriesFrom(input, _map_parameters_codec);
            break;
          }
          case 48: {
            AllParametersPresent = input.ReadBool();
            break;
          }
          case 56: {
            HasContext = input.ReadBool();
            break;
          }
          case 64: {
            Service = (global::Chippergrpc2.IntentService) input.ReadEnum();
            break;
          }
          case 74: {
            if (kgresponse_ == null) {
              Kgresponse = new global::Chippergrpc2.KnowledgeGraphResponse();
            }
            input.ReadMessage(Kgresponse);
            break;
          }
        }
      }
    }

  }

  public sealed partial class KnowledgeGraphResponse : pb::IMessage<KnowledgeGraphResponse> {
    private static readonly pb::MessageParser<KnowledgeGraphResponse> _parser = new pb::MessageParser<KnowledgeGraphResponse>(() => new KnowledgeGraphResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<KnowledgeGraphResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Chippergrpc2.ChipperpbReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public KnowledgeGraphResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public KnowledgeGraphResponse(KnowledgeGraphResponse other) : this() {
      session_ = other.session_;
      deviceId_ = other.deviceId_;
      queryText_ = other.queryText_;
      spokenText_ = other.spokenText_;
      commandType_ = other.commandType_;
      domainsUsed_ = other.domainsUsed_.Clone();
      audioId_ = other.audioId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public KnowledgeGraphResponse Clone() {
      return new KnowledgeGraphResponse(this);
    }

    /// <summary>Field number for the "session" field.</summary>
    public const int SessionFieldNumber = 1;
    private string session_ = "";
    /// <summary>
    /// Session of the request.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Session {
      get { return session_; }
      set {
        session_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "device_id" field.</summary>
    public const int DeviceIdFieldNumber = 2;
    private string deviceId_ = "";
    /// <summary>
    /// Robot identifier.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DeviceId {
      get { return deviceId_; }
      set {
        deviceId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "query_text" field.</summary>
    public const int QueryTextFieldNumber = 3;
    private string queryText_ = "";
    /// <summary>
    /// Transcribed text
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string QueryText {
      get { return queryText_; }
      set {
        queryText_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "spoken_text" field.</summary>
    public const int SpokenTextFieldNumber = 4;
    private string spokenText_ = "";
    /// <summary>
    /// Response to be spoken
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SpokenText {
      get { return spokenText_; }
      set {
        spokenText_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "command_type" field.</summary>
    public const int CommandTypeFieldNumber = 5;
    private string commandType_ = "";
    /// <summary>
    /// What type of command is matched
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CommandType {
      get { return commandType_; }
      set {
        commandType_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "domains_used" field.</summary>
    public const int DomainsUsedFieldNumber = 6;
    private static readonly pb::FieldCodec<string> _repeated_domainsUsed_codec
        = pb::FieldCodec.ForString(50);
    private readonly pbc::RepeatedField<string> domainsUsed_ = new pbc::RepeatedField<string>();
    /// <summary>
    /// which domains were used to match
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> DomainsUsed {
      get { return domainsUsed_; }
    }

    /// <summary>Field number for the "audio_id" field.</summary>
    public const int AudioIdFieldNumber = 7;
    private string audioId_ = "";
    /// <summary>
    /// blob-id to audio saved in BlobStore, dev only for debugging.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string AudioId {
      get { return audioId_; }
      set {
        audioId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as KnowledgeGraphResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(KnowledgeGraphResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Session != other.Session) return false;
      if (DeviceId != other.DeviceId) return false;
      if (QueryText != other.QueryText) return false;
      if (SpokenText != other.SpokenText) return false;
      if (CommandType != other.CommandType) return false;
      if(!domainsUsed_.Equals(other.domainsUsed_)) return false;
      if (AudioId != other.AudioId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Session.Length != 0) hash ^= Session.GetHashCode();
      if (DeviceId.Length != 0) hash ^= DeviceId.GetHashCode();
      if (QueryText.Length != 0) hash ^= QueryText.GetHashCode();
      if (SpokenText.Length != 0) hash ^= SpokenText.GetHashCode();
      if (CommandType.Length != 0) hash ^= CommandType.GetHashCode();
      hash ^= domainsUsed_.GetHashCode();
      if (AudioId.Length != 0) hash ^= AudioId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Session.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Session);
      }
      if (DeviceId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(DeviceId);
      }
      if (QueryText.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(QueryText);
      }
      if (SpokenText.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(SpokenText);
      }
      if (CommandType.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(CommandType);
      }
      domainsUsed_.WriteTo(output, _repeated_domainsUsed_codec);
      if (AudioId.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(AudioId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Session.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Session);
      }
      if (DeviceId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DeviceId);
      }
      if (QueryText.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(QueryText);
      }
      if (SpokenText.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SpokenText);
      }
      if (CommandType.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CommandType);
      }
      size += domainsUsed_.CalculateSize(_repeated_domainsUsed_codec);
      if (AudioId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(AudioId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(KnowledgeGraphResponse other) {
      if (other == null) {
        return;
      }
      if (other.Session.Length != 0) {
        Session = other.Session;
      }
      if (other.DeviceId.Length != 0) {
        DeviceId = other.DeviceId;
      }
      if (other.QueryText.Length != 0) {
        QueryText = other.QueryText;
      }
      if (other.SpokenText.Length != 0) {
        SpokenText = other.SpokenText;
      }
      if (other.CommandType.Length != 0) {
        CommandType = other.CommandType;
      }
      domainsUsed_.Add(other.domainsUsed_);
      if (other.AudioId.Length != 0) {
        AudioId = other.AudioId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Session = input.ReadString();
            break;
          }
          case 18: {
            DeviceId = input.ReadString();
            break;
          }
          case 26: {
            QueryText = input.ReadString();
            break;
          }
          case 34: {
            SpokenText = input.ReadString();
            break;
          }
          case 42: {
            CommandType = input.ReadString();
            break;
          }
          case 50: {
            domainsUsed_.AddEntriesFrom(input, _repeated_domainsUsed_codec);
            break;
          }
          case 58: {
            AudioId = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ConnectionCheckResponse : pb::IMessage<ConnectionCheckResponse> {
    private static readonly pb::MessageParser<ConnectionCheckResponse> _parser = new pb::MessageParser<ConnectionCheckResponse>(() => new ConnectionCheckResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ConnectionCheckResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Chippergrpc2.ChipperpbReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConnectionCheckResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConnectionCheckResponse(ConnectionCheckResponse other) : this() {
      status_ = other.status_;
      framesReceived_ = other.framesReceived_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConnectionCheckResponse Clone() {
      return new ConnectionCheckResponse(this);
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 1;
    private string status_ = "";
    /// <summary>
    /// Status of the connection
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Status {
      get { return status_; }
      set {
        status_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "frames_received" field.</summary>
    public const int FramesReceivedFieldNumber = 2;
    private uint framesReceived_;
    /// <summary>
    /// Number of frames successfully received
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint FramesReceived {
      get { return framesReceived_; }
      set {
        framesReceived_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ConnectionCheckResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ConnectionCheckResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Status != other.Status) return false;
      if (FramesReceived != other.FramesReceived) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Status.Length != 0) hash ^= Status.GetHashCode();
      if (FramesReceived != 0) hash ^= FramesReceived.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Status.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Status);
      }
      if (FramesReceived != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(FramesReceived);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Status.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Status);
      }
      if (FramesReceived != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(FramesReceived);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ConnectionCheckResponse other) {
      if (other == null) {
        return;
      }
      if (other.Status.Length != 0) {
        Status = other.Status;
      }
      if (other.FramesReceived != 0) {
        FramesReceived = other.FramesReceived;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Status = input.ReadString();
            break;
          }
          case 16: {
            FramesReceived = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class WeatherLocation : pb::IMessage<WeatherLocation> {
    private static readonly pb::MessageParser<WeatherLocation> _parser = new pb::MessageParser<WeatherLocation>(() => new WeatherLocation());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<WeatherLocation> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Chippergrpc2.ChipperpbReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WeatherLocation() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WeatherLocation(WeatherLocation other) : this() {
      city_ = other.city_;
      state_ = other.state_;
      country_ = other.country_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WeatherLocation Clone() {
      return new WeatherLocation(this);
    }

    /// <summary>Field number for the "city" field.</summary>
    public const int CityFieldNumber = 1;
    private string city_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string City {
      get { return city_; }
      set {
        city_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "state" field.</summary>
    public const int StateFieldNumber = 2;
    private string state_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string State {
      get { return state_; }
      set {
        state_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "country" field.</summary>
    public const int CountryFieldNumber = 3;
    private string country_ = "";
    /// <summary>
    /// ISO 2-letter
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Country {
      get { return country_; }
      set {
        country_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as WeatherLocation);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(WeatherLocation other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (City != other.City) return false;
      if (State != other.State) return false;
      if (Country != other.Country) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (City.Length != 0) hash ^= City.GetHashCode();
      if (State.Length != 0) hash ^= State.GetHashCode();
      if (Country.Length != 0) hash ^= Country.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (City.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(City);
      }
      if (State.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(State);
      }
      if (Country.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Country);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (City.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(City);
      }
      if (State.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(State);
      }
      if (Country.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Country);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(WeatherLocation other) {
      if (other == null) {
        return;
      }
      if (other.City.Length != 0) {
        City = other.City;
      }
      if (other.State.Length != 0) {
        State = other.State;
      }
      if (other.Country.Length != 0) {
        Country = other.Country;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            City = input.ReadString();
            break;
          }
          case 18: {
            State = input.ReadString();
            break;
          }
          case 26: {
            Country = input.ReadString();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
