// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: jdocs.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_jdocs_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_jdocs_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "google/api/annotations.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_jdocs_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_jdocs_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[16]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_jdocs_2eproto;
namespace jdocspb {
class DeleteDocReq;
class DeleteDocReqDefaultTypeInternal;
extern DeleteDocReqDefaultTypeInternal _DeleteDocReq_default_instance_;
class DeleteDocResp;
class DeleteDocRespDefaultTypeInternal;
extern DeleteDocRespDefaultTypeInternal _DeleteDocResp_default_instance_;
class EchoReq;
class EchoReqDefaultTypeInternal;
extern EchoReqDefaultTypeInternal _EchoReq_default_instance_;
class EchoResp;
class EchoRespDefaultTypeInternal;
extern EchoRespDefaultTypeInternal _EchoResp_default_instance_;
class Jdoc;
class JdocDefaultTypeInternal;
extern JdocDefaultTypeInternal _Jdoc_default_instance_;
class PurgeAccountDocsReq;
class PurgeAccountDocsReqDefaultTypeInternal;
extern PurgeAccountDocsReqDefaultTypeInternal _PurgeAccountDocsReq_default_instance_;
class PurgeAccountDocsResp;
class PurgeAccountDocsRespDefaultTypeInternal;
extern PurgeAccountDocsRespDefaultTypeInternal _PurgeAccountDocsResp_default_instance_;
class ReadDocsReq;
class ReadDocsReqDefaultTypeInternal;
extern ReadDocsReqDefaultTypeInternal _ReadDocsReq_default_instance_;
class ReadDocsReq_Item;
class ReadDocsReq_ItemDefaultTypeInternal;
extern ReadDocsReq_ItemDefaultTypeInternal _ReadDocsReq_Item_default_instance_;
class ReadDocsResp;
class ReadDocsRespDefaultTypeInternal;
extern ReadDocsRespDefaultTypeInternal _ReadDocsResp_default_instance_;
class ReadDocsResp_Item;
class ReadDocsResp_ItemDefaultTypeInternal;
extern ReadDocsResp_ItemDefaultTypeInternal _ReadDocsResp_Item_default_instance_;
class ViewAccountDocsReq;
class ViewAccountDocsReqDefaultTypeInternal;
extern ViewAccountDocsReqDefaultTypeInternal _ViewAccountDocsReq_default_instance_;
class ViewDoc;
class ViewDocDefaultTypeInternal;
extern ViewDocDefaultTypeInternal _ViewDoc_default_instance_;
class ViewDocsResp;
class ViewDocsRespDefaultTypeInternal;
extern ViewDocsRespDefaultTypeInternal _ViewDocsResp_default_instance_;
class WriteDocReq;
class WriteDocReqDefaultTypeInternal;
extern WriteDocReqDefaultTypeInternal _WriteDocReq_default_instance_;
class WriteDocResp;
class WriteDocRespDefaultTypeInternal;
extern WriteDocRespDefaultTypeInternal _WriteDocResp_default_instance_;
}  // namespace jdocspb
PROTOBUF_NAMESPACE_OPEN
template<> ::jdocspb::DeleteDocReq* Arena::CreateMaybeMessage<::jdocspb::DeleteDocReq>(Arena*);
template<> ::jdocspb::DeleteDocResp* Arena::CreateMaybeMessage<::jdocspb::DeleteDocResp>(Arena*);
template<> ::jdocspb::EchoReq* Arena::CreateMaybeMessage<::jdocspb::EchoReq>(Arena*);
template<> ::jdocspb::EchoResp* Arena::CreateMaybeMessage<::jdocspb::EchoResp>(Arena*);
template<> ::jdocspb::Jdoc* Arena::CreateMaybeMessage<::jdocspb::Jdoc>(Arena*);
template<> ::jdocspb::PurgeAccountDocsReq* Arena::CreateMaybeMessage<::jdocspb::PurgeAccountDocsReq>(Arena*);
template<> ::jdocspb::PurgeAccountDocsResp* Arena::CreateMaybeMessage<::jdocspb::PurgeAccountDocsResp>(Arena*);
template<> ::jdocspb::ReadDocsReq* Arena::CreateMaybeMessage<::jdocspb::ReadDocsReq>(Arena*);
template<> ::jdocspb::ReadDocsReq_Item* Arena::CreateMaybeMessage<::jdocspb::ReadDocsReq_Item>(Arena*);
template<> ::jdocspb::ReadDocsResp* Arena::CreateMaybeMessage<::jdocspb::ReadDocsResp>(Arena*);
template<> ::jdocspb::ReadDocsResp_Item* Arena::CreateMaybeMessage<::jdocspb::ReadDocsResp_Item>(Arena*);
template<> ::jdocspb::ViewAccountDocsReq* Arena::CreateMaybeMessage<::jdocspb::ViewAccountDocsReq>(Arena*);
template<> ::jdocspb::ViewDoc* Arena::CreateMaybeMessage<::jdocspb::ViewDoc>(Arena*);
template<> ::jdocspb::ViewDocsResp* Arena::CreateMaybeMessage<::jdocspb::ViewDocsResp>(Arena*);
template<> ::jdocspb::WriteDocReq* Arena::CreateMaybeMessage<::jdocspb::WriteDocReq>(Arena*);
template<> ::jdocspb::WriteDocResp* Arena::CreateMaybeMessage<::jdocspb::WriteDocResp>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace jdocspb {

enum WriteDocResp_Status : int {
  WriteDocResp_Status_ACCEPTED = 0,
  WriteDocResp_Status_REJECTED_BAD_DOC_VERSION = 1,
  WriteDocResp_Status_REJECTED_BAD_FMT_VERSION = 2,
  WriteDocResp_Status_WriteDocResp_Status_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  WriteDocResp_Status_WriteDocResp_Status_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool WriteDocResp_Status_IsValid(int value);
constexpr WriteDocResp_Status WriteDocResp_Status_Status_MIN = WriteDocResp_Status_ACCEPTED;
constexpr WriteDocResp_Status WriteDocResp_Status_Status_MAX = WriteDocResp_Status_REJECTED_BAD_FMT_VERSION;
constexpr int WriteDocResp_Status_Status_ARRAYSIZE = WriteDocResp_Status_Status_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* WriteDocResp_Status_descriptor();
template<typename T>
inline const std::string& WriteDocResp_Status_Name(T enum_t_value) {
  static_assert(::std::is_same<T, WriteDocResp_Status>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function WriteDocResp_Status_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    WriteDocResp_Status_descriptor(), enum_t_value);
}
inline bool WriteDocResp_Status_Parse(
    const std::string& name, WriteDocResp_Status* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<WriteDocResp_Status>(
    WriteDocResp_Status_descriptor(), name, value);
}
enum ReadDocsResp_Status : int {
  ReadDocsResp_Status_UNCHANGED = 0,
  ReadDocsResp_Status_CHANGED = 1,
  ReadDocsResp_Status_NOT_FOUND = 2,
  ReadDocsResp_Status_ReadDocsResp_Status_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  ReadDocsResp_Status_ReadDocsResp_Status_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool ReadDocsResp_Status_IsValid(int value);
constexpr ReadDocsResp_Status ReadDocsResp_Status_Status_MIN = ReadDocsResp_Status_UNCHANGED;
constexpr ReadDocsResp_Status ReadDocsResp_Status_Status_MAX = ReadDocsResp_Status_NOT_FOUND;
constexpr int ReadDocsResp_Status_Status_ARRAYSIZE = ReadDocsResp_Status_Status_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ReadDocsResp_Status_descriptor();
template<typename T>
inline const std::string& ReadDocsResp_Status_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ReadDocsResp_Status>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ReadDocsResp_Status_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ReadDocsResp_Status_descriptor(), enum_t_value);
}
inline bool ReadDocsResp_Status_Parse(
    const std::string& name, ReadDocsResp_Status* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ReadDocsResp_Status>(
    ReadDocsResp_Status_descriptor(), name, value);
}
// ===================================================================

class Jdoc PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:jdocspb.Jdoc) */ {
 public:
  inline Jdoc() : Jdoc(nullptr) {};
  virtual ~Jdoc();

  Jdoc(const Jdoc& from);
  Jdoc(Jdoc&& from) noexcept
    : Jdoc() {
    *this = ::std::move(from);
  }

  inline Jdoc& operator=(const Jdoc& from) {
    CopyFrom(from);
    return *this;
  }
  inline Jdoc& operator=(Jdoc&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Jdoc& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Jdoc* internal_default_instance() {
    return reinterpret_cast<const Jdoc*>(
               &_Jdoc_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Jdoc& a, Jdoc& b) {
    a.Swap(&b);
  }
  inline void Swap(Jdoc* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Jdoc* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Jdoc* New() const final {
    return CreateMaybeMessage<Jdoc>(nullptr);
  }

  Jdoc* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Jdoc>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Jdoc& from);
  void MergeFrom(const Jdoc& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Jdoc* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "jdocspb.Jdoc";
  }
  protected:
  explicit Jdoc(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_jdocs_2eproto);
    return ::descriptor_table_jdocs_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kClientMetadataFieldNumber = 3,
    kJsonDocFieldNumber = 4,
    kDocVersionFieldNumber = 1,
    kFmtVersionFieldNumber = 2,
  };
  // string client_metadata = 3;
  void clear_client_metadata();
  const std::string& client_metadata() const;
  void set_client_metadata(const std::string& value);
  void set_client_metadata(std::string&& value);
  void set_client_metadata(const char* value);
  void set_client_metadata(const char* value, size_t size);
  std::string* mutable_client_metadata();
  std::string* release_client_metadata();
  void set_allocated_client_metadata(std::string* client_metadata);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_client_metadata();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_client_metadata(
      std::string* client_metadata);
  private:
  const std::string& _internal_client_metadata() const;
  void _internal_set_client_metadata(const std::string& value);
  std::string* _internal_mutable_client_metadata();
  public:

  // string json_doc = 4;
  void clear_json_doc();
  const std::string& json_doc() const;
  void set_json_doc(const std::string& value);
  void set_json_doc(std::string&& value);
  void set_json_doc(const char* value);
  void set_json_doc(const char* value, size_t size);
  std::string* mutable_json_doc();
  std::string* release_json_doc();
  void set_allocated_json_doc(std::string* json_doc);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_json_doc();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_json_doc(
      std::string* json_doc);
  private:
  const std::string& _internal_json_doc() const;
  void _internal_set_json_doc(const std::string& value);
  std::string* _internal_mutable_json_doc();
  public:

  // uint64 doc_version = 1;
  void clear_doc_version();
  ::PROTOBUF_NAMESPACE_ID::uint64 doc_version() const;
  void set_doc_version(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_doc_version() const;
  void _internal_set_doc_version(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 fmt_version = 2;
  void clear_fmt_version();
  ::PROTOBUF_NAMESPACE_ID::uint64 fmt_version() const;
  void set_fmt_version(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_fmt_version() const;
  void _internal_set_fmt_version(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:jdocspb.Jdoc)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr client_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr json_doc_;
  ::PROTOBUF_NAMESPACE_ID::uint64 doc_version_;
  ::PROTOBUF_NAMESPACE_ID::uint64 fmt_version_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_jdocs_2eproto;
};
// -------------------------------------------------------------------

class EchoReq PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:jdocspb.EchoReq) */ {
 public:
  inline EchoReq() : EchoReq(nullptr) {};
  virtual ~EchoReq();

  EchoReq(const EchoReq& from);
  EchoReq(EchoReq&& from) noexcept
    : EchoReq() {
    *this = ::std::move(from);
  }

  inline EchoReq& operator=(const EchoReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline EchoReq& operator=(EchoReq&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const EchoReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const EchoReq* internal_default_instance() {
    return reinterpret_cast<const EchoReq*>(
               &_EchoReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(EchoReq& a, EchoReq& b) {
    a.Swap(&b);
  }
  inline void Swap(EchoReq* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EchoReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline EchoReq* New() const final {
    return CreateMaybeMessage<EchoReq>(nullptr);
  }

  EchoReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<EchoReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const EchoReq& from);
  void MergeFrom(const EchoReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EchoReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "jdocspb.EchoReq";
  }
  protected:
  explicit EchoReq(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_jdocs_2eproto);
    return ::descriptor_table_jdocs_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 1,
  };
  // string Data = 1;
  void clear_data();
  const std::string& data() const;
  void set_data(const std::string& value);
  void set_data(std::string&& value);
  void set_data(const char* value);
  void set_data(const char* value, size_t size);
  std::string* mutable_data();
  std::string* release_data();
  void set_allocated_data(std::string* data);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_data();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_data(
      std::string* data);
  private:
  const std::string& _internal_data() const;
  void _internal_set_data(const std::string& value);
  std::string* _internal_mutable_data();
  public:

  // @@protoc_insertion_point(class_scope:jdocspb.EchoReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_jdocs_2eproto;
};
// -------------------------------------------------------------------

class EchoResp PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:jdocspb.EchoResp) */ {
 public:
  inline EchoResp() : EchoResp(nullptr) {};
  virtual ~EchoResp();

  EchoResp(const EchoResp& from);
  EchoResp(EchoResp&& from) noexcept
    : EchoResp() {
    *this = ::std::move(from);
  }

  inline EchoResp& operator=(const EchoResp& from) {
    CopyFrom(from);
    return *this;
  }
  inline EchoResp& operator=(EchoResp&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const EchoResp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const EchoResp* internal_default_instance() {
    return reinterpret_cast<const EchoResp*>(
               &_EchoResp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(EchoResp& a, EchoResp& b) {
    a.Swap(&b);
  }
  inline void Swap(EchoResp* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EchoResp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline EchoResp* New() const final {
    return CreateMaybeMessage<EchoResp>(nullptr);
  }

  EchoResp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<EchoResp>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const EchoResp& from);
  void MergeFrom(const EchoResp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EchoResp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "jdocspb.EchoResp";
  }
  protected:
  explicit EchoResp(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_jdocs_2eproto);
    return ::descriptor_table_jdocs_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 1,
  };
  // string Data = 1;
  void clear_data();
  const std::string& data() const;
  void set_data(const std::string& value);
  void set_data(std::string&& value);
  void set_data(const char* value);
  void set_data(const char* value, size_t size);
  std::string* mutable_data();
  std::string* release_data();
  void set_allocated_data(std::string* data);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_data();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_data(
      std::string* data);
  private:
  const std::string& _internal_data() const;
  void _internal_set_data(const std::string& value);
  std::string* _internal_mutable_data();
  public:

  // @@protoc_insertion_point(class_scope:jdocspb.EchoResp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_jdocs_2eproto;
};
// -------------------------------------------------------------------

class WriteDocReq PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:jdocspb.WriteDocReq) */ {
 public:
  inline WriteDocReq() : WriteDocReq(nullptr) {};
  virtual ~WriteDocReq();

  WriteDocReq(const WriteDocReq& from);
  WriteDocReq(WriteDocReq&& from) noexcept
    : WriteDocReq() {
    *this = ::std::move(from);
  }

  inline WriteDocReq& operator=(const WriteDocReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline WriteDocReq& operator=(WriteDocReq&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const WriteDocReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const WriteDocReq* internal_default_instance() {
    return reinterpret_cast<const WriteDocReq*>(
               &_WriteDocReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(WriteDocReq& a, WriteDocReq& b) {
    a.Swap(&b);
  }
  inline void Swap(WriteDocReq* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WriteDocReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline WriteDocReq* New() const final {
    return CreateMaybeMessage<WriteDocReq>(nullptr);
  }

  WriteDocReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<WriteDocReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const WriteDocReq& from);
  void MergeFrom(const WriteDocReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WriteDocReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "jdocspb.WriteDocReq";
  }
  protected:
  explicit WriteDocReq(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_jdocs_2eproto);
    return ::descriptor_table_jdocs_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserIdFieldNumber = 1,
    kThingFieldNumber = 2,
    kDocNameFieldNumber = 3,
    kDocFieldNumber = 4,
  };
  // string user_id = 1;
  void clear_user_id();
  const std::string& user_id() const;
  void set_user_id(const std::string& value);
  void set_user_id(std::string&& value);
  void set_user_id(const char* value);
  void set_user_id(const char* value, size_t size);
  std::string* mutable_user_id();
  std::string* release_user_id();
  void set_allocated_user_id(std::string* user_id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_user_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_user_id(
      std::string* user_id);
  private:
  const std::string& _internal_user_id() const;
  void _internal_set_user_id(const std::string& value);
  std::string* _internal_mutable_user_id();
  public:

  // string thing = 2;
  void clear_thing();
  const std::string& thing() const;
  void set_thing(const std::string& value);
  void set_thing(std::string&& value);
  void set_thing(const char* value);
  void set_thing(const char* value, size_t size);
  std::string* mutable_thing();
  std::string* release_thing();
  void set_allocated_thing(std::string* thing);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_thing();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_thing(
      std::string* thing);
  private:
  const std::string& _internal_thing() const;
  void _internal_set_thing(const std::string& value);
  std::string* _internal_mutable_thing();
  public:

  // string doc_name = 3;
  void clear_doc_name();
  const std::string& doc_name() const;
  void set_doc_name(const std::string& value);
  void set_doc_name(std::string&& value);
  void set_doc_name(const char* value);
  void set_doc_name(const char* value, size_t size);
  std::string* mutable_doc_name();
  std::string* release_doc_name();
  void set_allocated_doc_name(std::string* doc_name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_doc_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_doc_name(
      std::string* doc_name);
  private:
  const std::string& _internal_doc_name() const;
  void _internal_set_doc_name(const std::string& value);
  std::string* _internal_mutable_doc_name();
  public:

  // .jdocspb.Jdoc doc = 4;
  bool has_doc() const;
  private:
  bool _internal_has_doc() const;
  public:
  void clear_doc();
  const ::jdocspb::Jdoc& doc() const;
  ::jdocspb::Jdoc* release_doc();
  ::jdocspb::Jdoc* mutable_doc();
  void set_allocated_doc(::jdocspb::Jdoc* doc);
  private:
  const ::jdocspb::Jdoc& _internal_doc() const;
  ::jdocspb::Jdoc* _internal_mutable_doc();
  public:
  void unsafe_arena_set_allocated_doc(
      ::jdocspb::Jdoc* doc);
  ::jdocspb::Jdoc* unsafe_arena_release_doc();

  // @@protoc_insertion_point(class_scope:jdocspb.WriteDocReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr thing_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr doc_name_;
  ::jdocspb::Jdoc* doc_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_jdocs_2eproto;
};
// -------------------------------------------------------------------

class WriteDocResp PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:jdocspb.WriteDocResp) */ {
 public:
  inline WriteDocResp() : WriteDocResp(nullptr) {};
  virtual ~WriteDocResp();

  WriteDocResp(const WriteDocResp& from);
  WriteDocResp(WriteDocResp&& from) noexcept
    : WriteDocResp() {
    *this = ::std::move(from);
  }

  inline WriteDocResp& operator=(const WriteDocResp& from) {
    CopyFrom(from);
    return *this;
  }
  inline WriteDocResp& operator=(WriteDocResp&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const WriteDocResp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const WriteDocResp* internal_default_instance() {
    return reinterpret_cast<const WriteDocResp*>(
               &_WriteDocResp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(WriteDocResp& a, WriteDocResp& b) {
    a.Swap(&b);
  }
  inline void Swap(WriteDocResp* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WriteDocResp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline WriteDocResp* New() const final {
    return CreateMaybeMessage<WriteDocResp>(nullptr);
  }

  WriteDocResp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<WriteDocResp>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const WriteDocResp& from);
  void MergeFrom(const WriteDocResp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WriteDocResp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "jdocspb.WriteDocResp";
  }
  protected:
  explicit WriteDocResp(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_jdocs_2eproto);
    return ::descriptor_table_jdocs_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef WriteDocResp_Status Status;
  static constexpr Status ACCEPTED =
    WriteDocResp_Status_ACCEPTED;
  static constexpr Status REJECTED_BAD_DOC_VERSION =
    WriteDocResp_Status_REJECTED_BAD_DOC_VERSION;
  static constexpr Status REJECTED_BAD_FMT_VERSION =
    WriteDocResp_Status_REJECTED_BAD_FMT_VERSION;
  static inline bool Status_IsValid(int value) {
    return WriteDocResp_Status_IsValid(value);
  }
  static constexpr Status Status_MIN =
    WriteDocResp_Status_Status_MIN;
  static constexpr Status Status_MAX =
    WriteDocResp_Status_Status_MAX;
  static constexpr int Status_ARRAYSIZE =
    WriteDocResp_Status_Status_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Status_descriptor() {
    return WriteDocResp_Status_descriptor();
  }
  template<typename T>
  static inline const std::string& Status_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Status>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Status_Name.");
    return WriteDocResp_Status_Name(enum_t_value);
  }
  static inline bool Status_Parse(const std::string& name,
      Status* value) {
    return WriteDocResp_Status_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kLatestDocVersionFieldNumber = 2,
    kStatusFieldNumber = 1,
  };
  // uint64 latest_doc_version = 2;
  void clear_latest_doc_version();
  ::PROTOBUF_NAMESPACE_ID::uint64 latest_doc_version() const;
  void set_latest_doc_version(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_latest_doc_version() const;
  void _internal_set_latest_doc_version(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // .jdocspb.WriteDocResp.Status status = 1;
  void clear_status();
  ::jdocspb::WriteDocResp_Status status() const;
  void set_status(::jdocspb::WriteDocResp_Status value);
  private:
  ::jdocspb::WriteDocResp_Status _internal_status() const;
  void _internal_set_status(::jdocspb::WriteDocResp_Status value);
  public:

  // @@protoc_insertion_point(class_scope:jdocspb.WriteDocResp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint64 latest_doc_version_;
  int status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_jdocs_2eproto;
};
// -------------------------------------------------------------------

class ReadDocsReq_Item PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:jdocspb.ReadDocsReq.Item) */ {
 public:
  inline ReadDocsReq_Item() : ReadDocsReq_Item(nullptr) {};
  virtual ~ReadDocsReq_Item();

  ReadDocsReq_Item(const ReadDocsReq_Item& from);
  ReadDocsReq_Item(ReadDocsReq_Item&& from) noexcept
    : ReadDocsReq_Item() {
    *this = ::std::move(from);
  }

  inline ReadDocsReq_Item& operator=(const ReadDocsReq_Item& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReadDocsReq_Item& operator=(ReadDocsReq_Item&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ReadDocsReq_Item& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ReadDocsReq_Item* internal_default_instance() {
    return reinterpret_cast<const ReadDocsReq_Item*>(
               &_ReadDocsReq_Item_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(ReadDocsReq_Item& a, ReadDocsReq_Item& b) {
    a.Swap(&b);
  }
  inline void Swap(ReadDocsReq_Item* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReadDocsReq_Item* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ReadDocsReq_Item* New() const final {
    return CreateMaybeMessage<ReadDocsReq_Item>(nullptr);
  }

  ReadDocsReq_Item* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ReadDocsReq_Item>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ReadDocsReq_Item& from);
  void MergeFrom(const ReadDocsReq_Item& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReadDocsReq_Item* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "jdocspb.ReadDocsReq.Item";
  }
  protected:
  explicit ReadDocsReq_Item(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_jdocs_2eproto);
    return ::descriptor_table_jdocs_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDocNameFieldNumber = 1,
    kMyDocVersionFieldNumber = 2,
  };
  // string doc_name = 1;
  void clear_doc_name();
  const std::string& doc_name() const;
  void set_doc_name(const std::string& value);
  void set_doc_name(std::string&& value);
  void set_doc_name(const char* value);
  void set_doc_name(const char* value, size_t size);
  std::string* mutable_doc_name();
  std::string* release_doc_name();
  void set_allocated_doc_name(std::string* doc_name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_doc_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_doc_name(
      std::string* doc_name);
  private:
  const std::string& _internal_doc_name() const;
  void _internal_set_doc_name(const std::string& value);
  std::string* _internal_mutable_doc_name();
  public:

  // uint64 my_doc_version = 2;
  void clear_my_doc_version();
  ::PROTOBUF_NAMESPACE_ID::uint64 my_doc_version() const;
  void set_my_doc_version(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_my_doc_version() const;
  void _internal_set_my_doc_version(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:jdocspb.ReadDocsReq.Item)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr doc_name_;
  ::PROTOBUF_NAMESPACE_ID::uint64 my_doc_version_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_jdocs_2eproto;
};
// -------------------------------------------------------------------

class ReadDocsReq PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:jdocspb.ReadDocsReq) */ {
 public:
  inline ReadDocsReq() : ReadDocsReq(nullptr) {};
  virtual ~ReadDocsReq();

  ReadDocsReq(const ReadDocsReq& from);
  ReadDocsReq(ReadDocsReq&& from) noexcept
    : ReadDocsReq() {
    *this = ::std::move(from);
  }

  inline ReadDocsReq& operator=(const ReadDocsReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReadDocsReq& operator=(ReadDocsReq&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ReadDocsReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ReadDocsReq* internal_default_instance() {
    return reinterpret_cast<const ReadDocsReq*>(
               &_ReadDocsReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(ReadDocsReq& a, ReadDocsReq& b) {
    a.Swap(&b);
  }
  inline void Swap(ReadDocsReq* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReadDocsReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ReadDocsReq* New() const final {
    return CreateMaybeMessage<ReadDocsReq>(nullptr);
  }

  ReadDocsReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ReadDocsReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ReadDocsReq& from);
  void MergeFrom(const ReadDocsReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReadDocsReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "jdocspb.ReadDocsReq";
  }
  protected:
  explicit ReadDocsReq(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_jdocs_2eproto);
    return ::descriptor_table_jdocs_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef ReadDocsReq_Item Item;

  // accessors -------------------------------------------------------

  enum : int {
    kItemsFieldNumber = 3,
    kUserIdFieldNumber = 1,
    kThingFieldNumber = 2,
  };
  // repeated .jdocspb.ReadDocsReq.Item items = 3;
  int items_size() const;
  private:
  int _internal_items_size() const;
  public:
  void clear_items();
  ::jdocspb::ReadDocsReq_Item* mutable_items(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::jdocspb::ReadDocsReq_Item >*
      mutable_items();
  private:
  const ::jdocspb::ReadDocsReq_Item& _internal_items(int index) const;
  ::jdocspb::ReadDocsReq_Item* _internal_add_items();
  public:
  const ::jdocspb::ReadDocsReq_Item& items(int index) const;
  ::jdocspb::ReadDocsReq_Item* add_items();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::jdocspb::ReadDocsReq_Item >&
      items() const;

  // string user_id = 1;
  void clear_user_id();
  const std::string& user_id() const;
  void set_user_id(const std::string& value);
  void set_user_id(std::string&& value);
  void set_user_id(const char* value);
  void set_user_id(const char* value, size_t size);
  std::string* mutable_user_id();
  std::string* release_user_id();
  void set_allocated_user_id(std::string* user_id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_user_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_user_id(
      std::string* user_id);
  private:
  const std::string& _internal_user_id() const;
  void _internal_set_user_id(const std::string& value);
  std::string* _internal_mutable_user_id();
  public:

  // string thing = 2;
  void clear_thing();
  const std::string& thing() const;
  void set_thing(const std::string& value);
  void set_thing(std::string&& value);
  void set_thing(const char* value);
  void set_thing(const char* value, size_t size);
  std::string* mutable_thing();
  std::string* release_thing();
  void set_allocated_thing(std::string* thing);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_thing();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_thing(
      std::string* thing);
  private:
  const std::string& _internal_thing() const;
  void _internal_set_thing(const std::string& value);
  std::string* _internal_mutable_thing();
  public:

  // @@protoc_insertion_point(class_scope:jdocspb.ReadDocsReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::jdocspb::ReadDocsReq_Item > items_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr thing_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_jdocs_2eproto;
};
// -------------------------------------------------------------------

class ReadDocsResp_Item PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:jdocspb.ReadDocsResp.Item) */ {
 public:
  inline ReadDocsResp_Item() : ReadDocsResp_Item(nullptr) {};
  virtual ~ReadDocsResp_Item();

  ReadDocsResp_Item(const ReadDocsResp_Item& from);
  ReadDocsResp_Item(ReadDocsResp_Item&& from) noexcept
    : ReadDocsResp_Item() {
    *this = ::std::move(from);
  }

  inline ReadDocsResp_Item& operator=(const ReadDocsResp_Item& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReadDocsResp_Item& operator=(ReadDocsResp_Item&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ReadDocsResp_Item& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ReadDocsResp_Item* internal_default_instance() {
    return reinterpret_cast<const ReadDocsResp_Item*>(
               &_ReadDocsResp_Item_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(ReadDocsResp_Item& a, ReadDocsResp_Item& b) {
    a.Swap(&b);
  }
  inline void Swap(ReadDocsResp_Item* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReadDocsResp_Item* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ReadDocsResp_Item* New() const final {
    return CreateMaybeMessage<ReadDocsResp_Item>(nullptr);
  }

  ReadDocsResp_Item* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ReadDocsResp_Item>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ReadDocsResp_Item& from);
  void MergeFrom(const ReadDocsResp_Item& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReadDocsResp_Item* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "jdocspb.ReadDocsResp.Item";
  }
  protected:
  explicit ReadDocsResp_Item(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_jdocs_2eproto);
    return ::descriptor_table_jdocs_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDocFieldNumber = 2,
    kStatusFieldNumber = 1,
  };
  // .jdocspb.Jdoc doc = 2;
  bool has_doc() const;
  private:
  bool _internal_has_doc() const;
  public:
  void clear_doc();
  const ::jdocspb::Jdoc& doc() const;
  ::jdocspb::Jdoc* release_doc();
  ::jdocspb::Jdoc* mutable_doc();
  void set_allocated_doc(::jdocspb::Jdoc* doc);
  private:
  const ::jdocspb::Jdoc& _internal_doc() const;
  ::jdocspb::Jdoc* _internal_mutable_doc();
  public:
  void unsafe_arena_set_allocated_doc(
      ::jdocspb::Jdoc* doc);
  ::jdocspb::Jdoc* unsafe_arena_release_doc();

  // .jdocspb.ReadDocsResp.Status status = 1;
  void clear_status();
  ::jdocspb::ReadDocsResp_Status status() const;
  void set_status(::jdocspb::ReadDocsResp_Status value);
  private:
  ::jdocspb::ReadDocsResp_Status _internal_status() const;
  void _internal_set_status(::jdocspb::ReadDocsResp_Status value);
  public:

  // @@protoc_insertion_point(class_scope:jdocspb.ReadDocsResp.Item)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::jdocspb::Jdoc* doc_;
  int status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_jdocs_2eproto;
};
// -------------------------------------------------------------------

class ReadDocsResp PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:jdocspb.ReadDocsResp) */ {
 public:
  inline ReadDocsResp() : ReadDocsResp(nullptr) {};
  virtual ~ReadDocsResp();

  ReadDocsResp(const ReadDocsResp& from);
  ReadDocsResp(ReadDocsResp&& from) noexcept
    : ReadDocsResp() {
    *this = ::std::move(from);
  }

  inline ReadDocsResp& operator=(const ReadDocsResp& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReadDocsResp& operator=(ReadDocsResp&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ReadDocsResp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ReadDocsResp* internal_default_instance() {
    return reinterpret_cast<const ReadDocsResp*>(
               &_ReadDocsResp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(ReadDocsResp& a, ReadDocsResp& b) {
    a.Swap(&b);
  }
  inline void Swap(ReadDocsResp* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReadDocsResp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ReadDocsResp* New() const final {
    return CreateMaybeMessage<ReadDocsResp>(nullptr);
  }

  ReadDocsResp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ReadDocsResp>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ReadDocsResp& from);
  void MergeFrom(const ReadDocsResp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReadDocsResp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "jdocspb.ReadDocsResp";
  }
  protected:
  explicit ReadDocsResp(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_jdocs_2eproto);
    return ::descriptor_table_jdocs_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef ReadDocsResp_Item Item;

  typedef ReadDocsResp_Status Status;
  static constexpr Status UNCHANGED =
    ReadDocsResp_Status_UNCHANGED;
  static constexpr Status CHANGED =
    ReadDocsResp_Status_CHANGED;
  static constexpr Status NOT_FOUND =
    ReadDocsResp_Status_NOT_FOUND;
  static inline bool Status_IsValid(int value) {
    return ReadDocsResp_Status_IsValid(value);
  }
  static constexpr Status Status_MIN =
    ReadDocsResp_Status_Status_MIN;
  static constexpr Status Status_MAX =
    ReadDocsResp_Status_Status_MAX;
  static constexpr int Status_ARRAYSIZE =
    ReadDocsResp_Status_Status_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Status_descriptor() {
    return ReadDocsResp_Status_descriptor();
  }
  template<typename T>
  static inline const std::string& Status_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Status>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Status_Name.");
    return ReadDocsResp_Status_Name(enum_t_value);
  }
  static inline bool Status_Parse(const std::string& name,
      Status* value) {
    return ReadDocsResp_Status_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kItemsFieldNumber = 1,
  };
  // repeated .jdocspb.ReadDocsResp.Item items = 1;
  int items_size() const;
  private:
  int _internal_items_size() const;
  public:
  void clear_items();
  ::jdocspb::ReadDocsResp_Item* mutable_items(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::jdocspb::ReadDocsResp_Item >*
      mutable_items();
  private:
  const ::jdocspb::ReadDocsResp_Item& _internal_items(int index) const;
  ::jdocspb::ReadDocsResp_Item* _internal_add_items();
  public:
  const ::jdocspb::ReadDocsResp_Item& items(int index) const;
  ::jdocspb::ReadDocsResp_Item* add_items();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::jdocspb::ReadDocsResp_Item >&
      items() const;

  // @@protoc_insertion_point(class_scope:jdocspb.ReadDocsResp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::jdocspb::ReadDocsResp_Item > items_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_jdocs_2eproto;
};
// -------------------------------------------------------------------

class DeleteDocReq PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:jdocspb.DeleteDocReq) */ {
 public:
  inline DeleteDocReq() : DeleteDocReq(nullptr) {};
  virtual ~DeleteDocReq();

  DeleteDocReq(const DeleteDocReq& from);
  DeleteDocReq(DeleteDocReq&& from) noexcept
    : DeleteDocReq() {
    *this = ::std::move(from);
  }

  inline DeleteDocReq& operator=(const DeleteDocReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteDocReq& operator=(DeleteDocReq&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DeleteDocReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeleteDocReq* internal_default_instance() {
    return reinterpret_cast<const DeleteDocReq*>(
               &_DeleteDocReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(DeleteDocReq& a, DeleteDocReq& b) {
    a.Swap(&b);
  }
  inline void Swap(DeleteDocReq* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeleteDocReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DeleteDocReq* New() const final {
    return CreateMaybeMessage<DeleteDocReq>(nullptr);
  }

  DeleteDocReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DeleteDocReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DeleteDocReq& from);
  void MergeFrom(const DeleteDocReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteDocReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "jdocspb.DeleteDocReq";
  }
  protected:
  explicit DeleteDocReq(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_jdocs_2eproto);
    return ::descriptor_table_jdocs_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserIdFieldNumber = 1,
    kThingFieldNumber = 2,
    kDocNameFieldNumber = 3,
  };
  // string user_id = 1;
  void clear_user_id();
  const std::string& user_id() const;
  void set_user_id(const std::string& value);
  void set_user_id(std::string&& value);
  void set_user_id(const char* value);
  void set_user_id(const char* value, size_t size);
  std::string* mutable_user_id();
  std::string* release_user_id();
  void set_allocated_user_id(std::string* user_id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_user_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_user_id(
      std::string* user_id);
  private:
  const std::string& _internal_user_id() const;
  void _internal_set_user_id(const std::string& value);
  std::string* _internal_mutable_user_id();
  public:

  // string thing = 2;
  void clear_thing();
  const std::string& thing() const;
  void set_thing(const std::string& value);
  void set_thing(std::string&& value);
  void set_thing(const char* value);
  void set_thing(const char* value, size_t size);
  std::string* mutable_thing();
  std::string* release_thing();
  void set_allocated_thing(std::string* thing);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_thing();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_thing(
      std::string* thing);
  private:
  const std::string& _internal_thing() const;
  void _internal_set_thing(const std::string& value);
  std::string* _internal_mutable_thing();
  public:

  // string doc_name = 3;
  void clear_doc_name();
  const std::string& doc_name() const;
  void set_doc_name(const std::string& value);
  void set_doc_name(std::string&& value);
  void set_doc_name(const char* value);
  void set_doc_name(const char* value, size_t size);
  std::string* mutable_doc_name();
  std::string* release_doc_name();
  void set_allocated_doc_name(std::string* doc_name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_doc_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_doc_name(
      std::string* doc_name);
  private:
  const std::string& _internal_doc_name() const;
  void _internal_set_doc_name(const std::string& value);
  std::string* _internal_mutable_doc_name();
  public:

  // @@protoc_insertion_point(class_scope:jdocspb.DeleteDocReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr thing_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr doc_name_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_jdocs_2eproto;
};
// -------------------------------------------------------------------

class DeleteDocResp PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:jdocspb.DeleteDocResp) */ {
 public:
  inline DeleteDocResp() : DeleteDocResp(nullptr) {};
  virtual ~DeleteDocResp();

  DeleteDocResp(const DeleteDocResp& from);
  DeleteDocResp(DeleteDocResp&& from) noexcept
    : DeleteDocResp() {
    *this = ::std::move(from);
  }

  inline DeleteDocResp& operator=(const DeleteDocResp& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteDocResp& operator=(DeleteDocResp&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DeleteDocResp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeleteDocResp* internal_default_instance() {
    return reinterpret_cast<const DeleteDocResp*>(
               &_DeleteDocResp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(DeleteDocResp& a, DeleteDocResp& b) {
    a.Swap(&b);
  }
  inline void Swap(DeleteDocResp* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeleteDocResp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DeleteDocResp* New() const final {
    return CreateMaybeMessage<DeleteDocResp>(nullptr);
  }

  DeleteDocResp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DeleteDocResp>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DeleteDocResp& from);
  void MergeFrom(const DeleteDocResp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteDocResp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "jdocspb.DeleteDocResp";
  }
  protected:
  explicit DeleteDocResp(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_jdocs_2eproto);
    return ::descriptor_table_jdocs_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:jdocspb.DeleteDocResp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_jdocs_2eproto;
};
// -------------------------------------------------------------------

class PurgeAccountDocsReq PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:jdocspb.PurgeAccountDocsReq) */ {
 public:
  inline PurgeAccountDocsReq() : PurgeAccountDocsReq(nullptr) {};
  virtual ~PurgeAccountDocsReq();

  PurgeAccountDocsReq(const PurgeAccountDocsReq& from);
  PurgeAccountDocsReq(PurgeAccountDocsReq&& from) noexcept
    : PurgeAccountDocsReq() {
    *this = ::std::move(from);
  }

  inline PurgeAccountDocsReq& operator=(const PurgeAccountDocsReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline PurgeAccountDocsReq& operator=(PurgeAccountDocsReq&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PurgeAccountDocsReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PurgeAccountDocsReq* internal_default_instance() {
    return reinterpret_cast<const PurgeAccountDocsReq*>(
               &_PurgeAccountDocsReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(PurgeAccountDocsReq& a, PurgeAccountDocsReq& b) {
    a.Swap(&b);
  }
  inline void Swap(PurgeAccountDocsReq* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PurgeAccountDocsReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PurgeAccountDocsReq* New() const final {
    return CreateMaybeMessage<PurgeAccountDocsReq>(nullptr);
  }

  PurgeAccountDocsReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PurgeAccountDocsReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PurgeAccountDocsReq& from);
  void MergeFrom(const PurgeAccountDocsReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PurgeAccountDocsReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "jdocspb.PurgeAccountDocsReq";
  }
  protected:
  explicit PurgeAccountDocsReq(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_jdocs_2eproto);
    return ::descriptor_table_jdocs_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserIdFieldNumber = 1,
    kReasonFieldNumber = 2,
    kNotesFieldNumber = 3,
  };
  // string user_id = 1;
  void clear_user_id();
  const std::string& user_id() const;
  void set_user_id(const std::string& value);
  void set_user_id(std::string&& value);
  void set_user_id(const char* value);
  void set_user_id(const char* value, size_t size);
  std::string* mutable_user_id();
  std::string* release_user_id();
  void set_allocated_user_id(std::string* user_id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_user_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_user_id(
      std::string* user_id);
  private:
  const std::string& _internal_user_id() const;
  void _internal_set_user_id(const std::string& value);
  std::string* _internal_mutable_user_id();
  public:

  // string reason = 2;
  void clear_reason();
  const std::string& reason() const;
  void set_reason(const std::string& value);
  void set_reason(std::string&& value);
  void set_reason(const char* value);
  void set_reason(const char* value, size_t size);
  std::string* mutable_reason();
  std::string* release_reason();
  void set_allocated_reason(std::string* reason);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_reason();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_reason(
      std::string* reason);
  private:
  const std::string& _internal_reason() const;
  void _internal_set_reason(const std::string& value);
  std::string* _internal_mutable_reason();
  public:

  // string notes = 3;
  void clear_notes();
  const std::string& notes() const;
  void set_notes(const std::string& value);
  void set_notes(std::string&& value);
  void set_notes(const char* value);
  void set_notes(const char* value, size_t size);
  std::string* mutable_notes();
  std::string* release_notes();
  void set_allocated_notes(std::string* notes);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_notes();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_notes(
      std::string* notes);
  private:
  const std::string& _internal_notes() const;
  void _internal_set_notes(const std::string& value);
  std::string* _internal_mutable_notes();
  public:

  // @@protoc_insertion_point(class_scope:jdocspb.PurgeAccountDocsReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr reason_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr notes_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_jdocs_2eproto;
};
// -------------------------------------------------------------------

class PurgeAccountDocsResp PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:jdocspb.PurgeAccountDocsResp) */ {
 public:
  inline PurgeAccountDocsResp() : PurgeAccountDocsResp(nullptr) {};
  virtual ~PurgeAccountDocsResp();

  PurgeAccountDocsResp(const PurgeAccountDocsResp& from);
  PurgeAccountDocsResp(PurgeAccountDocsResp&& from) noexcept
    : PurgeAccountDocsResp() {
    *this = ::std::move(from);
  }

  inline PurgeAccountDocsResp& operator=(const PurgeAccountDocsResp& from) {
    CopyFrom(from);
    return *this;
  }
  inline PurgeAccountDocsResp& operator=(PurgeAccountDocsResp&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PurgeAccountDocsResp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PurgeAccountDocsResp* internal_default_instance() {
    return reinterpret_cast<const PurgeAccountDocsResp*>(
               &_PurgeAccountDocsResp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(PurgeAccountDocsResp& a, PurgeAccountDocsResp& b) {
    a.Swap(&b);
  }
  inline void Swap(PurgeAccountDocsResp* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PurgeAccountDocsResp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PurgeAccountDocsResp* New() const final {
    return CreateMaybeMessage<PurgeAccountDocsResp>(nullptr);
  }

  PurgeAccountDocsResp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PurgeAccountDocsResp>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PurgeAccountDocsResp& from);
  void MergeFrom(const PurgeAccountDocsResp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PurgeAccountDocsResp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "jdocspb.PurgeAccountDocsResp";
  }
  protected:
  explicit PurgeAccountDocsResp(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_jdocs_2eproto);
    return ::descriptor_table_jdocs_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:jdocspb.PurgeAccountDocsResp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_jdocs_2eproto;
};
// -------------------------------------------------------------------

class ViewDoc PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:jdocspb.ViewDoc) */ {
 public:
  inline ViewDoc() : ViewDoc(nullptr) {};
  virtual ~ViewDoc();

  ViewDoc(const ViewDoc& from);
  ViewDoc(ViewDoc&& from) noexcept
    : ViewDoc() {
    *this = ::std::move(from);
  }

  inline ViewDoc& operator=(const ViewDoc& from) {
    CopyFrom(from);
    return *this;
  }
  inline ViewDoc& operator=(ViewDoc&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ViewDoc& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ViewDoc* internal_default_instance() {
    return reinterpret_cast<const ViewDoc*>(
               &_ViewDoc_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(ViewDoc& a, ViewDoc& b) {
    a.Swap(&b);
  }
  inline void Swap(ViewDoc* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ViewDoc* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ViewDoc* New() const final {
    return CreateMaybeMessage<ViewDoc>(nullptr);
  }

  ViewDoc* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ViewDoc>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ViewDoc& from);
  void MergeFrom(const ViewDoc& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ViewDoc* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "jdocspb.ViewDoc";
  }
  protected:
  explicit ViewDoc(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_jdocs_2eproto);
    return ::descriptor_table_jdocs_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserIdFieldNumber = 1,
    kThingFieldNumber = 2,
    kDocNameFieldNumber = 3,
    kJsonDocFieldNumber = 4,
  };
  // string user_id = 1;
  void clear_user_id();
  const std::string& user_id() const;
  void set_user_id(const std::string& value);
  void set_user_id(std::string&& value);
  void set_user_id(const char* value);
  void set_user_id(const char* value, size_t size);
  std::string* mutable_user_id();
  std::string* release_user_id();
  void set_allocated_user_id(std::string* user_id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_user_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_user_id(
      std::string* user_id);
  private:
  const std::string& _internal_user_id() const;
  void _internal_set_user_id(const std::string& value);
  std::string* _internal_mutable_user_id();
  public:

  // string thing = 2;
  void clear_thing();
  const std::string& thing() const;
  void set_thing(const std::string& value);
  void set_thing(std::string&& value);
  void set_thing(const char* value);
  void set_thing(const char* value, size_t size);
  std::string* mutable_thing();
  std::string* release_thing();
  void set_allocated_thing(std::string* thing);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_thing();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_thing(
      std::string* thing);
  private:
  const std::string& _internal_thing() const;
  void _internal_set_thing(const std::string& value);
  std::string* _internal_mutable_thing();
  public:

  // string doc_name = 3;
  void clear_doc_name();
  const std::string& doc_name() const;
  void set_doc_name(const std::string& value);
  void set_doc_name(std::string&& value);
  void set_doc_name(const char* value);
  void set_doc_name(const char* value, size_t size);
  std::string* mutable_doc_name();
  std::string* release_doc_name();
  void set_allocated_doc_name(std::string* doc_name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_doc_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_doc_name(
      std::string* doc_name);
  private:
  const std::string& _internal_doc_name() const;
  void _internal_set_doc_name(const std::string& value);
  std::string* _internal_mutable_doc_name();
  public:

  // string json_doc = 4;
  void clear_json_doc();
  const std::string& json_doc() const;
  void set_json_doc(const std::string& value);
  void set_json_doc(std::string&& value);
  void set_json_doc(const char* value);
  void set_json_doc(const char* value, size_t size);
  std::string* mutable_json_doc();
  std::string* release_json_doc();
  void set_allocated_json_doc(std::string* json_doc);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_json_doc();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_json_doc(
      std::string* json_doc);
  private:
  const std::string& _internal_json_doc() const;
  void _internal_set_json_doc(const std::string& value);
  std::string* _internal_mutable_json_doc();
  public:

  // @@protoc_insertion_point(class_scope:jdocspb.ViewDoc)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr thing_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr doc_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr json_doc_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_jdocs_2eproto;
};
// -------------------------------------------------------------------

class ViewAccountDocsReq PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:jdocspb.ViewAccountDocsReq) */ {
 public:
  inline ViewAccountDocsReq() : ViewAccountDocsReq(nullptr) {};
  virtual ~ViewAccountDocsReq();

  ViewAccountDocsReq(const ViewAccountDocsReq& from);
  ViewAccountDocsReq(ViewAccountDocsReq&& from) noexcept
    : ViewAccountDocsReq() {
    *this = ::std::move(from);
  }

  inline ViewAccountDocsReq& operator=(const ViewAccountDocsReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline ViewAccountDocsReq& operator=(ViewAccountDocsReq&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ViewAccountDocsReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ViewAccountDocsReq* internal_default_instance() {
    return reinterpret_cast<const ViewAccountDocsReq*>(
               &_ViewAccountDocsReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(ViewAccountDocsReq& a, ViewAccountDocsReq& b) {
    a.Swap(&b);
  }
  inline void Swap(ViewAccountDocsReq* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ViewAccountDocsReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ViewAccountDocsReq* New() const final {
    return CreateMaybeMessage<ViewAccountDocsReq>(nullptr);
  }

  ViewAccountDocsReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ViewAccountDocsReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ViewAccountDocsReq& from);
  void MergeFrom(const ViewAccountDocsReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ViewAccountDocsReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "jdocspb.ViewAccountDocsReq";
  }
  protected:
  explicit ViewAccountDocsReq(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_jdocs_2eproto);
    return ::descriptor_table_jdocs_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserIdFieldNumber = 1,
  };
  // string user_id = 1;
  void clear_user_id();
  const std::string& user_id() const;
  void set_user_id(const std::string& value);
  void set_user_id(std::string&& value);
  void set_user_id(const char* value);
  void set_user_id(const char* value, size_t size);
  std::string* mutable_user_id();
  std::string* release_user_id();
  void set_allocated_user_id(std::string* user_id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_user_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_user_id(
      std::string* user_id);
  private:
  const std::string& _internal_user_id() const;
  void _internal_set_user_id(const std::string& value);
  std::string* _internal_mutable_user_id();
  public:

  // @@protoc_insertion_point(class_scope:jdocspb.ViewAccountDocsReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_jdocs_2eproto;
};
// -------------------------------------------------------------------

class ViewDocsResp PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:jdocspb.ViewDocsResp) */ {
 public:
  inline ViewDocsResp() : ViewDocsResp(nullptr) {};
  virtual ~ViewDocsResp();

  ViewDocsResp(const ViewDocsResp& from);
  ViewDocsResp(ViewDocsResp&& from) noexcept
    : ViewDocsResp() {
    *this = ::std::move(from);
  }

  inline ViewDocsResp& operator=(const ViewDocsResp& from) {
    CopyFrom(from);
    return *this;
  }
  inline ViewDocsResp& operator=(ViewDocsResp&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ViewDocsResp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ViewDocsResp* internal_default_instance() {
    return reinterpret_cast<const ViewDocsResp*>(
               &_ViewDocsResp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(ViewDocsResp& a, ViewDocsResp& b) {
    a.Swap(&b);
  }
  inline void Swap(ViewDocsResp* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ViewDocsResp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ViewDocsResp* New() const final {
    return CreateMaybeMessage<ViewDocsResp>(nullptr);
  }

  ViewDocsResp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ViewDocsResp>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ViewDocsResp& from);
  void MergeFrom(const ViewDocsResp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ViewDocsResp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "jdocspb.ViewDocsResp";
  }
  protected:
  explicit ViewDocsResp(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_jdocs_2eproto);
    return ::descriptor_table_jdocs_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDocsFieldNumber = 1,
  };
  // repeated .jdocspb.ViewDoc docs = 1;
  int docs_size() const;
  private:
  int _internal_docs_size() const;
  public:
  void clear_docs();
  ::jdocspb::ViewDoc* mutable_docs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::jdocspb::ViewDoc >*
      mutable_docs();
  private:
  const ::jdocspb::ViewDoc& _internal_docs(int index) const;
  ::jdocspb::ViewDoc* _internal_add_docs();
  public:
  const ::jdocspb::ViewDoc& docs(int index) const;
  ::jdocspb::ViewDoc* add_docs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::jdocspb::ViewDoc >&
      docs() const;

  // @@protoc_insertion_point(class_scope:jdocspb.ViewDocsResp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::jdocspb::ViewDoc > docs_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_jdocs_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Jdoc

// uint64 doc_version = 1;
inline void Jdoc::clear_doc_version() {
  doc_version_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Jdoc::_internal_doc_version() const {
  return doc_version_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Jdoc::doc_version() const {
  // @@protoc_insertion_point(field_get:jdocspb.Jdoc.doc_version)
  return _internal_doc_version();
}
inline void Jdoc::_internal_set_doc_version(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  doc_version_ = value;
}
inline void Jdoc::set_doc_version(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_doc_version(value);
  // @@protoc_insertion_point(field_set:jdocspb.Jdoc.doc_version)
}

// uint64 fmt_version = 2;
inline void Jdoc::clear_fmt_version() {
  fmt_version_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Jdoc::_internal_fmt_version() const {
  return fmt_version_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Jdoc::fmt_version() const {
  // @@protoc_insertion_point(field_get:jdocspb.Jdoc.fmt_version)
  return _internal_fmt_version();
}
inline void Jdoc::_internal_set_fmt_version(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  fmt_version_ = value;
}
inline void Jdoc::set_fmt_version(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_fmt_version(value);
  // @@protoc_insertion_point(field_set:jdocspb.Jdoc.fmt_version)
}

// string client_metadata = 3;
inline void Jdoc::clear_client_metadata() {
  client_metadata_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Jdoc::client_metadata() const {
  // @@protoc_insertion_point(field_get:jdocspb.Jdoc.client_metadata)
  return _internal_client_metadata();
}
inline void Jdoc::set_client_metadata(const std::string& value) {
  _internal_set_client_metadata(value);
  // @@protoc_insertion_point(field_set:jdocspb.Jdoc.client_metadata)
}
inline std::string* Jdoc::mutable_client_metadata() {
  // @@protoc_insertion_point(field_mutable:jdocspb.Jdoc.client_metadata)
  return _internal_mutable_client_metadata();
}
inline const std::string& Jdoc::_internal_client_metadata() const {
  return client_metadata_.Get();
}
inline void Jdoc::_internal_set_client_metadata(const std::string& value) {
  
  client_metadata_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Jdoc::set_client_metadata(std::string&& value) {
  
  client_metadata_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:jdocspb.Jdoc.client_metadata)
}
inline void Jdoc::set_client_metadata(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  client_metadata_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:jdocspb.Jdoc.client_metadata)
}
inline void Jdoc::set_client_metadata(const char* value,
    size_t size) {
  
  client_metadata_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:jdocspb.Jdoc.client_metadata)
}
inline std::string* Jdoc::_internal_mutable_client_metadata() {
  
  return client_metadata_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Jdoc::release_client_metadata() {
  // @@protoc_insertion_point(field_release:jdocspb.Jdoc.client_metadata)
  return client_metadata_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Jdoc::set_allocated_client_metadata(std::string* client_metadata) {
  if (client_metadata != nullptr) {
    
  } else {
    
  }
  client_metadata_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), client_metadata,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:jdocspb.Jdoc.client_metadata)
}
inline std::string* Jdoc::unsafe_arena_release_client_metadata() {
  // @@protoc_insertion_point(field_unsafe_arena_release:jdocspb.Jdoc.client_metadata)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return client_metadata_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Jdoc::unsafe_arena_set_allocated_client_metadata(
    std::string* client_metadata) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (client_metadata != nullptr) {
    
  } else {
    
  }
  client_metadata_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      client_metadata, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:jdocspb.Jdoc.client_metadata)
}

// string json_doc = 4;
inline void Jdoc::clear_json_doc() {
  json_doc_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Jdoc::json_doc() const {
  // @@protoc_insertion_point(field_get:jdocspb.Jdoc.json_doc)
  return _internal_json_doc();
}
inline void Jdoc::set_json_doc(const std::string& value) {
  _internal_set_json_doc(value);
  // @@protoc_insertion_point(field_set:jdocspb.Jdoc.json_doc)
}
inline std::string* Jdoc::mutable_json_doc() {
  // @@protoc_insertion_point(field_mutable:jdocspb.Jdoc.json_doc)
  return _internal_mutable_json_doc();
}
inline const std::string& Jdoc::_internal_json_doc() const {
  return json_doc_.Get();
}
inline void Jdoc::_internal_set_json_doc(const std::string& value) {
  
  json_doc_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Jdoc::set_json_doc(std::string&& value) {
  
  json_doc_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:jdocspb.Jdoc.json_doc)
}
inline void Jdoc::set_json_doc(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  json_doc_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:jdocspb.Jdoc.json_doc)
}
inline void Jdoc::set_json_doc(const char* value,
    size_t size) {
  
  json_doc_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:jdocspb.Jdoc.json_doc)
}
inline std::string* Jdoc::_internal_mutable_json_doc() {
  
  return json_doc_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Jdoc::release_json_doc() {
  // @@protoc_insertion_point(field_release:jdocspb.Jdoc.json_doc)
  return json_doc_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Jdoc::set_allocated_json_doc(std::string* json_doc) {
  if (json_doc != nullptr) {
    
  } else {
    
  }
  json_doc_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), json_doc,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:jdocspb.Jdoc.json_doc)
}
inline std::string* Jdoc::unsafe_arena_release_json_doc() {
  // @@protoc_insertion_point(field_unsafe_arena_release:jdocspb.Jdoc.json_doc)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return json_doc_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Jdoc::unsafe_arena_set_allocated_json_doc(
    std::string* json_doc) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (json_doc != nullptr) {
    
  } else {
    
  }
  json_doc_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      json_doc, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:jdocspb.Jdoc.json_doc)
}

// -------------------------------------------------------------------

// EchoReq

// string Data = 1;
inline void EchoReq::clear_data() {
  data_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& EchoReq::data() const {
  // @@protoc_insertion_point(field_get:jdocspb.EchoReq.Data)
  return _internal_data();
}
inline void EchoReq::set_data(const std::string& value) {
  _internal_set_data(value);
  // @@protoc_insertion_point(field_set:jdocspb.EchoReq.Data)
}
inline std::string* EchoReq::mutable_data() {
  // @@protoc_insertion_point(field_mutable:jdocspb.EchoReq.Data)
  return _internal_mutable_data();
}
inline const std::string& EchoReq::_internal_data() const {
  return data_.Get();
}
inline void EchoReq::_internal_set_data(const std::string& value) {
  
  data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void EchoReq::set_data(std::string&& value) {
  
  data_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:jdocspb.EchoReq.Data)
}
inline void EchoReq::set_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:jdocspb.EchoReq.Data)
}
inline void EchoReq::set_data(const char* value,
    size_t size) {
  
  data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:jdocspb.EchoReq.Data)
}
inline std::string* EchoReq::_internal_mutable_data() {
  
  return data_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* EchoReq::release_data() {
  // @@protoc_insertion_point(field_release:jdocspb.EchoReq.Data)
  return data_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void EchoReq::set_allocated_data(std::string* data) {
  if (data != nullptr) {
    
  } else {
    
  }
  data_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), data,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:jdocspb.EchoReq.Data)
}
inline std::string* EchoReq::unsafe_arena_release_data() {
  // @@protoc_insertion_point(field_unsafe_arena_release:jdocspb.EchoReq.Data)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return data_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void EchoReq::unsafe_arena_set_allocated_data(
    std::string* data) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (data != nullptr) {
    
  } else {
    
  }
  data_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      data, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:jdocspb.EchoReq.Data)
}

// -------------------------------------------------------------------

// EchoResp

// string Data = 1;
inline void EchoResp::clear_data() {
  data_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& EchoResp::data() const {
  // @@protoc_insertion_point(field_get:jdocspb.EchoResp.Data)
  return _internal_data();
}
inline void EchoResp::set_data(const std::string& value) {
  _internal_set_data(value);
  // @@protoc_insertion_point(field_set:jdocspb.EchoResp.Data)
}
inline std::string* EchoResp::mutable_data() {
  // @@protoc_insertion_point(field_mutable:jdocspb.EchoResp.Data)
  return _internal_mutable_data();
}
inline const std::string& EchoResp::_internal_data() const {
  return data_.Get();
}
inline void EchoResp::_internal_set_data(const std::string& value) {
  
  data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void EchoResp::set_data(std::string&& value) {
  
  data_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:jdocspb.EchoResp.Data)
}
inline void EchoResp::set_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:jdocspb.EchoResp.Data)
}
inline void EchoResp::set_data(const char* value,
    size_t size) {
  
  data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:jdocspb.EchoResp.Data)
}
inline std::string* EchoResp::_internal_mutable_data() {
  
  return data_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* EchoResp::release_data() {
  // @@protoc_insertion_point(field_release:jdocspb.EchoResp.Data)
  return data_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void EchoResp::set_allocated_data(std::string* data) {
  if (data != nullptr) {
    
  } else {
    
  }
  data_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), data,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:jdocspb.EchoResp.Data)
}
inline std::string* EchoResp::unsafe_arena_release_data() {
  // @@protoc_insertion_point(field_unsafe_arena_release:jdocspb.EchoResp.Data)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return data_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void EchoResp::unsafe_arena_set_allocated_data(
    std::string* data) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (data != nullptr) {
    
  } else {
    
  }
  data_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      data, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:jdocspb.EchoResp.Data)
}

// -------------------------------------------------------------------

// WriteDocReq

// string user_id = 1;
inline void WriteDocReq::clear_user_id() {
  user_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& WriteDocReq::user_id() const {
  // @@protoc_insertion_point(field_get:jdocspb.WriteDocReq.user_id)
  return _internal_user_id();
}
inline void WriteDocReq::set_user_id(const std::string& value) {
  _internal_set_user_id(value);
  // @@protoc_insertion_point(field_set:jdocspb.WriteDocReq.user_id)
}
inline std::string* WriteDocReq::mutable_user_id() {
  // @@protoc_insertion_point(field_mutable:jdocspb.WriteDocReq.user_id)
  return _internal_mutable_user_id();
}
inline const std::string& WriteDocReq::_internal_user_id() const {
  return user_id_.Get();
}
inline void WriteDocReq::_internal_set_user_id(const std::string& value) {
  
  user_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void WriteDocReq::set_user_id(std::string&& value) {
  
  user_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:jdocspb.WriteDocReq.user_id)
}
inline void WriteDocReq::set_user_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  user_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:jdocspb.WriteDocReq.user_id)
}
inline void WriteDocReq::set_user_id(const char* value,
    size_t size) {
  
  user_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:jdocspb.WriteDocReq.user_id)
}
inline std::string* WriteDocReq::_internal_mutable_user_id() {
  
  return user_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* WriteDocReq::release_user_id() {
  // @@protoc_insertion_point(field_release:jdocspb.WriteDocReq.user_id)
  return user_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void WriteDocReq::set_allocated_user_id(std::string* user_id) {
  if (user_id != nullptr) {
    
  } else {
    
  }
  user_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), user_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:jdocspb.WriteDocReq.user_id)
}
inline std::string* WriteDocReq::unsafe_arena_release_user_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:jdocspb.WriteDocReq.user_id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return user_id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void WriteDocReq::unsafe_arena_set_allocated_user_id(
    std::string* user_id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (user_id != nullptr) {
    
  } else {
    
  }
  user_id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      user_id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:jdocspb.WriteDocReq.user_id)
}

// string thing = 2;
inline void WriteDocReq::clear_thing() {
  thing_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& WriteDocReq::thing() const {
  // @@protoc_insertion_point(field_get:jdocspb.WriteDocReq.thing)
  return _internal_thing();
}
inline void WriteDocReq::set_thing(const std::string& value) {
  _internal_set_thing(value);
  // @@protoc_insertion_point(field_set:jdocspb.WriteDocReq.thing)
}
inline std::string* WriteDocReq::mutable_thing() {
  // @@protoc_insertion_point(field_mutable:jdocspb.WriteDocReq.thing)
  return _internal_mutable_thing();
}
inline const std::string& WriteDocReq::_internal_thing() const {
  return thing_.Get();
}
inline void WriteDocReq::_internal_set_thing(const std::string& value) {
  
  thing_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void WriteDocReq::set_thing(std::string&& value) {
  
  thing_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:jdocspb.WriteDocReq.thing)
}
inline void WriteDocReq::set_thing(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  thing_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:jdocspb.WriteDocReq.thing)
}
inline void WriteDocReq::set_thing(const char* value,
    size_t size) {
  
  thing_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:jdocspb.WriteDocReq.thing)
}
inline std::string* WriteDocReq::_internal_mutable_thing() {
  
  return thing_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* WriteDocReq::release_thing() {
  // @@protoc_insertion_point(field_release:jdocspb.WriteDocReq.thing)
  return thing_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void WriteDocReq::set_allocated_thing(std::string* thing) {
  if (thing != nullptr) {
    
  } else {
    
  }
  thing_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), thing,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:jdocspb.WriteDocReq.thing)
}
inline std::string* WriteDocReq::unsafe_arena_release_thing() {
  // @@protoc_insertion_point(field_unsafe_arena_release:jdocspb.WriteDocReq.thing)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return thing_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void WriteDocReq::unsafe_arena_set_allocated_thing(
    std::string* thing) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (thing != nullptr) {
    
  } else {
    
  }
  thing_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      thing, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:jdocspb.WriteDocReq.thing)
}

// string doc_name = 3;
inline void WriteDocReq::clear_doc_name() {
  doc_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& WriteDocReq::doc_name() const {
  // @@protoc_insertion_point(field_get:jdocspb.WriteDocReq.doc_name)
  return _internal_doc_name();
}
inline void WriteDocReq::set_doc_name(const std::string& value) {
  _internal_set_doc_name(value);
  // @@protoc_insertion_point(field_set:jdocspb.WriteDocReq.doc_name)
}
inline std::string* WriteDocReq::mutable_doc_name() {
  // @@protoc_insertion_point(field_mutable:jdocspb.WriteDocReq.doc_name)
  return _internal_mutable_doc_name();
}
inline const std::string& WriteDocReq::_internal_doc_name() const {
  return doc_name_.Get();
}
inline void WriteDocReq::_internal_set_doc_name(const std::string& value) {
  
  doc_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void WriteDocReq::set_doc_name(std::string&& value) {
  
  doc_name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:jdocspb.WriteDocReq.doc_name)
}
inline void WriteDocReq::set_doc_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  doc_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:jdocspb.WriteDocReq.doc_name)
}
inline void WriteDocReq::set_doc_name(const char* value,
    size_t size) {
  
  doc_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:jdocspb.WriteDocReq.doc_name)
}
inline std::string* WriteDocReq::_internal_mutable_doc_name() {
  
  return doc_name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* WriteDocReq::release_doc_name() {
  // @@protoc_insertion_point(field_release:jdocspb.WriteDocReq.doc_name)
  return doc_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void WriteDocReq::set_allocated_doc_name(std::string* doc_name) {
  if (doc_name != nullptr) {
    
  } else {
    
  }
  doc_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), doc_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:jdocspb.WriteDocReq.doc_name)
}
inline std::string* WriteDocReq::unsafe_arena_release_doc_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:jdocspb.WriteDocReq.doc_name)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return doc_name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void WriteDocReq::unsafe_arena_set_allocated_doc_name(
    std::string* doc_name) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (doc_name != nullptr) {
    
  } else {
    
  }
  doc_name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      doc_name, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:jdocspb.WriteDocReq.doc_name)
}

// .jdocspb.Jdoc doc = 4;
inline bool WriteDocReq::_internal_has_doc() const {
  return this != internal_default_instance() && doc_ != nullptr;
}
inline bool WriteDocReq::has_doc() const {
  return _internal_has_doc();
}
inline void WriteDocReq::clear_doc() {
  if (GetArena() == nullptr && doc_ != nullptr) {
    delete doc_;
  }
  doc_ = nullptr;
}
inline const ::jdocspb::Jdoc& WriteDocReq::_internal_doc() const {
  const ::jdocspb::Jdoc* p = doc_;
  return p != nullptr ? *p : *reinterpret_cast<const ::jdocspb::Jdoc*>(
      &::jdocspb::_Jdoc_default_instance_);
}
inline const ::jdocspb::Jdoc& WriteDocReq::doc() const {
  // @@protoc_insertion_point(field_get:jdocspb.WriteDocReq.doc)
  return _internal_doc();
}
inline void WriteDocReq::unsafe_arena_set_allocated_doc(
    ::jdocspb::Jdoc* doc) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(doc_);
  }
  doc_ = doc;
  if (doc) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:jdocspb.WriteDocReq.doc)
}
inline ::jdocspb::Jdoc* WriteDocReq::release_doc() {
  auto temp = unsafe_arena_release_doc();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::jdocspb::Jdoc* WriteDocReq::unsafe_arena_release_doc() {
  // @@protoc_insertion_point(field_release:jdocspb.WriteDocReq.doc)
  
  ::jdocspb::Jdoc* temp = doc_;
  doc_ = nullptr;
  return temp;
}
inline ::jdocspb::Jdoc* WriteDocReq::_internal_mutable_doc() {
  
  if (doc_ == nullptr) {
    auto* p = CreateMaybeMessage<::jdocspb::Jdoc>(GetArena());
    doc_ = p;
  }
  return doc_;
}
inline ::jdocspb::Jdoc* WriteDocReq::mutable_doc() {
  // @@protoc_insertion_point(field_mutable:jdocspb.WriteDocReq.doc)
  return _internal_mutable_doc();
}
inline void WriteDocReq::set_allocated_doc(::jdocspb::Jdoc* doc) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete doc_;
  }
  if (doc) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(doc);
    if (message_arena != submessage_arena) {
      doc = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, doc, submessage_arena);
    }
    
  } else {
    
  }
  doc_ = doc;
  // @@protoc_insertion_point(field_set_allocated:jdocspb.WriteDocReq.doc)
}

// -------------------------------------------------------------------

// WriteDocResp

// .jdocspb.WriteDocResp.Status status = 1;
inline void WriteDocResp::clear_status() {
  status_ = 0;
}
inline ::jdocspb::WriteDocResp_Status WriteDocResp::_internal_status() const {
  return static_cast< ::jdocspb::WriteDocResp_Status >(status_);
}
inline ::jdocspb::WriteDocResp_Status WriteDocResp::status() const {
  // @@protoc_insertion_point(field_get:jdocspb.WriteDocResp.status)
  return _internal_status();
}
inline void WriteDocResp::_internal_set_status(::jdocspb::WriteDocResp_Status value) {
  
  status_ = value;
}
inline void WriteDocResp::set_status(::jdocspb::WriteDocResp_Status value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:jdocspb.WriteDocResp.status)
}

// uint64 latest_doc_version = 2;
inline void WriteDocResp::clear_latest_doc_version() {
  latest_doc_version_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 WriteDocResp::_internal_latest_doc_version() const {
  return latest_doc_version_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 WriteDocResp::latest_doc_version() const {
  // @@protoc_insertion_point(field_get:jdocspb.WriteDocResp.latest_doc_version)
  return _internal_latest_doc_version();
}
inline void WriteDocResp::_internal_set_latest_doc_version(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  latest_doc_version_ = value;
}
inline void WriteDocResp::set_latest_doc_version(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_latest_doc_version(value);
  // @@protoc_insertion_point(field_set:jdocspb.WriteDocResp.latest_doc_version)
}

// -------------------------------------------------------------------

// ReadDocsReq_Item

// string doc_name = 1;
inline void ReadDocsReq_Item::clear_doc_name() {
  doc_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ReadDocsReq_Item::doc_name() const {
  // @@protoc_insertion_point(field_get:jdocspb.ReadDocsReq.Item.doc_name)
  return _internal_doc_name();
}
inline void ReadDocsReq_Item::set_doc_name(const std::string& value) {
  _internal_set_doc_name(value);
  // @@protoc_insertion_point(field_set:jdocspb.ReadDocsReq.Item.doc_name)
}
inline std::string* ReadDocsReq_Item::mutable_doc_name() {
  // @@protoc_insertion_point(field_mutable:jdocspb.ReadDocsReq.Item.doc_name)
  return _internal_mutable_doc_name();
}
inline const std::string& ReadDocsReq_Item::_internal_doc_name() const {
  return doc_name_.Get();
}
inline void ReadDocsReq_Item::_internal_set_doc_name(const std::string& value) {
  
  doc_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ReadDocsReq_Item::set_doc_name(std::string&& value) {
  
  doc_name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:jdocspb.ReadDocsReq.Item.doc_name)
}
inline void ReadDocsReq_Item::set_doc_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  doc_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:jdocspb.ReadDocsReq.Item.doc_name)
}
inline void ReadDocsReq_Item::set_doc_name(const char* value,
    size_t size) {
  
  doc_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:jdocspb.ReadDocsReq.Item.doc_name)
}
inline std::string* ReadDocsReq_Item::_internal_mutable_doc_name() {
  
  return doc_name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ReadDocsReq_Item::release_doc_name() {
  // @@protoc_insertion_point(field_release:jdocspb.ReadDocsReq.Item.doc_name)
  return doc_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ReadDocsReq_Item::set_allocated_doc_name(std::string* doc_name) {
  if (doc_name != nullptr) {
    
  } else {
    
  }
  doc_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), doc_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:jdocspb.ReadDocsReq.Item.doc_name)
}
inline std::string* ReadDocsReq_Item::unsafe_arena_release_doc_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:jdocspb.ReadDocsReq.Item.doc_name)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return doc_name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ReadDocsReq_Item::unsafe_arena_set_allocated_doc_name(
    std::string* doc_name) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (doc_name != nullptr) {
    
  } else {
    
  }
  doc_name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      doc_name, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:jdocspb.ReadDocsReq.Item.doc_name)
}

// uint64 my_doc_version = 2;
inline void ReadDocsReq_Item::clear_my_doc_version() {
  my_doc_version_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ReadDocsReq_Item::_internal_my_doc_version() const {
  return my_doc_version_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ReadDocsReq_Item::my_doc_version() const {
  // @@protoc_insertion_point(field_get:jdocspb.ReadDocsReq.Item.my_doc_version)
  return _internal_my_doc_version();
}
inline void ReadDocsReq_Item::_internal_set_my_doc_version(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  my_doc_version_ = value;
}
inline void ReadDocsReq_Item::set_my_doc_version(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_my_doc_version(value);
  // @@protoc_insertion_point(field_set:jdocspb.ReadDocsReq.Item.my_doc_version)
}

// -------------------------------------------------------------------

// ReadDocsReq

// string user_id = 1;
inline void ReadDocsReq::clear_user_id() {
  user_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ReadDocsReq::user_id() const {
  // @@protoc_insertion_point(field_get:jdocspb.ReadDocsReq.user_id)
  return _internal_user_id();
}
inline void ReadDocsReq::set_user_id(const std::string& value) {
  _internal_set_user_id(value);
  // @@protoc_insertion_point(field_set:jdocspb.ReadDocsReq.user_id)
}
inline std::string* ReadDocsReq::mutable_user_id() {
  // @@protoc_insertion_point(field_mutable:jdocspb.ReadDocsReq.user_id)
  return _internal_mutable_user_id();
}
inline const std::string& ReadDocsReq::_internal_user_id() const {
  return user_id_.Get();
}
inline void ReadDocsReq::_internal_set_user_id(const std::string& value) {
  
  user_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ReadDocsReq::set_user_id(std::string&& value) {
  
  user_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:jdocspb.ReadDocsReq.user_id)
}
inline void ReadDocsReq::set_user_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  user_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:jdocspb.ReadDocsReq.user_id)
}
inline void ReadDocsReq::set_user_id(const char* value,
    size_t size) {
  
  user_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:jdocspb.ReadDocsReq.user_id)
}
inline std::string* ReadDocsReq::_internal_mutable_user_id() {
  
  return user_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ReadDocsReq::release_user_id() {
  // @@protoc_insertion_point(field_release:jdocspb.ReadDocsReq.user_id)
  return user_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ReadDocsReq::set_allocated_user_id(std::string* user_id) {
  if (user_id != nullptr) {
    
  } else {
    
  }
  user_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), user_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:jdocspb.ReadDocsReq.user_id)
}
inline std::string* ReadDocsReq::unsafe_arena_release_user_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:jdocspb.ReadDocsReq.user_id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return user_id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ReadDocsReq::unsafe_arena_set_allocated_user_id(
    std::string* user_id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (user_id != nullptr) {
    
  } else {
    
  }
  user_id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      user_id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:jdocspb.ReadDocsReq.user_id)
}

// string thing = 2;
inline void ReadDocsReq::clear_thing() {
  thing_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ReadDocsReq::thing() const {
  // @@protoc_insertion_point(field_get:jdocspb.ReadDocsReq.thing)
  return _internal_thing();
}
inline void ReadDocsReq::set_thing(const std::string& value) {
  _internal_set_thing(value);
  // @@protoc_insertion_point(field_set:jdocspb.ReadDocsReq.thing)
}
inline std::string* ReadDocsReq::mutable_thing() {
  // @@protoc_insertion_point(field_mutable:jdocspb.ReadDocsReq.thing)
  return _internal_mutable_thing();
}
inline const std::string& ReadDocsReq::_internal_thing() const {
  return thing_.Get();
}
inline void ReadDocsReq::_internal_set_thing(const std::string& value) {
  
  thing_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ReadDocsReq::set_thing(std::string&& value) {
  
  thing_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:jdocspb.ReadDocsReq.thing)
}
inline void ReadDocsReq::set_thing(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  thing_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:jdocspb.ReadDocsReq.thing)
}
inline void ReadDocsReq::set_thing(const char* value,
    size_t size) {
  
  thing_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:jdocspb.ReadDocsReq.thing)
}
inline std::string* ReadDocsReq::_internal_mutable_thing() {
  
  return thing_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ReadDocsReq::release_thing() {
  // @@protoc_insertion_point(field_release:jdocspb.ReadDocsReq.thing)
  return thing_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ReadDocsReq::set_allocated_thing(std::string* thing) {
  if (thing != nullptr) {
    
  } else {
    
  }
  thing_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), thing,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:jdocspb.ReadDocsReq.thing)
}
inline std::string* ReadDocsReq::unsafe_arena_release_thing() {
  // @@protoc_insertion_point(field_unsafe_arena_release:jdocspb.ReadDocsReq.thing)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return thing_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ReadDocsReq::unsafe_arena_set_allocated_thing(
    std::string* thing) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (thing != nullptr) {
    
  } else {
    
  }
  thing_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      thing, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:jdocspb.ReadDocsReq.thing)
}

// repeated .jdocspb.ReadDocsReq.Item items = 3;
inline int ReadDocsReq::_internal_items_size() const {
  return items_.size();
}
inline int ReadDocsReq::items_size() const {
  return _internal_items_size();
}
inline void ReadDocsReq::clear_items() {
  items_.Clear();
}
inline ::jdocspb::ReadDocsReq_Item* ReadDocsReq::mutable_items(int index) {
  // @@protoc_insertion_point(field_mutable:jdocspb.ReadDocsReq.items)
  return items_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::jdocspb::ReadDocsReq_Item >*
ReadDocsReq::mutable_items() {
  // @@protoc_insertion_point(field_mutable_list:jdocspb.ReadDocsReq.items)
  return &items_;
}
inline const ::jdocspb::ReadDocsReq_Item& ReadDocsReq::_internal_items(int index) const {
  return items_.Get(index);
}
inline const ::jdocspb::ReadDocsReq_Item& ReadDocsReq::items(int index) const {
  // @@protoc_insertion_point(field_get:jdocspb.ReadDocsReq.items)
  return _internal_items(index);
}
inline ::jdocspb::ReadDocsReq_Item* ReadDocsReq::_internal_add_items() {
  return items_.Add();
}
inline ::jdocspb::ReadDocsReq_Item* ReadDocsReq::add_items() {
  // @@protoc_insertion_point(field_add:jdocspb.ReadDocsReq.items)
  return _internal_add_items();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::jdocspb::ReadDocsReq_Item >&
ReadDocsReq::items() const {
  // @@protoc_insertion_point(field_list:jdocspb.ReadDocsReq.items)
  return items_;
}

// -------------------------------------------------------------------

// ReadDocsResp_Item

// .jdocspb.ReadDocsResp.Status status = 1;
inline void ReadDocsResp_Item::clear_status() {
  status_ = 0;
}
inline ::jdocspb::ReadDocsResp_Status ReadDocsResp_Item::_internal_status() const {
  return static_cast< ::jdocspb::ReadDocsResp_Status >(status_);
}
inline ::jdocspb::ReadDocsResp_Status ReadDocsResp_Item::status() const {
  // @@protoc_insertion_point(field_get:jdocspb.ReadDocsResp.Item.status)
  return _internal_status();
}
inline void ReadDocsResp_Item::_internal_set_status(::jdocspb::ReadDocsResp_Status value) {
  
  status_ = value;
}
inline void ReadDocsResp_Item::set_status(::jdocspb::ReadDocsResp_Status value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:jdocspb.ReadDocsResp.Item.status)
}

// .jdocspb.Jdoc doc = 2;
inline bool ReadDocsResp_Item::_internal_has_doc() const {
  return this != internal_default_instance() && doc_ != nullptr;
}
inline bool ReadDocsResp_Item::has_doc() const {
  return _internal_has_doc();
}
inline void ReadDocsResp_Item::clear_doc() {
  if (GetArena() == nullptr && doc_ != nullptr) {
    delete doc_;
  }
  doc_ = nullptr;
}
inline const ::jdocspb::Jdoc& ReadDocsResp_Item::_internal_doc() const {
  const ::jdocspb::Jdoc* p = doc_;
  return p != nullptr ? *p : *reinterpret_cast<const ::jdocspb::Jdoc*>(
      &::jdocspb::_Jdoc_default_instance_);
}
inline const ::jdocspb::Jdoc& ReadDocsResp_Item::doc() const {
  // @@protoc_insertion_point(field_get:jdocspb.ReadDocsResp.Item.doc)
  return _internal_doc();
}
inline void ReadDocsResp_Item::unsafe_arena_set_allocated_doc(
    ::jdocspb::Jdoc* doc) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(doc_);
  }
  doc_ = doc;
  if (doc) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:jdocspb.ReadDocsResp.Item.doc)
}
inline ::jdocspb::Jdoc* ReadDocsResp_Item::release_doc() {
  auto temp = unsafe_arena_release_doc();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::jdocspb::Jdoc* ReadDocsResp_Item::unsafe_arena_release_doc() {
  // @@protoc_insertion_point(field_release:jdocspb.ReadDocsResp.Item.doc)
  
  ::jdocspb::Jdoc* temp = doc_;
  doc_ = nullptr;
  return temp;
}
inline ::jdocspb::Jdoc* ReadDocsResp_Item::_internal_mutable_doc() {
  
  if (doc_ == nullptr) {
    auto* p = CreateMaybeMessage<::jdocspb::Jdoc>(GetArena());
    doc_ = p;
  }
  return doc_;
}
inline ::jdocspb::Jdoc* ReadDocsResp_Item::mutable_doc() {
  // @@protoc_insertion_point(field_mutable:jdocspb.ReadDocsResp.Item.doc)
  return _internal_mutable_doc();
}
inline void ReadDocsResp_Item::set_allocated_doc(::jdocspb::Jdoc* doc) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete doc_;
  }
  if (doc) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(doc);
    if (message_arena != submessage_arena) {
      doc = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, doc, submessage_arena);
    }
    
  } else {
    
  }
  doc_ = doc;
  // @@protoc_insertion_point(field_set_allocated:jdocspb.ReadDocsResp.Item.doc)
}

// -------------------------------------------------------------------

// ReadDocsResp

// repeated .jdocspb.ReadDocsResp.Item items = 1;
inline int ReadDocsResp::_internal_items_size() const {
  return items_.size();
}
inline int ReadDocsResp::items_size() const {
  return _internal_items_size();
}
inline void ReadDocsResp::clear_items() {
  items_.Clear();
}
inline ::jdocspb::ReadDocsResp_Item* ReadDocsResp::mutable_items(int index) {
  // @@protoc_insertion_point(field_mutable:jdocspb.ReadDocsResp.items)
  return items_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::jdocspb::ReadDocsResp_Item >*
ReadDocsResp::mutable_items() {
  // @@protoc_insertion_point(field_mutable_list:jdocspb.ReadDocsResp.items)
  return &items_;
}
inline const ::jdocspb::ReadDocsResp_Item& ReadDocsResp::_internal_items(int index) const {
  return items_.Get(index);
}
inline const ::jdocspb::ReadDocsResp_Item& ReadDocsResp::items(int index) const {
  // @@protoc_insertion_point(field_get:jdocspb.ReadDocsResp.items)
  return _internal_items(index);
}
inline ::jdocspb::ReadDocsResp_Item* ReadDocsResp::_internal_add_items() {
  return items_.Add();
}
inline ::jdocspb::ReadDocsResp_Item* ReadDocsResp::add_items() {
  // @@protoc_insertion_point(field_add:jdocspb.ReadDocsResp.items)
  return _internal_add_items();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::jdocspb::ReadDocsResp_Item >&
ReadDocsResp::items() const {
  // @@protoc_insertion_point(field_list:jdocspb.ReadDocsResp.items)
  return items_;
}

// -------------------------------------------------------------------

// DeleteDocReq

// string user_id = 1;
inline void DeleteDocReq::clear_user_id() {
  user_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& DeleteDocReq::user_id() const {
  // @@protoc_insertion_point(field_get:jdocspb.DeleteDocReq.user_id)
  return _internal_user_id();
}
inline void DeleteDocReq::set_user_id(const std::string& value) {
  _internal_set_user_id(value);
  // @@protoc_insertion_point(field_set:jdocspb.DeleteDocReq.user_id)
}
inline std::string* DeleteDocReq::mutable_user_id() {
  // @@protoc_insertion_point(field_mutable:jdocspb.DeleteDocReq.user_id)
  return _internal_mutable_user_id();
}
inline const std::string& DeleteDocReq::_internal_user_id() const {
  return user_id_.Get();
}
inline void DeleteDocReq::_internal_set_user_id(const std::string& value) {
  
  user_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void DeleteDocReq::set_user_id(std::string&& value) {
  
  user_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:jdocspb.DeleteDocReq.user_id)
}
inline void DeleteDocReq::set_user_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  user_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:jdocspb.DeleteDocReq.user_id)
}
inline void DeleteDocReq::set_user_id(const char* value,
    size_t size) {
  
  user_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:jdocspb.DeleteDocReq.user_id)
}
inline std::string* DeleteDocReq::_internal_mutable_user_id() {
  
  return user_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* DeleteDocReq::release_user_id() {
  // @@protoc_insertion_point(field_release:jdocspb.DeleteDocReq.user_id)
  return user_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DeleteDocReq::set_allocated_user_id(std::string* user_id) {
  if (user_id != nullptr) {
    
  } else {
    
  }
  user_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), user_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:jdocspb.DeleteDocReq.user_id)
}
inline std::string* DeleteDocReq::unsafe_arena_release_user_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:jdocspb.DeleteDocReq.user_id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return user_id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void DeleteDocReq::unsafe_arena_set_allocated_user_id(
    std::string* user_id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (user_id != nullptr) {
    
  } else {
    
  }
  user_id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      user_id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:jdocspb.DeleteDocReq.user_id)
}

// string thing = 2;
inline void DeleteDocReq::clear_thing() {
  thing_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& DeleteDocReq::thing() const {
  // @@protoc_insertion_point(field_get:jdocspb.DeleteDocReq.thing)
  return _internal_thing();
}
inline void DeleteDocReq::set_thing(const std::string& value) {
  _internal_set_thing(value);
  // @@protoc_insertion_point(field_set:jdocspb.DeleteDocReq.thing)
}
inline std::string* DeleteDocReq::mutable_thing() {
  // @@protoc_insertion_point(field_mutable:jdocspb.DeleteDocReq.thing)
  return _internal_mutable_thing();
}
inline const std::string& DeleteDocReq::_internal_thing() const {
  return thing_.Get();
}
inline void DeleteDocReq::_internal_set_thing(const std::string& value) {
  
  thing_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void DeleteDocReq::set_thing(std::string&& value) {
  
  thing_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:jdocspb.DeleteDocReq.thing)
}
inline void DeleteDocReq::set_thing(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  thing_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:jdocspb.DeleteDocReq.thing)
}
inline void DeleteDocReq::set_thing(const char* value,
    size_t size) {
  
  thing_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:jdocspb.DeleteDocReq.thing)
}
inline std::string* DeleteDocReq::_internal_mutable_thing() {
  
  return thing_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* DeleteDocReq::release_thing() {
  // @@protoc_insertion_point(field_release:jdocspb.DeleteDocReq.thing)
  return thing_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DeleteDocReq::set_allocated_thing(std::string* thing) {
  if (thing != nullptr) {
    
  } else {
    
  }
  thing_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), thing,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:jdocspb.DeleteDocReq.thing)
}
inline std::string* DeleteDocReq::unsafe_arena_release_thing() {
  // @@protoc_insertion_point(field_unsafe_arena_release:jdocspb.DeleteDocReq.thing)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return thing_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void DeleteDocReq::unsafe_arena_set_allocated_thing(
    std::string* thing) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (thing != nullptr) {
    
  } else {
    
  }
  thing_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      thing, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:jdocspb.DeleteDocReq.thing)
}

// string doc_name = 3;
inline void DeleteDocReq::clear_doc_name() {
  doc_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& DeleteDocReq::doc_name() const {
  // @@protoc_insertion_point(field_get:jdocspb.DeleteDocReq.doc_name)
  return _internal_doc_name();
}
inline void DeleteDocReq::set_doc_name(const std::string& value) {
  _internal_set_doc_name(value);
  // @@protoc_insertion_point(field_set:jdocspb.DeleteDocReq.doc_name)
}
inline std::string* DeleteDocReq::mutable_doc_name() {
  // @@protoc_insertion_point(field_mutable:jdocspb.DeleteDocReq.doc_name)
  return _internal_mutable_doc_name();
}
inline const std::string& DeleteDocReq::_internal_doc_name() const {
  return doc_name_.Get();
}
inline void DeleteDocReq::_internal_set_doc_name(const std::string& value) {
  
  doc_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void DeleteDocReq::set_doc_name(std::string&& value) {
  
  doc_name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:jdocspb.DeleteDocReq.doc_name)
}
inline void DeleteDocReq::set_doc_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  doc_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:jdocspb.DeleteDocReq.doc_name)
}
inline void DeleteDocReq::set_doc_name(const char* value,
    size_t size) {
  
  doc_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:jdocspb.DeleteDocReq.doc_name)
}
inline std::string* DeleteDocReq::_internal_mutable_doc_name() {
  
  return doc_name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* DeleteDocReq::release_doc_name() {
  // @@protoc_insertion_point(field_release:jdocspb.DeleteDocReq.doc_name)
  return doc_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DeleteDocReq::set_allocated_doc_name(std::string* doc_name) {
  if (doc_name != nullptr) {
    
  } else {
    
  }
  doc_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), doc_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:jdocspb.DeleteDocReq.doc_name)
}
inline std::string* DeleteDocReq::unsafe_arena_release_doc_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:jdocspb.DeleteDocReq.doc_name)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return doc_name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void DeleteDocReq::unsafe_arena_set_allocated_doc_name(
    std::string* doc_name) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (doc_name != nullptr) {
    
  } else {
    
  }
  doc_name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      doc_name, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:jdocspb.DeleteDocReq.doc_name)
}

// -------------------------------------------------------------------

// DeleteDocResp

// -------------------------------------------------------------------

// PurgeAccountDocsReq

// string user_id = 1;
inline void PurgeAccountDocsReq::clear_user_id() {
  user_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& PurgeAccountDocsReq::user_id() const {
  // @@protoc_insertion_point(field_get:jdocspb.PurgeAccountDocsReq.user_id)
  return _internal_user_id();
}
inline void PurgeAccountDocsReq::set_user_id(const std::string& value) {
  _internal_set_user_id(value);
  // @@protoc_insertion_point(field_set:jdocspb.PurgeAccountDocsReq.user_id)
}
inline std::string* PurgeAccountDocsReq::mutable_user_id() {
  // @@protoc_insertion_point(field_mutable:jdocspb.PurgeAccountDocsReq.user_id)
  return _internal_mutable_user_id();
}
inline const std::string& PurgeAccountDocsReq::_internal_user_id() const {
  return user_id_.Get();
}
inline void PurgeAccountDocsReq::_internal_set_user_id(const std::string& value) {
  
  user_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void PurgeAccountDocsReq::set_user_id(std::string&& value) {
  
  user_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:jdocspb.PurgeAccountDocsReq.user_id)
}
inline void PurgeAccountDocsReq::set_user_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  user_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:jdocspb.PurgeAccountDocsReq.user_id)
}
inline void PurgeAccountDocsReq::set_user_id(const char* value,
    size_t size) {
  
  user_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:jdocspb.PurgeAccountDocsReq.user_id)
}
inline std::string* PurgeAccountDocsReq::_internal_mutable_user_id() {
  
  return user_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* PurgeAccountDocsReq::release_user_id() {
  // @@protoc_insertion_point(field_release:jdocspb.PurgeAccountDocsReq.user_id)
  return user_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PurgeAccountDocsReq::set_allocated_user_id(std::string* user_id) {
  if (user_id != nullptr) {
    
  } else {
    
  }
  user_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), user_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:jdocspb.PurgeAccountDocsReq.user_id)
}
inline std::string* PurgeAccountDocsReq::unsafe_arena_release_user_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:jdocspb.PurgeAccountDocsReq.user_id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return user_id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void PurgeAccountDocsReq::unsafe_arena_set_allocated_user_id(
    std::string* user_id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (user_id != nullptr) {
    
  } else {
    
  }
  user_id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      user_id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:jdocspb.PurgeAccountDocsReq.user_id)
}

// string reason = 2;
inline void PurgeAccountDocsReq::clear_reason() {
  reason_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& PurgeAccountDocsReq::reason() const {
  // @@protoc_insertion_point(field_get:jdocspb.PurgeAccountDocsReq.reason)
  return _internal_reason();
}
inline void PurgeAccountDocsReq::set_reason(const std::string& value) {
  _internal_set_reason(value);
  // @@protoc_insertion_point(field_set:jdocspb.PurgeAccountDocsReq.reason)
}
inline std::string* PurgeAccountDocsReq::mutable_reason() {
  // @@protoc_insertion_point(field_mutable:jdocspb.PurgeAccountDocsReq.reason)
  return _internal_mutable_reason();
}
inline const std::string& PurgeAccountDocsReq::_internal_reason() const {
  return reason_.Get();
}
inline void PurgeAccountDocsReq::_internal_set_reason(const std::string& value) {
  
  reason_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void PurgeAccountDocsReq::set_reason(std::string&& value) {
  
  reason_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:jdocspb.PurgeAccountDocsReq.reason)
}
inline void PurgeAccountDocsReq::set_reason(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  reason_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:jdocspb.PurgeAccountDocsReq.reason)
}
inline void PurgeAccountDocsReq::set_reason(const char* value,
    size_t size) {
  
  reason_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:jdocspb.PurgeAccountDocsReq.reason)
}
inline std::string* PurgeAccountDocsReq::_internal_mutable_reason() {
  
  return reason_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* PurgeAccountDocsReq::release_reason() {
  // @@protoc_insertion_point(field_release:jdocspb.PurgeAccountDocsReq.reason)
  return reason_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PurgeAccountDocsReq::set_allocated_reason(std::string* reason) {
  if (reason != nullptr) {
    
  } else {
    
  }
  reason_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), reason,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:jdocspb.PurgeAccountDocsReq.reason)
}
inline std::string* PurgeAccountDocsReq::unsafe_arena_release_reason() {
  // @@protoc_insertion_point(field_unsafe_arena_release:jdocspb.PurgeAccountDocsReq.reason)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return reason_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void PurgeAccountDocsReq::unsafe_arena_set_allocated_reason(
    std::string* reason) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (reason != nullptr) {
    
  } else {
    
  }
  reason_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      reason, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:jdocspb.PurgeAccountDocsReq.reason)
}

// string notes = 3;
inline void PurgeAccountDocsReq::clear_notes() {
  notes_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& PurgeAccountDocsReq::notes() const {
  // @@protoc_insertion_point(field_get:jdocspb.PurgeAccountDocsReq.notes)
  return _internal_notes();
}
inline void PurgeAccountDocsReq::set_notes(const std::string& value) {
  _internal_set_notes(value);
  // @@protoc_insertion_point(field_set:jdocspb.PurgeAccountDocsReq.notes)
}
inline std::string* PurgeAccountDocsReq::mutable_notes() {
  // @@protoc_insertion_point(field_mutable:jdocspb.PurgeAccountDocsReq.notes)
  return _internal_mutable_notes();
}
inline const std::string& PurgeAccountDocsReq::_internal_notes() const {
  return notes_.Get();
}
inline void PurgeAccountDocsReq::_internal_set_notes(const std::string& value) {
  
  notes_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void PurgeAccountDocsReq::set_notes(std::string&& value) {
  
  notes_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:jdocspb.PurgeAccountDocsReq.notes)
}
inline void PurgeAccountDocsReq::set_notes(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  notes_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:jdocspb.PurgeAccountDocsReq.notes)
}
inline void PurgeAccountDocsReq::set_notes(const char* value,
    size_t size) {
  
  notes_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:jdocspb.PurgeAccountDocsReq.notes)
}
inline std::string* PurgeAccountDocsReq::_internal_mutable_notes() {
  
  return notes_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* PurgeAccountDocsReq::release_notes() {
  // @@protoc_insertion_point(field_release:jdocspb.PurgeAccountDocsReq.notes)
  return notes_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PurgeAccountDocsReq::set_allocated_notes(std::string* notes) {
  if (notes != nullptr) {
    
  } else {
    
  }
  notes_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), notes,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:jdocspb.PurgeAccountDocsReq.notes)
}
inline std::string* PurgeAccountDocsReq::unsafe_arena_release_notes() {
  // @@protoc_insertion_point(field_unsafe_arena_release:jdocspb.PurgeAccountDocsReq.notes)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return notes_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void PurgeAccountDocsReq::unsafe_arena_set_allocated_notes(
    std::string* notes) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (notes != nullptr) {
    
  } else {
    
  }
  notes_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      notes, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:jdocspb.PurgeAccountDocsReq.notes)
}

// -------------------------------------------------------------------

// PurgeAccountDocsResp

// -------------------------------------------------------------------

// ViewDoc

// string user_id = 1;
inline void ViewDoc::clear_user_id() {
  user_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ViewDoc::user_id() const {
  // @@protoc_insertion_point(field_get:jdocspb.ViewDoc.user_id)
  return _internal_user_id();
}
inline void ViewDoc::set_user_id(const std::string& value) {
  _internal_set_user_id(value);
  // @@protoc_insertion_point(field_set:jdocspb.ViewDoc.user_id)
}
inline std::string* ViewDoc::mutable_user_id() {
  // @@protoc_insertion_point(field_mutable:jdocspb.ViewDoc.user_id)
  return _internal_mutable_user_id();
}
inline const std::string& ViewDoc::_internal_user_id() const {
  return user_id_.Get();
}
inline void ViewDoc::_internal_set_user_id(const std::string& value) {
  
  user_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ViewDoc::set_user_id(std::string&& value) {
  
  user_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:jdocspb.ViewDoc.user_id)
}
inline void ViewDoc::set_user_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  user_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:jdocspb.ViewDoc.user_id)
}
inline void ViewDoc::set_user_id(const char* value,
    size_t size) {
  
  user_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:jdocspb.ViewDoc.user_id)
}
inline std::string* ViewDoc::_internal_mutable_user_id() {
  
  return user_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ViewDoc::release_user_id() {
  // @@protoc_insertion_point(field_release:jdocspb.ViewDoc.user_id)
  return user_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ViewDoc::set_allocated_user_id(std::string* user_id) {
  if (user_id != nullptr) {
    
  } else {
    
  }
  user_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), user_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:jdocspb.ViewDoc.user_id)
}
inline std::string* ViewDoc::unsafe_arena_release_user_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:jdocspb.ViewDoc.user_id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return user_id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ViewDoc::unsafe_arena_set_allocated_user_id(
    std::string* user_id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (user_id != nullptr) {
    
  } else {
    
  }
  user_id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      user_id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:jdocspb.ViewDoc.user_id)
}

// string thing = 2;
inline void ViewDoc::clear_thing() {
  thing_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ViewDoc::thing() const {
  // @@protoc_insertion_point(field_get:jdocspb.ViewDoc.thing)
  return _internal_thing();
}
inline void ViewDoc::set_thing(const std::string& value) {
  _internal_set_thing(value);
  // @@protoc_insertion_point(field_set:jdocspb.ViewDoc.thing)
}
inline std::string* ViewDoc::mutable_thing() {
  // @@protoc_insertion_point(field_mutable:jdocspb.ViewDoc.thing)
  return _internal_mutable_thing();
}
inline const std::string& ViewDoc::_internal_thing() const {
  return thing_.Get();
}
inline void ViewDoc::_internal_set_thing(const std::string& value) {
  
  thing_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ViewDoc::set_thing(std::string&& value) {
  
  thing_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:jdocspb.ViewDoc.thing)
}
inline void ViewDoc::set_thing(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  thing_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:jdocspb.ViewDoc.thing)
}
inline void ViewDoc::set_thing(const char* value,
    size_t size) {
  
  thing_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:jdocspb.ViewDoc.thing)
}
inline std::string* ViewDoc::_internal_mutable_thing() {
  
  return thing_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ViewDoc::release_thing() {
  // @@protoc_insertion_point(field_release:jdocspb.ViewDoc.thing)
  return thing_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ViewDoc::set_allocated_thing(std::string* thing) {
  if (thing != nullptr) {
    
  } else {
    
  }
  thing_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), thing,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:jdocspb.ViewDoc.thing)
}
inline std::string* ViewDoc::unsafe_arena_release_thing() {
  // @@protoc_insertion_point(field_unsafe_arena_release:jdocspb.ViewDoc.thing)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return thing_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ViewDoc::unsafe_arena_set_allocated_thing(
    std::string* thing) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (thing != nullptr) {
    
  } else {
    
  }
  thing_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      thing, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:jdocspb.ViewDoc.thing)
}

// string doc_name = 3;
inline void ViewDoc::clear_doc_name() {
  doc_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ViewDoc::doc_name() const {
  // @@protoc_insertion_point(field_get:jdocspb.ViewDoc.doc_name)
  return _internal_doc_name();
}
inline void ViewDoc::set_doc_name(const std::string& value) {
  _internal_set_doc_name(value);
  // @@protoc_insertion_point(field_set:jdocspb.ViewDoc.doc_name)
}
inline std::string* ViewDoc::mutable_doc_name() {
  // @@protoc_insertion_point(field_mutable:jdocspb.ViewDoc.doc_name)
  return _internal_mutable_doc_name();
}
inline const std::string& ViewDoc::_internal_doc_name() const {
  return doc_name_.Get();
}
inline void ViewDoc::_internal_set_doc_name(const std::string& value) {
  
  doc_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ViewDoc::set_doc_name(std::string&& value) {
  
  doc_name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:jdocspb.ViewDoc.doc_name)
}
inline void ViewDoc::set_doc_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  doc_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:jdocspb.ViewDoc.doc_name)
}
inline void ViewDoc::set_doc_name(const char* value,
    size_t size) {
  
  doc_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:jdocspb.ViewDoc.doc_name)
}
inline std::string* ViewDoc::_internal_mutable_doc_name() {
  
  return doc_name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ViewDoc::release_doc_name() {
  // @@protoc_insertion_point(field_release:jdocspb.ViewDoc.doc_name)
  return doc_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ViewDoc::set_allocated_doc_name(std::string* doc_name) {
  if (doc_name != nullptr) {
    
  } else {
    
  }
  doc_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), doc_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:jdocspb.ViewDoc.doc_name)
}
inline std::string* ViewDoc::unsafe_arena_release_doc_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:jdocspb.ViewDoc.doc_name)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return doc_name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ViewDoc::unsafe_arena_set_allocated_doc_name(
    std::string* doc_name) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (doc_name != nullptr) {
    
  } else {
    
  }
  doc_name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      doc_name, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:jdocspb.ViewDoc.doc_name)
}

// string json_doc = 4;
inline void ViewDoc::clear_json_doc() {
  json_doc_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ViewDoc::json_doc() const {
  // @@protoc_insertion_point(field_get:jdocspb.ViewDoc.json_doc)
  return _internal_json_doc();
}
inline void ViewDoc::set_json_doc(const std::string& value) {
  _internal_set_json_doc(value);
  // @@protoc_insertion_point(field_set:jdocspb.ViewDoc.json_doc)
}
inline std::string* ViewDoc::mutable_json_doc() {
  // @@protoc_insertion_point(field_mutable:jdocspb.ViewDoc.json_doc)
  return _internal_mutable_json_doc();
}
inline const std::string& ViewDoc::_internal_json_doc() const {
  return json_doc_.Get();
}
inline void ViewDoc::_internal_set_json_doc(const std::string& value) {
  
  json_doc_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ViewDoc::set_json_doc(std::string&& value) {
  
  json_doc_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:jdocspb.ViewDoc.json_doc)
}
inline void ViewDoc::set_json_doc(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  json_doc_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:jdocspb.ViewDoc.json_doc)
}
inline void ViewDoc::set_json_doc(const char* value,
    size_t size) {
  
  json_doc_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:jdocspb.ViewDoc.json_doc)
}
inline std::string* ViewDoc::_internal_mutable_json_doc() {
  
  return json_doc_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ViewDoc::release_json_doc() {
  // @@protoc_insertion_point(field_release:jdocspb.ViewDoc.json_doc)
  return json_doc_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ViewDoc::set_allocated_json_doc(std::string* json_doc) {
  if (json_doc != nullptr) {
    
  } else {
    
  }
  json_doc_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), json_doc,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:jdocspb.ViewDoc.json_doc)
}
inline std::string* ViewDoc::unsafe_arena_release_json_doc() {
  // @@protoc_insertion_point(field_unsafe_arena_release:jdocspb.ViewDoc.json_doc)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return json_doc_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ViewDoc::unsafe_arena_set_allocated_json_doc(
    std::string* json_doc) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (json_doc != nullptr) {
    
  } else {
    
  }
  json_doc_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      json_doc, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:jdocspb.ViewDoc.json_doc)
}

// -------------------------------------------------------------------

// ViewAccountDocsReq

// string user_id = 1;
inline void ViewAccountDocsReq::clear_user_id() {
  user_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ViewAccountDocsReq::user_id() const {
  // @@protoc_insertion_point(field_get:jdocspb.ViewAccountDocsReq.user_id)
  return _internal_user_id();
}
inline void ViewAccountDocsReq::set_user_id(const std::string& value) {
  _internal_set_user_id(value);
  // @@protoc_insertion_point(field_set:jdocspb.ViewAccountDocsReq.user_id)
}
inline std::string* ViewAccountDocsReq::mutable_user_id() {
  // @@protoc_insertion_point(field_mutable:jdocspb.ViewAccountDocsReq.user_id)
  return _internal_mutable_user_id();
}
inline const std::string& ViewAccountDocsReq::_internal_user_id() const {
  return user_id_.Get();
}
inline void ViewAccountDocsReq::_internal_set_user_id(const std::string& value) {
  
  user_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ViewAccountDocsReq::set_user_id(std::string&& value) {
  
  user_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:jdocspb.ViewAccountDocsReq.user_id)
}
inline void ViewAccountDocsReq::set_user_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  user_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:jdocspb.ViewAccountDocsReq.user_id)
}
inline void ViewAccountDocsReq::set_user_id(const char* value,
    size_t size) {
  
  user_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:jdocspb.ViewAccountDocsReq.user_id)
}
inline std::string* ViewAccountDocsReq::_internal_mutable_user_id() {
  
  return user_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ViewAccountDocsReq::release_user_id() {
  // @@protoc_insertion_point(field_release:jdocspb.ViewAccountDocsReq.user_id)
  return user_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ViewAccountDocsReq::set_allocated_user_id(std::string* user_id) {
  if (user_id != nullptr) {
    
  } else {
    
  }
  user_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), user_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:jdocspb.ViewAccountDocsReq.user_id)
}
inline std::string* ViewAccountDocsReq::unsafe_arena_release_user_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:jdocspb.ViewAccountDocsReq.user_id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return user_id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ViewAccountDocsReq::unsafe_arena_set_allocated_user_id(
    std::string* user_id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (user_id != nullptr) {
    
  } else {
    
  }
  user_id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      user_id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:jdocspb.ViewAccountDocsReq.user_id)
}

// -------------------------------------------------------------------

// ViewDocsResp

// repeated .jdocspb.ViewDoc docs = 1;
inline int ViewDocsResp::_internal_docs_size() const {
  return docs_.size();
}
inline int ViewDocsResp::docs_size() const {
  return _internal_docs_size();
}
inline void ViewDocsResp::clear_docs() {
  docs_.Clear();
}
inline ::jdocspb::ViewDoc* ViewDocsResp::mutable_docs(int index) {
  // @@protoc_insertion_point(field_mutable:jdocspb.ViewDocsResp.docs)
  return docs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::jdocspb::ViewDoc >*
ViewDocsResp::mutable_docs() {
  // @@protoc_insertion_point(field_mutable_list:jdocspb.ViewDocsResp.docs)
  return &docs_;
}
inline const ::jdocspb::ViewDoc& ViewDocsResp::_internal_docs(int index) const {
  return docs_.Get(index);
}
inline const ::jdocspb::ViewDoc& ViewDocsResp::docs(int index) const {
  // @@protoc_insertion_point(field_get:jdocspb.ViewDocsResp.docs)
  return _internal_docs(index);
}
inline ::jdocspb::ViewDoc* ViewDocsResp::_internal_add_docs() {
  return docs_.Add();
}
inline ::jdocspb::ViewDoc* ViewDocsResp::add_docs() {
  // @@protoc_insertion_point(field_add:jdocspb.ViewDocsResp.docs)
  return _internal_add_docs();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::jdocspb::ViewDoc >&
ViewDocsResp::docs() const {
  // @@protoc_insertion_point(field_list:jdocspb.ViewDocsResp.docs)
  return docs_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace jdocspb

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::jdocspb::WriteDocResp_Status> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jdocspb::WriteDocResp_Status>() {
  return ::jdocspb::WriteDocResp_Status_descriptor();
}
template <> struct is_proto_enum< ::jdocspb::ReadDocsResp_Status> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jdocspb::ReadDocsResp_Status>() {
  return ::jdocspb::ReadDocsResp_Status_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_jdocs_2eproto
