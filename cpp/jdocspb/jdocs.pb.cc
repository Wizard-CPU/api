// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: jdocs.proto

#include "jdocs.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_jdocs_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Jdoc_jdocs_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_jdocs_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ReadDocsReq_Item_jdocs_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_jdocs_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ReadDocsResp_Item_jdocs_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_jdocs_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ViewDoc_jdocs_2eproto;
namespace jdocspb {
class JdocDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Jdoc> _instance;
} _Jdoc_default_instance_;
class EchoReqDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<EchoReq> _instance;
} _EchoReq_default_instance_;
class EchoRespDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<EchoResp> _instance;
} _EchoResp_default_instance_;
class WriteDocReqDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<WriteDocReq> _instance;
} _WriteDocReq_default_instance_;
class WriteDocRespDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<WriteDocResp> _instance;
} _WriteDocResp_default_instance_;
class ReadDocsReq_ItemDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ReadDocsReq_Item> _instance;
} _ReadDocsReq_Item_default_instance_;
class ReadDocsReqDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ReadDocsReq> _instance;
} _ReadDocsReq_default_instance_;
class ReadDocsResp_ItemDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ReadDocsResp_Item> _instance;
} _ReadDocsResp_Item_default_instance_;
class ReadDocsRespDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ReadDocsResp> _instance;
} _ReadDocsResp_default_instance_;
class DeleteDocReqDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DeleteDocReq> _instance;
} _DeleteDocReq_default_instance_;
class DeleteDocRespDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DeleteDocResp> _instance;
} _DeleteDocResp_default_instance_;
class PurgeAccountDocsReqDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PurgeAccountDocsReq> _instance;
} _PurgeAccountDocsReq_default_instance_;
class PurgeAccountDocsRespDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PurgeAccountDocsResp> _instance;
} _PurgeAccountDocsResp_default_instance_;
class ViewDocDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ViewDoc> _instance;
} _ViewDoc_default_instance_;
class ViewAccountDocsReqDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ViewAccountDocsReq> _instance;
} _ViewAccountDocsReq_default_instance_;
class ViewDocsRespDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ViewDocsResp> _instance;
} _ViewDocsResp_default_instance_;
}  // namespace jdocspb
static void InitDefaultsscc_info_DeleteDocReq_jdocs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::jdocspb::_DeleteDocReq_default_instance_;
    new (ptr) ::jdocspb::DeleteDocReq();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::jdocspb::DeleteDocReq::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DeleteDocReq_jdocs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_DeleteDocReq_jdocs_2eproto}, {}};

static void InitDefaultsscc_info_DeleteDocResp_jdocs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::jdocspb::_DeleteDocResp_default_instance_;
    new (ptr) ::jdocspb::DeleteDocResp();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::jdocspb::DeleteDocResp::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DeleteDocResp_jdocs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_DeleteDocResp_jdocs_2eproto}, {}};

static void InitDefaultsscc_info_EchoReq_jdocs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::jdocspb::_EchoReq_default_instance_;
    new (ptr) ::jdocspb::EchoReq();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::jdocspb::EchoReq::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_EchoReq_jdocs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_EchoReq_jdocs_2eproto}, {}};

static void InitDefaultsscc_info_EchoResp_jdocs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::jdocspb::_EchoResp_default_instance_;
    new (ptr) ::jdocspb::EchoResp();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::jdocspb::EchoResp::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_EchoResp_jdocs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_EchoResp_jdocs_2eproto}, {}};

static void InitDefaultsscc_info_Jdoc_jdocs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::jdocspb::_Jdoc_default_instance_;
    new (ptr) ::jdocspb::Jdoc();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::jdocspb::Jdoc::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Jdoc_jdocs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Jdoc_jdocs_2eproto}, {}};

static void InitDefaultsscc_info_PurgeAccountDocsReq_jdocs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::jdocspb::_PurgeAccountDocsReq_default_instance_;
    new (ptr) ::jdocspb::PurgeAccountDocsReq();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::jdocspb::PurgeAccountDocsReq::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PurgeAccountDocsReq_jdocs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PurgeAccountDocsReq_jdocs_2eproto}, {}};

static void InitDefaultsscc_info_PurgeAccountDocsResp_jdocs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::jdocspb::_PurgeAccountDocsResp_default_instance_;
    new (ptr) ::jdocspb::PurgeAccountDocsResp();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::jdocspb::PurgeAccountDocsResp::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PurgeAccountDocsResp_jdocs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PurgeAccountDocsResp_jdocs_2eproto}, {}};

static void InitDefaultsscc_info_ReadDocsReq_jdocs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::jdocspb::_ReadDocsReq_default_instance_;
    new (ptr) ::jdocspb::ReadDocsReq();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::jdocspb::ReadDocsReq::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ReadDocsReq_jdocs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ReadDocsReq_jdocs_2eproto}, {
      &scc_info_ReadDocsReq_Item_jdocs_2eproto.base,}};

static void InitDefaultsscc_info_ReadDocsReq_Item_jdocs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::jdocspb::_ReadDocsReq_Item_default_instance_;
    new (ptr) ::jdocspb::ReadDocsReq_Item();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::jdocspb::ReadDocsReq_Item::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ReadDocsReq_Item_jdocs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ReadDocsReq_Item_jdocs_2eproto}, {}};

static void InitDefaultsscc_info_ReadDocsResp_jdocs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::jdocspb::_ReadDocsResp_default_instance_;
    new (ptr) ::jdocspb::ReadDocsResp();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::jdocspb::ReadDocsResp::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ReadDocsResp_jdocs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ReadDocsResp_jdocs_2eproto}, {
      &scc_info_ReadDocsResp_Item_jdocs_2eproto.base,}};

static void InitDefaultsscc_info_ReadDocsResp_Item_jdocs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::jdocspb::_ReadDocsResp_Item_default_instance_;
    new (ptr) ::jdocspb::ReadDocsResp_Item();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::jdocspb::ReadDocsResp_Item::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ReadDocsResp_Item_jdocs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ReadDocsResp_Item_jdocs_2eproto}, {
      &scc_info_Jdoc_jdocs_2eproto.base,}};

static void InitDefaultsscc_info_ViewAccountDocsReq_jdocs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::jdocspb::_ViewAccountDocsReq_default_instance_;
    new (ptr) ::jdocspb::ViewAccountDocsReq();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::jdocspb::ViewAccountDocsReq::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ViewAccountDocsReq_jdocs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ViewAccountDocsReq_jdocs_2eproto}, {}};

static void InitDefaultsscc_info_ViewDoc_jdocs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::jdocspb::_ViewDoc_default_instance_;
    new (ptr) ::jdocspb::ViewDoc();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::jdocspb::ViewDoc::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ViewDoc_jdocs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ViewDoc_jdocs_2eproto}, {}};

static void InitDefaultsscc_info_ViewDocsResp_jdocs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::jdocspb::_ViewDocsResp_default_instance_;
    new (ptr) ::jdocspb::ViewDocsResp();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::jdocspb::ViewDocsResp::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ViewDocsResp_jdocs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ViewDocsResp_jdocs_2eproto}, {
      &scc_info_ViewDoc_jdocs_2eproto.base,}};

static void InitDefaultsscc_info_WriteDocReq_jdocs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::jdocspb::_WriteDocReq_default_instance_;
    new (ptr) ::jdocspb::WriteDocReq();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::jdocspb::WriteDocReq::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_WriteDocReq_jdocs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_WriteDocReq_jdocs_2eproto}, {
      &scc_info_Jdoc_jdocs_2eproto.base,}};

static void InitDefaultsscc_info_WriteDocResp_jdocs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::jdocspb::_WriteDocResp_default_instance_;
    new (ptr) ::jdocspb::WriteDocResp();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::jdocspb::WriteDocResp::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_WriteDocResp_jdocs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_WriteDocResp_jdocs_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_jdocs_2eproto[16];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_jdocs_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_jdocs_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_jdocs_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::jdocspb::Jdoc, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::jdocspb::Jdoc, doc_version_),
  PROTOBUF_FIELD_OFFSET(::jdocspb::Jdoc, fmt_version_),
  PROTOBUF_FIELD_OFFSET(::jdocspb::Jdoc, client_metadata_),
  PROTOBUF_FIELD_OFFSET(::jdocspb::Jdoc, json_doc_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::jdocspb::EchoReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::jdocspb::EchoReq, data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::jdocspb::EchoResp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::jdocspb::EchoResp, data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::jdocspb::WriteDocReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::jdocspb::WriteDocReq, user_id_),
  PROTOBUF_FIELD_OFFSET(::jdocspb::WriteDocReq, thing_),
  PROTOBUF_FIELD_OFFSET(::jdocspb::WriteDocReq, doc_name_),
  PROTOBUF_FIELD_OFFSET(::jdocspb::WriteDocReq, doc_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::jdocspb::WriteDocResp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::jdocspb::WriteDocResp, status_),
  PROTOBUF_FIELD_OFFSET(::jdocspb::WriteDocResp, latest_doc_version_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::jdocspb::ReadDocsReq_Item, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::jdocspb::ReadDocsReq_Item, doc_name_),
  PROTOBUF_FIELD_OFFSET(::jdocspb::ReadDocsReq_Item, my_doc_version_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::jdocspb::ReadDocsReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::jdocspb::ReadDocsReq, user_id_),
  PROTOBUF_FIELD_OFFSET(::jdocspb::ReadDocsReq, thing_),
  PROTOBUF_FIELD_OFFSET(::jdocspb::ReadDocsReq, items_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::jdocspb::ReadDocsResp_Item, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::jdocspb::ReadDocsResp_Item, status_),
  PROTOBUF_FIELD_OFFSET(::jdocspb::ReadDocsResp_Item, doc_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::jdocspb::ReadDocsResp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::jdocspb::ReadDocsResp, items_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::jdocspb::DeleteDocReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::jdocspb::DeleteDocReq, user_id_),
  PROTOBUF_FIELD_OFFSET(::jdocspb::DeleteDocReq, thing_),
  PROTOBUF_FIELD_OFFSET(::jdocspb::DeleteDocReq, doc_name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::jdocspb::DeleteDocResp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::jdocspb::PurgeAccountDocsReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::jdocspb::PurgeAccountDocsReq, user_id_),
  PROTOBUF_FIELD_OFFSET(::jdocspb::PurgeAccountDocsReq, reason_),
  PROTOBUF_FIELD_OFFSET(::jdocspb::PurgeAccountDocsReq, notes_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::jdocspb::PurgeAccountDocsResp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::jdocspb::ViewDoc, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::jdocspb::ViewDoc, user_id_),
  PROTOBUF_FIELD_OFFSET(::jdocspb::ViewDoc, thing_),
  PROTOBUF_FIELD_OFFSET(::jdocspb::ViewDoc, doc_name_),
  PROTOBUF_FIELD_OFFSET(::jdocspb::ViewDoc, json_doc_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::jdocspb::ViewAccountDocsReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::jdocspb::ViewAccountDocsReq, user_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::jdocspb::ViewDocsResp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::jdocspb::ViewDocsResp, docs_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::jdocspb::Jdoc)},
  { 9, -1, sizeof(::jdocspb::EchoReq)},
  { 15, -1, sizeof(::jdocspb::EchoResp)},
  { 21, -1, sizeof(::jdocspb::WriteDocReq)},
  { 30, -1, sizeof(::jdocspb::WriteDocResp)},
  { 37, -1, sizeof(::jdocspb::ReadDocsReq_Item)},
  { 44, -1, sizeof(::jdocspb::ReadDocsReq)},
  { 52, -1, sizeof(::jdocspb::ReadDocsResp_Item)},
  { 59, -1, sizeof(::jdocspb::ReadDocsResp)},
  { 65, -1, sizeof(::jdocspb::DeleteDocReq)},
  { 73, -1, sizeof(::jdocspb::DeleteDocResp)},
  { 78, -1, sizeof(::jdocspb::PurgeAccountDocsReq)},
  { 86, -1, sizeof(::jdocspb::PurgeAccountDocsResp)},
  { 91, -1, sizeof(::jdocspb::ViewDoc)},
  { 100, -1, sizeof(::jdocspb::ViewAccountDocsReq)},
  { 106, -1, sizeof(::jdocspb::ViewDocsResp)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::jdocspb::_Jdoc_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::jdocspb::_EchoReq_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::jdocspb::_EchoResp_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::jdocspb::_WriteDocReq_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::jdocspb::_WriteDocResp_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::jdocspb::_ReadDocsReq_Item_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::jdocspb::_ReadDocsReq_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::jdocspb::_ReadDocsResp_Item_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::jdocspb::_ReadDocsResp_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::jdocspb::_DeleteDocReq_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::jdocspb::_DeleteDocResp_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::jdocspb::_PurgeAccountDocsReq_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::jdocspb::_PurgeAccountDocsResp_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::jdocspb::_ViewDoc_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::jdocspb::_ViewAccountDocsReq_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::jdocspb::_ViewDocsResp_default_instance_),
};

const char descriptor_table_protodef_jdocs_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\013jdocs.proto\022\007jdocspb\032\034google/api/annot"
  "ations.proto\"[\n\004Jdoc\022\023\n\013doc_version\030\001 \001("
  "\004\022\023\n\013fmt_version\030\002 \001(\004\022\027\n\017client_metadat"
  "a\030\003 \001(\t\022\020\n\010json_doc\030\004 \001(\t\"\027\n\007EchoReq\022\014\n\004"
  "Data\030\001 \001(\t\"\030\n\010EchoResp\022\014\n\004Data\030\001 \001(\t\"[\n\013"
  "WriteDocReq\022\017\n\007user_id\030\001 \001(\t\022\r\n\005thing\030\002 "
  "\001(\t\022\020\n\010doc_name\030\003 \001(\t\022\032\n\003doc\030\004 \001(\0132\r.jdo"
  "cspb.Jdoc\"\254\001\n\014WriteDocResp\022,\n\006status\030\001 \001"
  "(\0162\034.jdocspb.WriteDocResp.Status\022\032\n\022late"
  "st_doc_version\030\002 \001(\004\"R\n\006Status\022\014\n\010ACCEPT"
  "ED\020\000\022\034\n\030REJECTED_BAD_DOC_VERSION\020\001\022\034\n\030RE"
  "JECTED_BAD_FMT_VERSION\020\002\"\211\001\n\013ReadDocsReq"
  "\022\017\n\007user_id\030\001 \001(\t\022\r\n\005thing\030\002 \001(\t\022(\n\005item"
  "s\030\003 \003(\0132\031.jdocspb.ReadDocsReq.Item\0320\n\004It"
  "em\022\020\n\010doc_name\030\001 \001(\t\022\026\n\016my_doc_version\030\002"
  " \001(\004\"\300\001\n\014ReadDocsResp\022)\n\005items\030\001 \003(\0132\032.j"
  "docspb.ReadDocsResp.Item\032P\n\004Item\022,\n\006stat"
  "us\030\001 \001(\0162\034.jdocspb.ReadDocsResp.Status\022\032"
  "\n\003doc\030\002 \001(\0132\r.jdocspb.Jdoc\"3\n\006Status\022\r\n\t"
  "UNCHANGED\020\000\022\013\n\007CHANGED\020\001\022\r\n\tNOT_FOUND\020\002\""
  "@\n\014DeleteDocReq\022\017\n\007user_id\030\001 \001(\t\022\r\n\005thin"
  "g\030\002 \001(\t\022\020\n\010doc_name\030\003 \001(\t\"\017\n\rDeleteDocRe"
  "sp\"E\n\023PurgeAccountDocsReq\022\017\n\007user_id\030\001 \001"
  "(\t\022\016\n\006reason\030\002 \001(\t\022\r\n\005notes\030\003 \001(\t\"\026\n\024Pur"
  "geAccountDocsResp\"M\n\007ViewDoc\022\017\n\007user_id\030"
  "\001 \001(\t\022\r\n\005thing\030\002 \001(\t\022\020\n\010doc_name\030\003 \001(\t\022\020"
  "\n\010json_doc\030\004 \001(\t\"%\n\022ViewAccountDocsReq\022\017"
  "\n\007user_id\030\001 \001(\t\".\n\014ViewDocsResp\022\036\n\004docs\030"
  "\001 \003(\0132\020.jdocspb.ViewDoc2\347\003\n\005Jdocs\022P\n\010Wri"
  "teDoc\022\024.jdocspb.WriteDocReq\032\025.jdocspb.Wr"
  "iteDocResp\"\027\202\323\344\223\002\021\"\014/1/write-doc:\001*\022P\n\010R"
  "eadDocs\022\024.jdocspb.ReadDocsReq\032\025.jdocspb."
  "ReadDocsResp\"\027\202\323\344\223\002\021\"\014/1/read-docs:\001*\022T\n"
  "\tDeleteDoc\022\025.jdocspb.DeleteDocReq\032\026.jdoc"
  "spb.DeleteDocResp\"\030\202\323\344\223\002\022\"\r/1/delete-doc"
  ":\001*\022O\n\020PurgeAccountDocs\022\034.jdocspb.PurgeA"
  "ccountDocsReq\032\035.jdocspb.PurgeAccountDocs"
  "Resp\022E\n\017ViewAccountDocs\022\033.jdocspb.ViewAc"
  "countDocsReq\032\025.jdocspb.ViewDocsResp\022L\n\026V"
  "iewAccountDocsWithPII\022\033.jdocspb.ViewAcco"
  "untDocsReq\032\025.jdocspb.ViewDocsRespB.Z,git"
  "hub.com/digital-dream-labs/api/go/jdocsp"
  "bb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_jdocs_2eproto_deps[1] = {
  &::descriptor_table_google_2fapi_2fannotations_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_jdocs_2eproto_sccs[16] = {
  &scc_info_DeleteDocReq_jdocs_2eproto.base,
  &scc_info_DeleteDocResp_jdocs_2eproto.base,
  &scc_info_EchoReq_jdocs_2eproto.base,
  &scc_info_EchoResp_jdocs_2eproto.base,
  &scc_info_Jdoc_jdocs_2eproto.base,
  &scc_info_PurgeAccountDocsReq_jdocs_2eproto.base,
  &scc_info_PurgeAccountDocsResp_jdocs_2eproto.base,
  &scc_info_ReadDocsReq_jdocs_2eproto.base,
  &scc_info_ReadDocsReq_Item_jdocs_2eproto.base,
  &scc_info_ReadDocsResp_jdocs_2eproto.base,
  &scc_info_ReadDocsResp_Item_jdocs_2eproto.base,
  &scc_info_ViewAccountDocsReq_jdocs_2eproto.base,
  &scc_info_ViewDoc_jdocs_2eproto.base,
  &scc_info_ViewDocsResp_jdocs_2eproto.base,
  &scc_info_WriteDocReq_jdocs_2eproto.base,
  &scc_info_WriteDocResp_jdocs_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_jdocs_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_jdocs_2eproto = {
  false, false, descriptor_table_protodef_jdocs_2eproto, "jdocs.proto", 1689,
  &descriptor_table_jdocs_2eproto_once, descriptor_table_jdocs_2eproto_sccs, descriptor_table_jdocs_2eproto_deps, 16, 1,
  schemas, file_default_instances, TableStruct_jdocs_2eproto::offsets,
  file_level_metadata_jdocs_2eproto, 16, file_level_enum_descriptors_jdocs_2eproto, file_level_service_descriptors_jdocs_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_jdocs_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_jdocs_2eproto)), true);
namespace jdocspb {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* WriteDocResp_Status_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_jdocs_2eproto);
  return file_level_enum_descriptors_jdocs_2eproto[0];
}
bool WriteDocResp_Status_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr WriteDocResp_Status WriteDocResp::ACCEPTED;
constexpr WriteDocResp_Status WriteDocResp::REJECTED_BAD_DOC_VERSION;
constexpr WriteDocResp_Status WriteDocResp::REJECTED_BAD_FMT_VERSION;
constexpr WriteDocResp_Status WriteDocResp::Status_MIN;
constexpr WriteDocResp_Status WriteDocResp::Status_MAX;
constexpr int WriteDocResp::Status_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ReadDocsResp_Status_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_jdocs_2eproto);
  return file_level_enum_descriptors_jdocs_2eproto[1];
}
bool ReadDocsResp_Status_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr ReadDocsResp_Status ReadDocsResp::UNCHANGED;
constexpr ReadDocsResp_Status ReadDocsResp::CHANGED;
constexpr ReadDocsResp_Status ReadDocsResp::NOT_FOUND;
constexpr ReadDocsResp_Status ReadDocsResp::Status_MIN;
constexpr ReadDocsResp_Status ReadDocsResp::Status_MAX;
constexpr int ReadDocsResp::Status_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

void Jdoc::InitAsDefaultInstance() {
}
class Jdoc::_Internal {
 public:
};

Jdoc::Jdoc(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:jdocspb.Jdoc)
}
Jdoc::Jdoc(const Jdoc& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  client_metadata_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_client_metadata().empty()) {
    client_metadata_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_client_metadata(),
      GetArena());
  }
  json_doc_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_json_doc().empty()) {
    json_doc_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_json_doc(),
      GetArena());
  }
  ::memcpy(&doc_version_, &from.doc_version_,
    static_cast<size_t>(reinterpret_cast<char*>(&fmt_version_) -
    reinterpret_cast<char*>(&doc_version_)) + sizeof(fmt_version_));
  // @@protoc_insertion_point(copy_constructor:jdocspb.Jdoc)
}

void Jdoc::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Jdoc_jdocs_2eproto.base);
  client_metadata_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  json_doc_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&doc_version_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&fmt_version_) -
      reinterpret_cast<char*>(&doc_version_)) + sizeof(fmt_version_));
}

Jdoc::~Jdoc() {
  // @@protoc_insertion_point(destructor:jdocspb.Jdoc)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Jdoc::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  client_metadata_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  json_doc_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Jdoc::ArenaDtor(void* object) {
  Jdoc* _this = reinterpret_cast< Jdoc* >(object);
  (void)_this;
}
void Jdoc::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Jdoc::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Jdoc& Jdoc::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Jdoc_jdocs_2eproto.base);
  return *internal_default_instance();
}


void Jdoc::Clear() {
// @@protoc_insertion_point(message_clear_start:jdocspb.Jdoc)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  client_metadata_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  json_doc_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&doc_version_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&fmt_version_) -
      reinterpret_cast<char*>(&doc_version_)) + sizeof(fmt_version_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Jdoc::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 doc_version = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          doc_version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 fmt_version = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          fmt_version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string client_metadata = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_client_metadata();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "jdocspb.Jdoc.client_metadata"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string json_doc = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_json_doc();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "jdocspb.Jdoc.json_doc"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Jdoc::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:jdocspb.Jdoc)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 doc_version = 1;
  if (this->doc_version() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_doc_version(), target);
  }

  // uint64 fmt_version = 2;
  if (this->fmt_version() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_fmt_version(), target);
  }

  // string client_metadata = 3;
  if (this->client_metadata().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_client_metadata().data(), static_cast<int>(this->_internal_client_metadata().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "jdocspb.Jdoc.client_metadata");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_client_metadata(), target);
  }

  // string json_doc = 4;
  if (this->json_doc().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_json_doc().data(), static_cast<int>(this->_internal_json_doc().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "jdocspb.Jdoc.json_doc");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_json_doc(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:jdocspb.Jdoc)
  return target;
}

size_t Jdoc::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:jdocspb.Jdoc)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string client_metadata = 3;
  if (this->client_metadata().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_client_metadata());
  }

  // string json_doc = 4;
  if (this->json_doc().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_json_doc());
  }

  // uint64 doc_version = 1;
  if (this->doc_version() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_doc_version());
  }

  // uint64 fmt_version = 2;
  if (this->fmt_version() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_fmt_version());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Jdoc::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:jdocspb.Jdoc)
  GOOGLE_DCHECK_NE(&from, this);
  const Jdoc* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Jdoc>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:jdocspb.Jdoc)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:jdocspb.Jdoc)
    MergeFrom(*source);
  }
}

void Jdoc::MergeFrom(const Jdoc& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:jdocspb.Jdoc)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.client_metadata().size() > 0) {
    _internal_set_client_metadata(from._internal_client_metadata());
  }
  if (from.json_doc().size() > 0) {
    _internal_set_json_doc(from._internal_json_doc());
  }
  if (from.doc_version() != 0) {
    _internal_set_doc_version(from._internal_doc_version());
  }
  if (from.fmt_version() != 0) {
    _internal_set_fmt_version(from._internal_fmt_version());
  }
}

void Jdoc::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:jdocspb.Jdoc)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Jdoc::CopyFrom(const Jdoc& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:jdocspb.Jdoc)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Jdoc::IsInitialized() const {
  return true;
}

void Jdoc::InternalSwap(Jdoc* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  client_metadata_.Swap(&other->client_metadata_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  json_doc_.Swap(&other->json_doc_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Jdoc, fmt_version_)
      + sizeof(Jdoc::fmt_version_)
      - PROTOBUF_FIELD_OFFSET(Jdoc, doc_version_)>(
          reinterpret_cast<char*>(&doc_version_),
          reinterpret_cast<char*>(&other->doc_version_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Jdoc::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void EchoReq::InitAsDefaultInstance() {
}
class EchoReq::_Internal {
 public:
};

EchoReq::EchoReq(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:jdocspb.EchoReq)
}
EchoReq::EchoReq(const EchoReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_data().empty()) {
    data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_data(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:jdocspb.EchoReq)
}

void EchoReq::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_EchoReq_jdocs_2eproto.base);
  data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

EchoReq::~EchoReq() {
  // @@protoc_insertion_point(destructor:jdocspb.EchoReq)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void EchoReq::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  data_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void EchoReq::ArenaDtor(void* object) {
  EchoReq* _this = reinterpret_cast< EchoReq* >(object);
  (void)_this;
}
void EchoReq::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void EchoReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const EchoReq& EchoReq::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_EchoReq_jdocs_2eproto.base);
  return *internal_default_instance();
}


void EchoReq::Clear() {
// @@protoc_insertion_point(message_clear_start:jdocspb.EchoReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  data_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EchoReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string Data = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_data();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "jdocspb.EchoReq.Data"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* EchoReq::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:jdocspb.EchoReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string Data = 1;
  if (this->data().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_data().data(), static_cast<int>(this->_internal_data().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "jdocspb.EchoReq.Data");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_data(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:jdocspb.EchoReq)
  return target;
}

size_t EchoReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:jdocspb.EchoReq)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string Data = 1;
  if (this->data().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_data());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EchoReq::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:jdocspb.EchoReq)
  GOOGLE_DCHECK_NE(&from, this);
  const EchoReq* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<EchoReq>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:jdocspb.EchoReq)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:jdocspb.EchoReq)
    MergeFrom(*source);
  }
}

void EchoReq::MergeFrom(const EchoReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:jdocspb.EchoReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.data().size() > 0) {
    _internal_set_data(from._internal_data());
  }
}

void EchoReq::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:jdocspb.EchoReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EchoReq::CopyFrom(const EchoReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:jdocspb.EchoReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EchoReq::IsInitialized() const {
  return true;
}

void EchoReq::InternalSwap(EchoReq* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  data_.Swap(&other->data_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata EchoReq::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void EchoResp::InitAsDefaultInstance() {
}
class EchoResp::_Internal {
 public:
};

EchoResp::EchoResp(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:jdocspb.EchoResp)
}
EchoResp::EchoResp(const EchoResp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_data().empty()) {
    data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_data(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:jdocspb.EchoResp)
}

void EchoResp::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_EchoResp_jdocs_2eproto.base);
  data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

EchoResp::~EchoResp() {
  // @@protoc_insertion_point(destructor:jdocspb.EchoResp)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void EchoResp::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  data_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void EchoResp::ArenaDtor(void* object) {
  EchoResp* _this = reinterpret_cast< EchoResp* >(object);
  (void)_this;
}
void EchoResp::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void EchoResp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const EchoResp& EchoResp::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_EchoResp_jdocs_2eproto.base);
  return *internal_default_instance();
}


void EchoResp::Clear() {
// @@protoc_insertion_point(message_clear_start:jdocspb.EchoResp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  data_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EchoResp::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string Data = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_data();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "jdocspb.EchoResp.Data"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* EchoResp::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:jdocspb.EchoResp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string Data = 1;
  if (this->data().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_data().data(), static_cast<int>(this->_internal_data().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "jdocspb.EchoResp.Data");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_data(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:jdocspb.EchoResp)
  return target;
}

size_t EchoResp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:jdocspb.EchoResp)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string Data = 1;
  if (this->data().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_data());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EchoResp::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:jdocspb.EchoResp)
  GOOGLE_DCHECK_NE(&from, this);
  const EchoResp* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<EchoResp>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:jdocspb.EchoResp)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:jdocspb.EchoResp)
    MergeFrom(*source);
  }
}

void EchoResp::MergeFrom(const EchoResp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:jdocspb.EchoResp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.data().size() > 0) {
    _internal_set_data(from._internal_data());
  }
}

void EchoResp::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:jdocspb.EchoResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EchoResp::CopyFrom(const EchoResp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:jdocspb.EchoResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EchoResp::IsInitialized() const {
  return true;
}

void EchoResp::InternalSwap(EchoResp* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  data_.Swap(&other->data_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata EchoResp::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void WriteDocReq::InitAsDefaultInstance() {
  ::jdocspb::_WriteDocReq_default_instance_._instance.get_mutable()->doc_ = const_cast< ::jdocspb::Jdoc*>(
      ::jdocspb::Jdoc::internal_default_instance());
}
class WriteDocReq::_Internal {
 public:
  static const ::jdocspb::Jdoc& doc(const WriteDocReq* msg);
};

const ::jdocspb::Jdoc&
WriteDocReq::_Internal::doc(const WriteDocReq* msg) {
  return *msg->doc_;
}
WriteDocReq::WriteDocReq(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:jdocspb.WriteDocReq)
}
WriteDocReq::WriteDocReq(const WriteDocReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  user_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_user_id().empty()) {
    user_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_user_id(),
      GetArena());
  }
  thing_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_thing().empty()) {
    thing_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_thing(),
      GetArena());
  }
  doc_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_doc_name().empty()) {
    doc_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_doc_name(),
      GetArena());
  }
  if (from._internal_has_doc()) {
    doc_ = new ::jdocspb::Jdoc(*from.doc_);
  } else {
    doc_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:jdocspb.WriteDocReq)
}

void WriteDocReq::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_WriteDocReq_jdocs_2eproto.base);
  user_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  thing_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  doc_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  doc_ = nullptr;
}

WriteDocReq::~WriteDocReq() {
  // @@protoc_insertion_point(destructor:jdocspb.WriteDocReq)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void WriteDocReq::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  user_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  thing_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  doc_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete doc_;
}

void WriteDocReq::ArenaDtor(void* object) {
  WriteDocReq* _this = reinterpret_cast< WriteDocReq* >(object);
  (void)_this;
}
void WriteDocReq::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void WriteDocReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const WriteDocReq& WriteDocReq::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_WriteDocReq_jdocs_2eproto.base);
  return *internal_default_instance();
}


void WriteDocReq::Clear() {
// @@protoc_insertion_point(message_clear_start:jdocspb.WriteDocReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  user_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  thing_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  doc_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && doc_ != nullptr) {
    delete doc_;
  }
  doc_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* WriteDocReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string user_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_user_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "jdocspb.WriteDocReq.user_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string thing = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_thing();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "jdocspb.WriteDocReq.thing"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string doc_name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_doc_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "jdocspb.WriteDocReq.doc_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .jdocspb.Jdoc doc = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_doc(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* WriteDocReq::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:jdocspb.WriteDocReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string user_id = 1;
  if (this->user_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_user_id().data(), static_cast<int>(this->_internal_user_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "jdocspb.WriteDocReq.user_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_user_id(), target);
  }

  // string thing = 2;
  if (this->thing().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_thing().data(), static_cast<int>(this->_internal_thing().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "jdocspb.WriteDocReq.thing");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_thing(), target);
  }

  // string doc_name = 3;
  if (this->doc_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_doc_name().data(), static_cast<int>(this->_internal_doc_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "jdocspb.WriteDocReq.doc_name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_doc_name(), target);
  }

  // .jdocspb.Jdoc doc = 4;
  if (this->has_doc()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::doc(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:jdocspb.WriteDocReq)
  return target;
}

size_t WriteDocReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:jdocspb.WriteDocReq)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string user_id = 1;
  if (this->user_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_user_id());
  }

  // string thing = 2;
  if (this->thing().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_thing());
  }

  // string doc_name = 3;
  if (this->doc_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_doc_name());
  }

  // .jdocspb.Jdoc doc = 4;
  if (this->has_doc()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *doc_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void WriteDocReq::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:jdocspb.WriteDocReq)
  GOOGLE_DCHECK_NE(&from, this);
  const WriteDocReq* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<WriteDocReq>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:jdocspb.WriteDocReq)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:jdocspb.WriteDocReq)
    MergeFrom(*source);
  }
}

void WriteDocReq::MergeFrom(const WriteDocReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:jdocspb.WriteDocReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.user_id().size() > 0) {
    _internal_set_user_id(from._internal_user_id());
  }
  if (from.thing().size() > 0) {
    _internal_set_thing(from._internal_thing());
  }
  if (from.doc_name().size() > 0) {
    _internal_set_doc_name(from._internal_doc_name());
  }
  if (from.has_doc()) {
    _internal_mutable_doc()->::jdocspb::Jdoc::MergeFrom(from._internal_doc());
  }
}

void WriteDocReq::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:jdocspb.WriteDocReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WriteDocReq::CopyFrom(const WriteDocReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:jdocspb.WriteDocReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WriteDocReq::IsInitialized() const {
  return true;
}

void WriteDocReq::InternalSwap(WriteDocReq* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  user_id_.Swap(&other->user_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  thing_.Swap(&other->thing_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  doc_name_.Swap(&other->doc_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(doc_, other->doc_);
}

::PROTOBUF_NAMESPACE_ID::Metadata WriteDocReq::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void WriteDocResp::InitAsDefaultInstance() {
}
class WriteDocResp::_Internal {
 public:
};

WriteDocResp::WriteDocResp(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:jdocspb.WriteDocResp)
}
WriteDocResp::WriteDocResp(const WriteDocResp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&latest_doc_version_, &from.latest_doc_version_,
    static_cast<size_t>(reinterpret_cast<char*>(&status_) -
    reinterpret_cast<char*>(&latest_doc_version_)) + sizeof(status_));
  // @@protoc_insertion_point(copy_constructor:jdocspb.WriteDocResp)
}

void WriteDocResp::SharedCtor() {
  ::memset(&latest_doc_version_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&status_) -
      reinterpret_cast<char*>(&latest_doc_version_)) + sizeof(status_));
}

WriteDocResp::~WriteDocResp() {
  // @@protoc_insertion_point(destructor:jdocspb.WriteDocResp)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void WriteDocResp::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void WriteDocResp::ArenaDtor(void* object) {
  WriteDocResp* _this = reinterpret_cast< WriteDocResp* >(object);
  (void)_this;
}
void WriteDocResp::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void WriteDocResp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const WriteDocResp& WriteDocResp::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_WriteDocResp_jdocs_2eproto.base);
  return *internal_default_instance();
}


void WriteDocResp::Clear() {
// @@protoc_insertion_point(message_clear_start:jdocspb.WriteDocResp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&latest_doc_version_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&status_) -
      reinterpret_cast<char*>(&latest_doc_version_)) + sizeof(status_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* WriteDocResp::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .jdocspb.WriteDocResp.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_status(static_cast<::jdocspb::WriteDocResp_Status>(val));
        } else goto handle_unusual;
        continue;
      // uint64 latest_doc_version = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          latest_doc_version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* WriteDocResp::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:jdocspb.WriteDocResp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .jdocspb.WriteDocResp.Status status = 1;
  if (this->status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_status(), target);
  }

  // uint64 latest_doc_version = 2;
  if (this->latest_doc_version() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_latest_doc_version(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:jdocspb.WriteDocResp)
  return target;
}

size_t WriteDocResp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:jdocspb.WriteDocResp)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 latest_doc_version = 2;
  if (this->latest_doc_version() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_latest_doc_version());
  }

  // .jdocspb.WriteDocResp.Status status = 1;
  if (this->status() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_status());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void WriteDocResp::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:jdocspb.WriteDocResp)
  GOOGLE_DCHECK_NE(&from, this);
  const WriteDocResp* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<WriteDocResp>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:jdocspb.WriteDocResp)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:jdocspb.WriteDocResp)
    MergeFrom(*source);
  }
}

void WriteDocResp::MergeFrom(const WriteDocResp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:jdocspb.WriteDocResp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.latest_doc_version() != 0) {
    _internal_set_latest_doc_version(from._internal_latest_doc_version());
  }
  if (from.status() != 0) {
    _internal_set_status(from._internal_status());
  }
}

void WriteDocResp::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:jdocspb.WriteDocResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WriteDocResp::CopyFrom(const WriteDocResp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:jdocspb.WriteDocResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WriteDocResp::IsInitialized() const {
  return true;
}

void WriteDocResp::InternalSwap(WriteDocResp* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(WriteDocResp, status_)
      + sizeof(WriteDocResp::status_)
      - PROTOBUF_FIELD_OFFSET(WriteDocResp, latest_doc_version_)>(
          reinterpret_cast<char*>(&latest_doc_version_),
          reinterpret_cast<char*>(&other->latest_doc_version_));
}

::PROTOBUF_NAMESPACE_ID::Metadata WriteDocResp::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ReadDocsReq_Item::InitAsDefaultInstance() {
}
class ReadDocsReq_Item::_Internal {
 public:
};

ReadDocsReq_Item::ReadDocsReq_Item(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:jdocspb.ReadDocsReq.Item)
}
ReadDocsReq_Item::ReadDocsReq_Item(const ReadDocsReq_Item& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  doc_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_doc_name().empty()) {
    doc_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_doc_name(),
      GetArena());
  }
  my_doc_version_ = from.my_doc_version_;
  // @@protoc_insertion_point(copy_constructor:jdocspb.ReadDocsReq.Item)
}

void ReadDocsReq_Item::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ReadDocsReq_Item_jdocs_2eproto.base);
  doc_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  my_doc_version_ = PROTOBUF_ULONGLONG(0);
}

ReadDocsReq_Item::~ReadDocsReq_Item() {
  // @@protoc_insertion_point(destructor:jdocspb.ReadDocsReq.Item)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ReadDocsReq_Item::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  doc_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ReadDocsReq_Item::ArenaDtor(void* object) {
  ReadDocsReq_Item* _this = reinterpret_cast< ReadDocsReq_Item* >(object);
  (void)_this;
}
void ReadDocsReq_Item::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ReadDocsReq_Item::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ReadDocsReq_Item& ReadDocsReq_Item::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ReadDocsReq_Item_jdocs_2eproto.base);
  return *internal_default_instance();
}


void ReadDocsReq_Item::Clear() {
// @@protoc_insertion_point(message_clear_start:jdocspb.ReadDocsReq.Item)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  doc_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  my_doc_version_ = PROTOBUF_ULONGLONG(0);
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReadDocsReq_Item::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string doc_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_doc_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "jdocspb.ReadDocsReq.Item.doc_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 my_doc_version = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          my_doc_version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ReadDocsReq_Item::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:jdocspb.ReadDocsReq.Item)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string doc_name = 1;
  if (this->doc_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_doc_name().data(), static_cast<int>(this->_internal_doc_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "jdocspb.ReadDocsReq.Item.doc_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_doc_name(), target);
  }

  // uint64 my_doc_version = 2;
  if (this->my_doc_version() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_my_doc_version(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:jdocspb.ReadDocsReq.Item)
  return target;
}

size_t ReadDocsReq_Item::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:jdocspb.ReadDocsReq.Item)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string doc_name = 1;
  if (this->doc_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_doc_name());
  }

  // uint64 my_doc_version = 2;
  if (this->my_doc_version() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_my_doc_version());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReadDocsReq_Item::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:jdocspb.ReadDocsReq.Item)
  GOOGLE_DCHECK_NE(&from, this);
  const ReadDocsReq_Item* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ReadDocsReq_Item>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:jdocspb.ReadDocsReq.Item)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:jdocspb.ReadDocsReq.Item)
    MergeFrom(*source);
  }
}

void ReadDocsReq_Item::MergeFrom(const ReadDocsReq_Item& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:jdocspb.ReadDocsReq.Item)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.doc_name().size() > 0) {
    _internal_set_doc_name(from._internal_doc_name());
  }
  if (from.my_doc_version() != 0) {
    _internal_set_my_doc_version(from._internal_my_doc_version());
  }
}

void ReadDocsReq_Item::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:jdocspb.ReadDocsReq.Item)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReadDocsReq_Item::CopyFrom(const ReadDocsReq_Item& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:jdocspb.ReadDocsReq.Item)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReadDocsReq_Item::IsInitialized() const {
  return true;
}

void ReadDocsReq_Item::InternalSwap(ReadDocsReq_Item* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  doc_name_.Swap(&other->doc_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(my_doc_version_, other->my_doc_version_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ReadDocsReq_Item::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ReadDocsReq::InitAsDefaultInstance() {
}
class ReadDocsReq::_Internal {
 public:
};

ReadDocsReq::ReadDocsReq(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  items_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:jdocspb.ReadDocsReq)
}
ReadDocsReq::ReadDocsReq(const ReadDocsReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      items_(from.items_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  user_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_user_id().empty()) {
    user_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_user_id(),
      GetArena());
  }
  thing_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_thing().empty()) {
    thing_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_thing(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:jdocspb.ReadDocsReq)
}

void ReadDocsReq::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ReadDocsReq_jdocs_2eproto.base);
  user_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  thing_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

ReadDocsReq::~ReadDocsReq() {
  // @@protoc_insertion_point(destructor:jdocspb.ReadDocsReq)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ReadDocsReq::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  user_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  thing_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ReadDocsReq::ArenaDtor(void* object) {
  ReadDocsReq* _this = reinterpret_cast< ReadDocsReq* >(object);
  (void)_this;
}
void ReadDocsReq::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ReadDocsReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ReadDocsReq& ReadDocsReq::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ReadDocsReq_jdocs_2eproto.base);
  return *internal_default_instance();
}


void ReadDocsReq::Clear() {
// @@protoc_insertion_point(message_clear_start:jdocspb.ReadDocsReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  items_.Clear();
  user_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  thing_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReadDocsReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string user_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_user_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "jdocspb.ReadDocsReq.user_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string thing = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_thing();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "jdocspb.ReadDocsReq.thing"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .jdocspb.ReadDocsReq.Item items = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_items(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ReadDocsReq::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:jdocspb.ReadDocsReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string user_id = 1;
  if (this->user_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_user_id().data(), static_cast<int>(this->_internal_user_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "jdocspb.ReadDocsReq.user_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_user_id(), target);
  }

  // string thing = 2;
  if (this->thing().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_thing().data(), static_cast<int>(this->_internal_thing().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "jdocspb.ReadDocsReq.thing");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_thing(), target);
  }

  // repeated .jdocspb.ReadDocsReq.Item items = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_items_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_items(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:jdocspb.ReadDocsReq)
  return target;
}

size_t ReadDocsReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:jdocspb.ReadDocsReq)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .jdocspb.ReadDocsReq.Item items = 3;
  total_size += 1UL * this->_internal_items_size();
  for (const auto& msg : this->items_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string user_id = 1;
  if (this->user_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_user_id());
  }

  // string thing = 2;
  if (this->thing().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_thing());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReadDocsReq::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:jdocspb.ReadDocsReq)
  GOOGLE_DCHECK_NE(&from, this);
  const ReadDocsReq* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ReadDocsReq>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:jdocspb.ReadDocsReq)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:jdocspb.ReadDocsReq)
    MergeFrom(*source);
  }
}

void ReadDocsReq::MergeFrom(const ReadDocsReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:jdocspb.ReadDocsReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  items_.MergeFrom(from.items_);
  if (from.user_id().size() > 0) {
    _internal_set_user_id(from._internal_user_id());
  }
  if (from.thing().size() > 0) {
    _internal_set_thing(from._internal_thing());
  }
}

void ReadDocsReq::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:jdocspb.ReadDocsReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReadDocsReq::CopyFrom(const ReadDocsReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:jdocspb.ReadDocsReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReadDocsReq::IsInitialized() const {
  return true;
}

void ReadDocsReq::InternalSwap(ReadDocsReq* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  items_.InternalSwap(&other->items_);
  user_id_.Swap(&other->user_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  thing_.Swap(&other->thing_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata ReadDocsReq::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ReadDocsResp_Item::InitAsDefaultInstance() {
  ::jdocspb::_ReadDocsResp_Item_default_instance_._instance.get_mutable()->doc_ = const_cast< ::jdocspb::Jdoc*>(
      ::jdocspb::Jdoc::internal_default_instance());
}
class ReadDocsResp_Item::_Internal {
 public:
  static const ::jdocspb::Jdoc& doc(const ReadDocsResp_Item* msg);
};

const ::jdocspb::Jdoc&
ReadDocsResp_Item::_Internal::doc(const ReadDocsResp_Item* msg) {
  return *msg->doc_;
}
ReadDocsResp_Item::ReadDocsResp_Item(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:jdocspb.ReadDocsResp.Item)
}
ReadDocsResp_Item::ReadDocsResp_Item(const ReadDocsResp_Item& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_doc()) {
    doc_ = new ::jdocspb::Jdoc(*from.doc_);
  } else {
    doc_ = nullptr;
  }
  status_ = from.status_;
  // @@protoc_insertion_point(copy_constructor:jdocspb.ReadDocsResp.Item)
}

void ReadDocsResp_Item::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ReadDocsResp_Item_jdocs_2eproto.base);
  ::memset(&doc_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&status_) -
      reinterpret_cast<char*>(&doc_)) + sizeof(status_));
}

ReadDocsResp_Item::~ReadDocsResp_Item() {
  // @@protoc_insertion_point(destructor:jdocspb.ReadDocsResp.Item)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ReadDocsResp_Item::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete doc_;
}

void ReadDocsResp_Item::ArenaDtor(void* object) {
  ReadDocsResp_Item* _this = reinterpret_cast< ReadDocsResp_Item* >(object);
  (void)_this;
}
void ReadDocsResp_Item::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ReadDocsResp_Item::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ReadDocsResp_Item& ReadDocsResp_Item::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ReadDocsResp_Item_jdocs_2eproto.base);
  return *internal_default_instance();
}


void ReadDocsResp_Item::Clear() {
// @@protoc_insertion_point(message_clear_start:jdocspb.ReadDocsResp.Item)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && doc_ != nullptr) {
    delete doc_;
  }
  doc_ = nullptr;
  status_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReadDocsResp_Item::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .jdocspb.ReadDocsResp.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_status(static_cast<::jdocspb::ReadDocsResp_Status>(val));
        } else goto handle_unusual;
        continue;
      // .jdocspb.Jdoc doc = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_doc(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ReadDocsResp_Item::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:jdocspb.ReadDocsResp.Item)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .jdocspb.ReadDocsResp.Status status = 1;
  if (this->status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_status(), target);
  }

  // .jdocspb.Jdoc doc = 2;
  if (this->has_doc()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::doc(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:jdocspb.ReadDocsResp.Item)
  return target;
}

size_t ReadDocsResp_Item::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:jdocspb.ReadDocsResp.Item)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .jdocspb.Jdoc doc = 2;
  if (this->has_doc()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *doc_);
  }

  // .jdocspb.ReadDocsResp.Status status = 1;
  if (this->status() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_status());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReadDocsResp_Item::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:jdocspb.ReadDocsResp.Item)
  GOOGLE_DCHECK_NE(&from, this);
  const ReadDocsResp_Item* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ReadDocsResp_Item>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:jdocspb.ReadDocsResp.Item)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:jdocspb.ReadDocsResp.Item)
    MergeFrom(*source);
  }
}

void ReadDocsResp_Item::MergeFrom(const ReadDocsResp_Item& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:jdocspb.ReadDocsResp.Item)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_doc()) {
    _internal_mutable_doc()->::jdocspb::Jdoc::MergeFrom(from._internal_doc());
  }
  if (from.status() != 0) {
    _internal_set_status(from._internal_status());
  }
}

void ReadDocsResp_Item::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:jdocspb.ReadDocsResp.Item)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReadDocsResp_Item::CopyFrom(const ReadDocsResp_Item& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:jdocspb.ReadDocsResp.Item)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReadDocsResp_Item::IsInitialized() const {
  return true;
}

void ReadDocsResp_Item::InternalSwap(ReadDocsResp_Item* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ReadDocsResp_Item, status_)
      + sizeof(ReadDocsResp_Item::status_)
      - PROTOBUF_FIELD_OFFSET(ReadDocsResp_Item, doc_)>(
          reinterpret_cast<char*>(&doc_),
          reinterpret_cast<char*>(&other->doc_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ReadDocsResp_Item::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ReadDocsResp::InitAsDefaultInstance() {
}
class ReadDocsResp::_Internal {
 public:
};

ReadDocsResp::ReadDocsResp(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  items_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:jdocspb.ReadDocsResp)
}
ReadDocsResp::ReadDocsResp(const ReadDocsResp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      items_(from.items_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:jdocspb.ReadDocsResp)
}

void ReadDocsResp::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ReadDocsResp_jdocs_2eproto.base);
}

ReadDocsResp::~ReadDocsResp() {
  // @@protoc_insertion_point(destructor:jdocspb.ReadDocsResp)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ReadDocsResp::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ReadDocsResp::ArenaDtor(void* object) {
  ReadDocsResp* _this = reinterpret_cast< ReadDocsResp* >(object);
  (void)_this;
}
void ReadDocsResp::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ReadDocsResp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ReadDocsResp& ReadDocsResp::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ReadDocsResp_jdocs_2eproto.base);
  return *internal_default_instance();
}


void ReadDocsResp::Clear() {
// @@protoc_insertion_point(message_clear_start:jdocspb.ReadDocsResp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  items_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReadDocsResp::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .jdocspb.ReadDocsResp.Item items = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_items(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ReadDocsResp::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:jdocspb.ReadDocsResp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .jdocspb.ReadDocsResp.Item items = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_items_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_items(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:jdocspb.ReadDocsResp)
  return target;
}

size_t ReadDocsResp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:jdocspb.ReadDocsResp)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .jdocspb.ReadDocsResp.Item items = 1;
  total_size += 1UL * this->_internal_items_size();
  for (const auto& msg : this->items_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReadDocsResp::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:jdocspb.ReadDocsResp)
  GOOGLE_DCHECK_NE(&from, this);
  const ReadDocsResp* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ReadDocsResp>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:jdocspb.ReadDocsResp)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:jdocspb.ReadDocsResp)
    MergeFrom(*source);
  }
}

void ReadDocsResp::MergeFrom(const ReadDocsResp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:jdocspb.ReadDocsResp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  items_.MergeFrom(from.items_);
}

void ReadDocsResp::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:jdocspb.ReadDocsResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReadDocsResp::CopyFrom(const ReadDocsResp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:jdocspb.ReadDocsResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReadDocsResp::IsInitialized() const {
  return true;
}

void ReadDocsResp::InternalSwap(ReadDocsResp* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  items_.InternalSwap(&other->items_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ReadDocsResp::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DeleteDocReq::InitAsDefaultInstance() {
}
class DeleteDocReq::_Internal {
 public:
};

DeleteDocReq::DeleteDocReq(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:jdocspb.DeleteDocReq)
}
DeleteDocReq::DeleteDocReq(const DeleteDocReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  user_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_user_id().empty()) {
    user_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_user_id(),
      GetArena());
  }
  thing_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_thing().empty()) {
    thing_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_thing(),
      GetArena());
  }
  doc_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_doc_name().empty()) {
    doc_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_doc_name(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:jdocspb.DeleteDocReq)
}

void DeleteDocReq::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DeleteDocReq_jdocs_2eproto.base);
  user_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  thing_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  doc_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

DeleteDocReq::~DeleteDocReq() {
  // @@protoc_insertion_point(destructor:jdocspb.DeleteDocReq)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DeleteDocReq::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  user_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  thing_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  doc_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void DeleteDocReq::ArenaDtor(void* object) {
  DeleteDocReq* _this = reinterpret_cast< DeleteDocReq* >(object);
  (void)_this;
}
void DeleteDocReq::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DeleteDocReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DeleteDocReq& DeleteDocReq::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DeleteDocReq_jdocs_2eproto.base);
  return *internal_default_instance();
}


void DeleteDocReq::Clear() {
// @@protoc_insertion_point(message_clear_start:jdocspb.DeleteDocReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  user_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  thing_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  doc_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DeleteDocReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string user_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_user_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "jdocspb.DeleteDocReq.user_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string thing = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_thing();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "jdocspb.DeleteDocReq.thing"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string doc_name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_doc_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "jdocspb.DeleteDocReq.doc_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DeleteDocReq::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:jdocspb.DeleteDocReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string user_id = 1;
  if (this->user_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_user_id().data(), static_cast<int>(this->_internal_user_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "jdocspb.DeleteDocReq.user_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_user_id(), target);
  }

  // string thing = 2;
  if (this->thing().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_thing().data(), static_cast<int>(this->_internal_thing().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "jdocspb.DeleteDocReq.thing");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_thing(), target);
  }

  // string doc_name = 3;
  if (this->doc_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_doc_name().data(), static_cast<int>(this->_internal_doc_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "jdocspb.DeleteDocReq.doc_name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_doc_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:jdocspb.DeleteDocReq)
  return target;
}

size_t DeleteDocReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:jdocspb.DeleteDocReq)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string user_id = 1;
  if (this->user_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_user_id());
  }

  // string thing = 2;
  if (this->thing().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_thing());
  }

  // string doc_name = 3;
  if (this->doc_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_doc_name());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DeleteDocReq::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:jdocspb.DeleteDocReq)
  GOOGLE_DCHECK_NE(&from, this);
  const DeleteDocReq* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DeleteDocReq>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:jdocspb.DeleteDocReq)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:jdocspb.DeleteDocReq)
    MergeFrom(*source);
  }
}

void DeleteDocReq::MergeFrom(const DeleteDocReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:jdocspb.DeleteDocReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.user_id().size() > 0) {
    _internal_set_user_id(from._internal_user_id());
  }
  if (from.thing().size() > 0) {
    _internal_set_thing(from._internal_thing());
  }
  if (from.doc_name().size() > 0) {
    _internal_set_doc_name(from._internal_doc_name());
  }
}

void DeleteDocReq::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:jdocspb.DeleteDocReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeleteDocReq::CopyFrom(const DeleteDocReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:jdocspb.DeleteDocReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteDocReq::IsInitialized() const {
  return true;
}

void DeleteDocReq::InternalSwap(DeleteDocReq* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  user_id_.Swap(&other->user_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  thing_.Swap(&other->thing_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  doc_name_.Swap(&other->doc_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata DeleteDocReq::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DeleteDocResp::InitAsDefaultInstance() {
}
class DeleteDocResp::_Internal {
 public:
};

DeleteDocResp::DeleteDocResp(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:jdocspb.DeleteDocResp)
}
DeleteDocResp::DeleteDocResp(const DeleteDocResp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:jdocspb.DeleteDocResp)
}

void DeleteDocResp::SharedCtor() {
}

DeleteDocResp::~DeleteDocResp() {
  // @@protoc_insertion_point(destructor:jdocspb.DeleteDocResp)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DeleteDocResp::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void DeleteDocResp::ArenaDtor(void* object) {
  DeleteDocResp* _this = reinterpret_cast< DeleteDocResp* >(object);
  (void)_this;
}
void DeleteDocResp::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DeleteDocResp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DeleteDocResp& DeleteDocResp::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DeleteDocResp_jdocs_2eproto.base);
  return *internal_default_instance();
}


void DeleteDocResp::Clear() {
// @@protoc_insertion_point(message_clear_start:jdocspb.DeleteDocResp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DeleteDocResp::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DeleteDocResp::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:jdocspb.DeleteDocResp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:jdocspb.DeleteDocResp)
  return target;
}

size_t DeleteDocResp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:jdocspb.DeleteDocResp)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DeleteDocResp::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:jdocspb.DeleteDocResp)
  GOOGLE_DCHECK_NE(&from, this);
  const DeleteDocResp* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DeleteDocResp>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:jdocspb.DeleteDocResp)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:jdocspb.DeleteDocResp)
    MergeFrom(*source);
  }
}

void DeleteDocResp::MergeFrom(const DeleteDocResp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:jdocspb.DeleteDocResp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void DeleteDocResp::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:jdocspb.DeleteDocResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeleteDocResp::CopyFrom(const DeleteDocResp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:jdocspb.DeleteDocResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteDocResp::IsInitialized() const {
  return true;
}

void DeleteDocResp::InternalSwap(DeleteDocResp* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DeleteDocResp::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PurgeAccountDocsReq::InitAsDefaultInstance() {
}
class PurgeAccountDocsReq::_Internal {
 public:
};

PurgeAccountDocsReq::PurgeAccountDocsReq(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:jdocspb.PurgeAccountDocsReq)
}
PurgeAccountDocsReq::PurgeAccountDocsReq(const PurgeAccountDocsReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  user_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_user_id().empty()) {
    user_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_user_id(),
      GetArena());
  }
  reason_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_reason().empty()) {
    reason_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_reason(),
      GetArena());
  }
  notes_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_notes().empty()) {
    notes_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_notes(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:jdocspb.PurgeAccountDocsReq)
}

void PurgeAccountDocsReq::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PurgeAccountDocsReq_jdocs_2eproto.base);
  user_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  reason_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  notes_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

PurgeAccountDocsReq::~PurgeAccountDocsReq() {
  // @@protoc_insertion_point(destructor:jdocspb.PurgeAccountDocsReq)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PurgeAccountDocsReq::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  user_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  reason_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  notes_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void PurgeAccountDocsReq::ArenaDtor(void* object) {
  PurgeAccountDocsReq* _this = reinterpret_cast< PurgeAccountDocsReq* >(object);
  (void)_this;
}
void PurgeAccountDocsReq::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PurgeAccountDocsReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PurgeAccountDocsReq& PurgeAccountDocsReq::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PurgeAccountDocsReq_jdocs_2eproto.base);
  return *internal_default_instance();
}


void PurgeAccountDocsReq::Clear() {
// @@protoc_insertion_point(message_clear_start:jdocspb.PurgeAccountDocsReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  user_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  reason_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  notes_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PurgeAccountDocsReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string user_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_user_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "jdocspb.PurgeAccountDocsReq.user_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string reason = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_reason();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "jdocspb.PurgeAccountDocsReq.reason"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string notes = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_notes();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "jdocspb.PurgeAccountDocsReq.notes"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PurgeAccountDocsReq::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:jdocspb.PurgeAccountDocsReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string user_id = 1;
  if (this->user_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_user_id().data(), static_cast<int>(this->_internal_user_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "jdocspb.PurgeAccountDocsReq.user_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_user_id(), target);
  }

  // string reason = 2;
  if (this->reason().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_reason().data(), static_cast<int>(this->_internal_reason().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "jdocspb.PurgeAccountDocsReq.reason");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_reason(), target);
  }

  // string notes = 3;
  if (this->notes().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_notes().data(), static_cast<int>(this->_internal_notes().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "jdocspb.PurgeAccountDocsReq.notes");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_notes(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:jdocspb.PurgeAccountDocsReq)
  return target;
}

size_t PurgeAccountDocsReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:jdocspb.PurgeAccountDocsReq)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string user_id = 1;
  if (this->user_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_user_id());
  }

  // string reason = 2;
  if (this->reason().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_reason());
  }

  // string notes = 3;
  if (this->notes().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_notes());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PurgeAccountDocsReq::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:jdocspb.PurgeAccountDocsReq)
  GOOGLE_DCHECK_NE(&from, this);
  const PurgeAccountDocsReq* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PurgeAccountDocsReq>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:jdocspb.PurgeAccountDocsReq)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:jdocspb.PurgeAccountDocsReq)
    MergeFrom(*source);
  }
}

void PurgeAccountDocsReq::MergeFrom(const PurgeAccountDocsReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:jdocspb.PurgeAccountDocsReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.user_id().size() > 0) {
    _internal_set_user_id(from._internal_user_id());
  }
  if (from.reason().size() > 0) {
    _internal_set_reason(from._internal_reason());
  }
  if (from.notes().size() > 0) {
    _internal_set_notes(from._internal_notes());
  }
}

void PurgeAccountDocsReq::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:jdocspb.PurgeAccountDocsReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PurgeAccountDocsReq::CopyFrom(const PurgeAccountDocsReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:jdocspb.PurgeAccountDocsReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PurgeAccountDocsReq::IsInitialized() const {
  return true;
}

void PurgeAccountDocsReq::InternalSwap(PurgeAccountDocsReq* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  user_id_.Swap(&other->user_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  reason_.Swap(&other->reason_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  notes_.Swap(&other->notes_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata PurgeAccountDocsReq::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PurgeAccountDocsResp::InitAsDefaultInstance() {
}
class PurgeAccountDocsResp::_Internal {
 public:
};

PurgeAccountDocsResp::PurgeAccountDocsResp(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:jdocspb.PurgeAccountDocsResp)
}
PurgeAccountDocsResp::PurgeAccountDocsResp(const PurgeAccountDocsResp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:jdocspb.PurgeAccountDocsResp)
}

void PurgeAccountDocsResp::SharedCtor() {
}

PurgeAccountDocsResp::~PurgeAccountDocsResp() {
  // @@protoc_insertion_point(destructor:jdocspb.PurgeAccountDocsResp)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PurgeAccountDocsResp::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void PurgeAccountDocsResp::ArenaDtor(void* object) {
  PurgeAccountDocsResp* _this = reinterpret_cast< PurgeAccountDocsResp* >(object);
  (void)_this;
}
void PurgeAccountDocsResp::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PurgeAccountDocsResp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PurgeAccountDocsResp& PurgeAccountDocsResp::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PurgeAccountDocsResp_jdocs_2eproto.base);
  return *internal_default_instance();
}


void PurgeAccountDocsResp::Clear() {
// @@protoc_insertion_point(message_clear_start:jdocspb.PurgeAccountDocsResp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PurgeAccountDocsResp::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PurgeAccountDocsResp::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:jdocspb.PurgeAccountDocsResp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:jdocspb.PurgeAccountDocsResp)
  return target;
}

size_t PurgeAccountDocsResp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:jdocspb.PurgeAccountDocsResp)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PurgeAccountDocsResp::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:jdocspb.PurgeAccountDocsResp)
  GOOGLE_DCHECK_NE(&from, this);
  const PurgeAccountDocsResp* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PurgeAccountDocsResp>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:jdocspb.PurgeAccountDocsResp)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:jdocspb.PurgeAccountDocsResp)
    MergeFrom(*source);
  }
}

void PurgeAccountDocsResp::MergeFrom(const PurgeAccountDocsResp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:jdocspb.PurgeAccountDocsResp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void PurgeAccountDocsResp::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:jdocspb.PurgeAccountDocsResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PurgeAccountDocsResp::CopyFrom(const PurgeAccountDocsResp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:jdocspb.PurgeAccountDocsResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PurgeAccountDocsResp::IsInitialized() const {
  return true;
}

void PurgeAccountDocsResp::InternalSwap(PurgeAccountDocsResp* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PurgeAccountDocsResp::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ViewDoc::InitAsDefaultInstance() {
}
class ViewDoc::_Internal {
 public:
};

ViewDoc::ViewDoc(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:jdocspb.ViewDoc)
}
ViewDoc::ViewDoc(const ViewDoc& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  user_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_user_id().empty()) {
    user_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_user_id(),
      GetArena());
  }
  thing_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_thing().empty()) {
    thing_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_thing(),
      GetArena());
  }
  doc_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_doc_name().empty()) {
    doc_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_doc_name(),
      GetArena());
  }
  json_doc_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_json_doc().empty()) {
    json_doc_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_json_doc(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:jdocspb.ViewDoc)
}

void ViewDoc::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ViewDoc_jdocs_2eproto.base);
  user_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  thing_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  doc_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  json_doc_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

ViewDoc::~ViewDoc() {
  // @@protoc_insertion_point(destructor:jdocspb.ViewDoc)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ViewDoc::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  user_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  thing_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  doc_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  json_doc_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ViewDoc::ArenaDtor(void* object) {
  ViewDoc* _this = reinterpret_cast< ViewDoc* >(object);
  (void)_this;
}
void ViewDoc::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ViewDoc::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ViewDoc& ViewDoc::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ViewDoc_jdocs_2eproto.base);
  return *internal_default_instance();
}


void ViewDoc::Clear() {
// @@protoc_insertion_point(message_clear_start:jdocspb.ViewDoc)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  user_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  thing_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  doc_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  json_doc_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ViewDoc::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string user_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_user_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "jdocspb.ViewDoc.user_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string thing = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_thing();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "jdocspb.ViewDoc.thing"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string doc_name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_doc_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "jdocspb.ViewDoc.doc_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string json_doc = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_json_doc();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "jdocspb.ViewDoc.json_doc"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ViewDoc::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:jdocspb.ViewDoc)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string user_id = 1;
  if (this->user_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_user_id().data(), static_cast<int>(this->_internal_user_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "jdocspb.ViewDoc.user_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_user_id(), target);
  }

  // string thing = 2;
  if (this->thing().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_thing().data(), static_cast<int>(this->_internal_thing().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "jdocspb.ViewDoc.thing");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_thing(), target);
  }

  // string doc_name = 3;
  if (this->doc_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_doc_name().data(), static_cast<int>(this->_internal_doc_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "jdocspb.ViewDoc.doc_name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_doc_name(), target);
  }

  // string json_doc = 4;
  if (this->json_doc().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_json_doc().data(), static_cast<int>(this->_internal_json_doc().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "jdocspb.ViewDoc.json_doc");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_json_doc(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:jdocspb.ViewDoc)
  return target;
}

size_t ViewDoc::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:jdocspb.ViewDoc)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string user_id = 1;
  if (this->user_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_user_id());
  }

  // string thing = 2;
  if (this->thing().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_thing());
  }

  // string doc_name = 3;
  if (this->doc_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_doc_name());
  }

  // string json_doc = 4;
  if (this->json_doc().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_json_doc());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ViewDoc::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:jdocspb.ViewDoc)
  GOOGLE_DCHECK_NE(&from, this);
  const ViewDoc* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ViewDoc>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:jdocspb.ViewDoc)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:jdocspb.ViewDoc)
    MergeFrom(*source);
  }
}

void ViewDoc::MergeFrom(const ViewDoc& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:jdocspb.ViewDoc)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.user_id().size() > 0) {
    _internal_set_user_id(from._internal_user_id());
  }
  if (from.thing().size() > 0) {
    _internal_set_thing(from._internal_thing());
  }
  if (from.doc_name().size() > 0) {
    _internal_set_doc_name(from._internal_doc_name());
  }
  if (from.json_doc().size() > 0) {
    _internal_set_json_doc(from._internal_json_doc());
  }
}

void ViewDoc::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:jdocspb.ViewDoc)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ViewDoc::CopyFrom(const ViewDoc& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:jdocspb.ViewDoc)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ViewDoc::IsInitialized() const {
  return true;
}

void ViewDoc::InternalSwap(ViewDoc* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  user_id_.Swap(&other->user_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  thing_.Swap(&other->thing_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  doc_name_.Swap(&other->doc_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  json_doc_.Swap(&other->json_doc_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata ViewDoc::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ViewAccountDocsReq::InitAsDefaultInstance() {
}
class ViewAccountDocsReq::_Internal {
 public:
};

ViewAccountDocsReq::ViewAccountDocsReq(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:jdocspb.ViewAccountDocsReq)
}
ViewAccountDocsReq::ViewAccountDocsReq(const ViewAccountDocsReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  user_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_user_id().empty()) {
    user_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_user_id(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:jdocspb.ViewAccountDocsReq)
}

void ViewAccountDocsReq::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ViewAccountDocsReq_jdocs_2eproto.base);
  user_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

ViewAccountDocsReq::~ViewAccountDocsReq() {
  // @@protoc_insertion_point(destructor:jdocspb.ViewAccountDocsReq)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ViewAccountDocsReq::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  user_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ViewAccountDocsReq::ArenaDtor(void* object) {
  ViewAccountDocsReq* _this = reinterpret_cast< ViewAccountDocsReq* >(object);
  (void)_this;
}
void ViewAccountDocsReq::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ViewAccountDocsReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ViewAccountDocsReq& ViewAccountDocsReq::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ViewAccountDocsReq_jdocs_2eproto.base);
  return *internal_default_instance();
}


void ViewAccountDocsReq::Clear() {
// @@protoc_insertion_point(message_clear_start:jdocspb.ViewAccountDocsReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  user_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ViewAccountDocsReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string user_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_user_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "jdocspb.ViewAccountDocsReq.user_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ViewAccountDocsReq::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:jdocspb.ViewAccountDocsReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string user_id = 1;
  if (this->user_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_user_id().data(), static_cast<int>(this->_internal_user_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "jdocspb.ViewAccountDocsReq.user_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_user_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:jdocspb.ViewAccountDocsReq)
  return target;
}

size_t ViewAccountDocsReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:jdocspb.ViewAccountDocsReq)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string user_id = 1;
  if (this->user_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_user_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ViewAccountDocsReq::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:jdocspb.ViewAccountDocsReq)
  GOOGLE_DCHECK_NE(&from, this);
  const ViewAccountDocsReq* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ViewAccountDocsReq>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:jdocspb.ViewAccountDocsReq)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:jdocspb.ViewAccountDocsReq)
    MergeFrom(*source);
  }
}

void ViewAccountDocsReq::MergeFrom(const ViewAccountDocsReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:jdocspb.ViewAccountDocsReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.user_id().size() > 0) {
    _internal_set_user_id(from._internal_user_id());
  }
}

void ViewAccountDocsReq::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:jdocspb.ViewAccountDocsReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ViewAccountDocsReq::CopyFrom(const ViewAccountDocsReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:jdocspb.ViewAccountDocsReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ViewAccountDocsReq::IsInitialized() const {
  return true;
}

void ViewAccountDocsReq::InternalSwap(ViewAccountDocsReq* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  user_id_.Swap(&other->user_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata ViewAccountDocsReq::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ViewDocsResp::InitAsDefaultInstance() {
}
class ViewDocsResp::_Internal {
 public:
};

ViewDocsResp::ViewDocsResp(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  docs_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:jdocspb.ViewDocsResp)
}
ViewDocsResp::ViewDocsResp(const ViewDocsResp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      docs_(from.docs_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:jdocspb.ViewDocsResp)
}

void ViewDocsResp::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ViewDocsResp_jdocs_2eproto.base);
}

ViewDocsResp::~ViewDocsResp() {
  // @@protoc_insertion_point(destructor:jdocspb.ViewDocsResp)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ViewDocsResp::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ViewDocsResp::ArenaDtor(void* object) {
  ViewDocsResp* _this = reinterpret_cast< ViewDocsResp* >(object);
  (void)_this;
}
void ViewDocsResp::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ViewDocsResp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ViewDocsResp& ViewDocsResp::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ViewDocsResp_jdocs_2eproto.base);
  return *internal_default_instance();
}


void ViewDocsResp::Clear() {
// @@protoc_insertion_point(message_clear_start:jdocspb.ViewDocsResp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  docs_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ViewDocsResp::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .jdocspb.ViewDoc docs = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_docs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ViewDocsResp::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:jdocspb.ViewDocsResp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .jdocspb.ViewDoc docs = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_docs_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_docs(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:jdocspb.ViewDocsResp)
  return target;
}

size_t ViewDocsResp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:jdocspb.ViewDocsResp)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .jdocspb.ViewDoc docs = 1;
  total_size += 1UL * this->_internal_docs_size();
  for (const auto& msg : this->docs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ViewDocsResp::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:jdocspb.ViewDocsResp)
  GOOGLE_DCHECK_NE(&from, this);
  const ViewDocsResp* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ViewDocsResp>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:jdocspb.ViewDocsResp)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:jdocspb.ViewDocsResp)
    MergeFrom(*source);
  }
}

void ViewDocsResp::MergeFrom(const ViewDocsResp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:jdocspb.ViewDocsResp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  docs_.MergeFrom(from.docs_);
}

void ViewDocsResp::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:jdocspb.ViewDocsResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ViewDocsResp::CopyFrom(const ViewDocsResp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:jdocspb.ViewDocsResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ViewDocsResp::IsInitialized() const {
  return true;
}

void ViewDocsResp::InternalSwap(ViewDocsResp* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  docs_.InternalSwap(&other->docs_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ViewDocsResp::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace jdocspb
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::jdocspb::Jdoc* Arena::CreateMaybeMessage< ::jdocspb::Jdoc >(Arena* arena) {
  return Arena::CreateMessageInternal< ::jdocspb::Jdoc >(arena);
}
template<> PROTOBUF_NOINLINE ::jdocspb::EchoReq* Arena::CreateMaybeMessage< ::jdocspb::EchoReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::jdocspb::EchoReq >(arena);
}
template<> PROTOBUF_NOINLINE ::jdocspb::EchoResp* Arena::CreateMaybeMessage< ::jdocspb::EchoResp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::jdocspb::EchoResp >(arena);
}
template<> PROTOBUF_NOINLINE ::jdocspb::WriteDocReq* Arena::CreateMaybeMessage< ::jdocspb::WriteDocReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::jdocspb::WriteDocReq >(arena);
}
template<> PROTOBUF_NOINLINE ::jdocspb::WriteDocResp* Arena::CreateMaybeMessage< ::jdocspb::WriteDocResp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::jdocspb::WriteDocResp >(arena);
}
template<> PROTOBUF_NOINLINE ::jdocspb::ReadDocsReq_Item* Arena::CreateMaybeMessage< ::jdocspb::ReadDocsReq_Item >(Arena* arena) {
  return Arena::CreateMessageInternal< ::jdocspb::ReadDocsReq_Item >(arena);
}
template<> PROTOBUF_NOINLINE ::jdocspb::ReadDocsReq* Arena::CreateMaybeMessage< ::jdocspb::ReadDocsReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::jdocspb::ReadDocsReq >(arena);
}
template<> PROTOBUF_NOINLINE ::jdocspb::ReadDocsResp_Item* Arena::CreateMaybeMessage< ::jdocspb::ReadDocsResp_Item >(Arena* arena) {
  return Arena::CreateMessageInternal< ::jdocspb::ReadDocsResp_Item >(arena);
}
template<> PROTOBUF_NOINLINE ::jdocspb::ReadDocsResp* Arena::CreateMaybeMessage< ::jdocspb::ReadDocsResp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::jdocspb::ReadDocsResp >(arena);
}
template<> PROTOBUF_NOINLINE ::jdocspb::DeleteDocReq* Arena::CreateMaybeMessage< ::jdocspb::DeleteDocReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::jdocspb::DeleteDocReq >(arena);
}
template<> PROTOBUF_NOINLINE ::jdocspb::DeleteDocResp* Arena::CreateMaybeMessage< ::jdocspb::DeleteDocResp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::jdocspb::DeleteDocResp >(arena);
}
template<> PROTOBUF_NOINLINE ::jdocspb::PurgeAccountDocsReq* Arena::CreateMaybeMessage< ::jdocspb::PurgeAccountDocsReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::jdocspb::PurgeAccountDocsReq >(arena);
}
template<> PROTOBUF_NOINLINE ::jdocspb::PurgeAccountDocsResp* Arena::CreateMaybeMessage< ::jdocspb::PurgeAccountDocsResp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::jdocspb::PurgeAccountDocsResp >(arena);
}
template<> PROTOBUF_NOINLINE ::jdocspb::ViewDoc* Arena::CreateMaybeMessage< ::jdocspb::ViewDoc >(Arena* arena) {
  return Arena::CreateMessageInternal< ::jdocspb::ViewDoc >(arena);
}
template<> PROTOBUF_NOINLINE ::jdocspb::ViewAccountDocsReq* Arena::CreateMaybeMessage< ::jdocspb::ViewAccountDocsReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::jdocspb::ViewAccountDocsReq >(arena);
}
template<> PROTOBUF_NOINLINE ::jdocspb::ViewDocsResp* Arena::CreateMaybeMessage< ::jdocspb::ViewDocsResp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::jdocspb::ViewDocsResp >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
