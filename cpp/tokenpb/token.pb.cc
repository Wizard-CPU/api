// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: token.proto

#include "token.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_token_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_StsToken_token_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_token_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TokenBundle_token_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_token_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TokensPage_token_2eproto;
namespace tokenpb {
class TokenBundleDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TokenBundle> _instance;
} _TokenBundle_default_instance_;
class StsTokenDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<StsToken> _instance;
} _StsToken_default_instance_;
class AssociatePrimaryUserRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AssociatePrimaryUserRequest> _instance;
} _AssociatePrimaryUserRequest_default_instance_;
class ReassociatePrimaryUserRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ReassociatePrimaryUserRequest> _instance;
} _ReassociatePrimaryUserRequest_default_instance_;
class ReassociatePrimaryUserResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ReassociatePrimaryUserResponse> _instance;
} _ReassociatePrimaryUserResponse_default_instance_;
class AssociatePrimaryUserResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AssociatePrimaryUserResponse> _instance;
} _AssociatePrimaryUserResponse_default_instance_;
class AssociateSecondaryClientRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AssociateSecondaryClientRequest> _instance;
} _AssociateSecondaryClientRequest_default_instance_;
class AssociateSecondaryClientResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AssociateSecondaryClientResponse> _instance;
} _AssociateSecondaryClientResponse_default_instance_;
class DisassociatePrimaryUserRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DisassociatePrimaryUserRequest> _instance;
} _DisassociatePrimaryUserRequest_default_instance_;
class DisassociatePrimaryUserResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DisassociatePrimaryUserResponse> _instance;
} _DisassociatePrimaryUserResponse_default_instance_;
class RefreshTokenRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RefreshTokenRequest> _instance;
} _RefreshTokenRequest_default_instance_;
class RefreshTokenResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RefreshTokenResponse> _instance;
} _RefreshTokenResponse_default_instance_;
class TokensPageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TokensPage> _instance;
} _TokensPage_default_instance_;
class ListRevokedTokensRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ListRevokedTokensRequest> _instance;
} _ListRevokedTokensRequest_default_instance_;
class ListRevokedTokensResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ListRevokedTokensResponse> _instance;
} _ListRevokedTokensResponse_default_instance_;
class RevokeFactoryCertificateRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RevokeFactoryCertificateRequest> _instance;
} _RevokeFactoryCertificateRequest_default_instance_;
class RevokeFactoryCertificateResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RevokeFactoryCertificateResponse> _instance;
} _RevokeFactoryCertificateResponse_default_instance_;
class RevokeTokensRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RevokeTokensRequest> _instance;
} _RevokeTokensRequest_default_instance_;
class RevokeTokensResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RevokeTokensResponse> _instance;
} _RevokeTokensResponse_default_instance_;
}  // namespace tokenpb
static void InitDefaultsscc_info_AssociatePrimaryUserRequest_token_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tokenpb::_AssociatePrimaryUserRequest_default_instance_;
    new (ptr) ::tokenpb::AssociatePrimaryUserRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tokenpb::AssociatePrimaryUserRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AssociatePrimaryUserRequest_token_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_AssociatePrimaryUserRequest_token_2eproto}, {}};

static void InitDefaultsscc_info_AssociatePrimaryUserResponse_token_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tokenpb::_AssociatePrimaryUserResponse_default_instance_;
    new (ptr) ::tokenpb::AssociatePrimaryUserResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tokenpb::AssociatePrimaryUserResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_AssociatePrimaryUserResponse_token_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_AssociatePrimaryUserResponse_token_2eproto}, {
      &scc_info_TokenBundle_token_2eproto.base,}};

static void InitDefaultsscc_info_AssociateSecondaryClientRequest_token_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tokenpb::_AssociateSecondaryClientRequest_default_instance_;
    new (ptr) ::tokenpb::AssociateSecondaryClientRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tokenpb::AssociateSecondaryClientRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AssociateSecondaryClientRequest_token_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_AssociateSecondaryClientRequest_token_2eproto}, {}};

static void InitDefaultsscc_info_AssociateSecondaryClientResponse_token_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tokenpb::_AssociateSecondaryClientResponse_default_instance_;
    new (ptr) ::tokenpb::AssociateSecondaryClientResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tokenpb::AssociateSecondaryClientResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_AssociateSecondaryClientResponse_token_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_AssociateSecondaryClientResponse_token_2eproto}, {
      &scc_info_TokenBundle_token_2eproto.base,}};

static void InitDefaultsscc_info_DisassociatePrimaryUserRequest_token_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tokenpb::_DisassociatePrimaryUserRequest_default_instance_;
    new (ptr) ::tokenpb::DisassociatePrimaryUserRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tokenpb::DisassociatePrimaryUserRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DisassociatePrimaryUserRequest_token_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_DisassociatePrimaryUserRequest_token_2eproto}, {}};

static void InitDefaultsscc_info_DisassociatePrimaryUserResponse_token_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tokenpb::_DisassociatePrimaryUserResponse_default_instance_;
    new (ptr) ::tokenpb::DisassociatePrimaryUserResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tokenpb::DisassociatePrimaryUserResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DisassociatePrimaryUserResponse_token_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_DisassociatePrimaryUserResponse_token_2eproto}, {}};

static void InitDefaultsscc_info_ListRevokedTokensRequest_token_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tokenpb::_ListRevokedTokensRequest_default_instance_;
    new (ptr) ::tokenpb::ListRevokedTokensRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tokenpb::ListRevokedTokensRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ListRevokedTokensRequest_token_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ListRevokedTokensRequest_token_2eproto}, {}};

static void InitDefaultsscc_info_ListRevokedTokensResponse_token_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tokenpb::_ListRevokedTokensResponse_default_instance_;
    new (ptr) ::tokenpb::ListRevokedTokensResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tokenpb::ListRevokedTokensResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ListRevokedTokensResponse_token_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ListRevokedTokensResponse_token_2eproto}, {
      &scc_info_TokensPage_token_2eproto.base,}};

static void InitDefaultsscc_info_ReassociatePrimaryUserRequest_token_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tokenpb::_ReassociatePrimaryUserRequest_default_instance_;
    new (ptr) ::tokenpb::ReassociatePrimaryUserRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tokenpb::ReassociatePrimaryUserRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ReassociatePrimaryUserRequest_token_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ReassociatePrimaryUserRequest_token_2eproto}, {}};

static void InitDefaultsscc_info_ReassociatePrimaryUserResponse_token_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tokenpb::_ReassociatePrimaryUserResponse_default_instance_;
    new (ptr) ::tokenpb::ReassociatePrimaryUserResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tokenpb::ReassociatePrimaryUserResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ReassociatePrimaryUserResponse_token_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ReassociatePrimaryUserResponse_token_2eproto}, {
      &scc_info_TokenBundle_token_2eproto.base,}};

static void InitDefaultsscc_info_RefreshTokenRequest_token_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tokenpb::_RefreshTokenRequest_default_instance_;
    new (ptr) ::tokenpb::RefreshTokenRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tokenpb::RefreshTokenRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RefreshTokenRequest_token_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_RefreshTokenRequest_token_2eproto}, {}};

static void InitDefaultsscc_info_RefreshTokenResponse_token_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tokenpb::_RefreshTokenResponse_default_instance_;
    new (ptr) ::tokenpb::RefreshTokenResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tokenpb::RefreshTokenResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_RefreshTokenResponse_token_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_RefreshTokenResponse_token_2eproto}, {
      &scc_info_TokenBundle_token_2eproto.base,}};

static void InitDefaultsscc_info_RevokeFactoryCertificateRequest_token_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tokenpb::_RevokeFactoryCertificateRequest_default_instance_;
    new (ptr) ::tokenpb::RevokeFactoryCertificateRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tokenpb::RevokeFactoryCertificateRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RevokeFactoryCertificateRequest_token_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_RevokeFactoryCertificateRequest_token_2eproto}, {}};

static void InitDefaultsscc_info_RevokeFactoryCertificateResponse_token_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tokenpb::_RevokeFactoryCertificateResponse_default_instance_;
    new (ptr) ::tokenpb::RevokeFactoryCertificateResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tokenpb::RevokeFactoryCertificateResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RevokeFactoryCertificateResponse_token_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_RevokeFactoryCertificateResponse_token_2eproto}, {}};

static void InitDefaultsscc_info_RevokeTokensRequest_token_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tokenpb::_RevokeTokensRequest_default_instance_;
    new (ptr) ::tokenpb::RevokeTokensRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tokenpb::RevokeTokensRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RevokeTokensRequest_token_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_RevokeTokensRequest_token_2eproto}, {}};

static void InitDefaultsscc_info_RevokeTokensResponse_token_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tokenpb::_RevokeTokensResponse_default_instance_;
    new (ptr) ::tokenpb::RevokeTokensResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tokenpb::RevokeTokensResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RevokeTokensResponse_token_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_RevokeTokensResponse_token_2eproto}, {}};

static void InitDefaultsscc_info_StsToken_token_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tokenpb::_StsToken_default_instance_;
    new (ptr) ::tokenpb::StsToken();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tokenpb::StsToken::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_StsToken_token_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_StsToken_token_2eproto}, {}};

static void InitDefaultsscc_info_TokenBundle_token_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tokenpb::_TokenBundle_default_instance_;
    new (ptr) ::tokenpb::TokenBundle();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tokenpb::TokenBundle::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TokenBundle_token_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_TokenBundle_token_2eproto}, {
      &scc_info_StsToken_token_2eproto.base,}};

static void InitDefaultsscc_info_TokensPage_token_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tokenpb::_TokensPage_default_instance_;
    new (ptr) ::tokenpb::TokensPage();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tokenpb::TokensPage::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TokensPage_token_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TokensPage_token_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_token_2eproto[19];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_token_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_token_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_token_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tokenpb::TokenBundle, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::tokenpb::TokenBundle, token_),
  PROTOBUF_FIELD_OFFSET(::tokenpb::TokenBundle, client_token_),
  PROTOBUF_FIELD_OFFSET(::tokenpb::TokenBundle, sts_token_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tokenpb::StsToken, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::tokenpb::StsToken, access_key_id_),
  PROTOBUF_FIELD_OFFSET(::tokenpb::StsToken, secret_access_key_),
  PROTOBUF_FIELD_OFFSET(::tokenpb::StsToken, session_token_),
  PROTOBUF_FIELD_OFFSET(::tokenpb::StsToken, expiration_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tokenpb::AssociatePrimaryUserRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::tokenpb::AssociatePrimaryUserRequest, generate_sts_token_),
  PROTOBUF_FIELD_OFFSET(::tokenpb::AssociatePrimaryUserRequest, session_certificate_),
  PROTOBUF_FIELD_OFFSET(::tokenpb::AssociatePrimaryUserRequest, client_name_),
  PROTOBUF_FIELD_OFFSET(::tokenpb::AssociatePrimaryUserRequest, app_id_),
  PROTOBUF_FIELD_OFFSET(::tokenpb::AssociatePrimaryUserRequest, skip_client_token_),
  PROTOBUF_FIELD_OFFSET(::tokenpb::AssociatePrimaryUserRequest, revoke_client_tokens_),
  PROTOBUF_FIELD_OFFSET(::tokenpb::AssociatePrimaryUserRequest, expiration_minutes_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tokenpb::ReassociatePrimaryUserRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::tokenpb::ReassociatePrimaryUserRequest, generate_sts_token_),
  PROTOBUF_FIELD_OFFSET(::tokenpb::ReassociatePrimaryUserRequest, client_name_),
  PROTOBUF_FIELD_OFFSET(::tokenpb::ReassociatePrimaryUserRequest, app_id_),
  PROTOBUF_FIELD_OFFSET(::tokenpb::ReassociatePrimaryUserRequest, skip_client_token_),
  PROTOBUF_FIELD_OFFSET(::tokenpb::ReassociatePrimaryUserRequest, expiration_minutes_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tokenpb::ReassociatePrimaryUserResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::tokenpb::ReassociatePrimaryUserResponse, data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tokenpb::AssociatePrimaryUserResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::tokenpb::AssociatePrimaryUserResponse, data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tokenpb::AssociateSecondaryClientRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::tokenpb::AssociateSecondaryClientRequest, user_session_),
  PROTOBUF_FIELD_OFFSET(::tokenpb::AssociateSecondaryClientRequest, client_name_),
  PROTOBUF_FIELD_OFFSET(::tokenpb::AssociateSecondaryClientRequest, app_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tokenpb::AssociateSecondaryClientResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::tokenpb::AssociateSecondaryClientResponse, data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tokenpb::DisassociatePrimaryUserRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tokenpb::DisassociatePrimaryUserResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tokenpb::RefreshTokenRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::tokenpb::RefreshTokenRequest, refresh_jwt_tokens_),
  PROTOBUF_FIELD_OFFSET(::tokenpb::RefreshTokenRequest, refresh_sts_tokens_),
  PROTOBUF_FIELD_OFFSET(::tokenpb::RefreshTokenRequest, expiration_minutes_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tokenpb::RefreshTokenResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::tokenpb::RefreshTokenResponse, data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tokenpb::TokensPage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::tokenpb::TokensPage, tokens_),
  PROTOBUF_FIELD_OFFSET(::tokenpb::TokensPage, last_key_),
  PROTOBUF_FIELD_OFFSET(::tokenpb::TokensPage, done_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tokenpb::ListRevokedTokensRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::tokenpb::ListRevokedTokensRequest, previous_key_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tokenpb::ListRevokedTokensResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::tokenpb::ListRevokedTokensResponse, data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tokenpb::RevokeFactoryCertificateRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::tokenpb::RevokeFactoryCertificateRequest, certificate_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tokenpb::RevokeFactoryCertificateResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tokenpb::RevokeTokensRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::tokenpb::RevokeTokensRequest, search_by_index_),
  PROTOBUF_FIELD_OFFSET(::tokenpb::RevokeTokensRequest, key_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tokenpb::RevokeTokensResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::tokenpb::RevokeTokensResponse, tokens_revoked_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::tokenpb::TokenBundle)},
  { 8, -1, sizeof(::tokenpb::StsToken)},
  { 17, -1, sizeof(::tokenpb::AssociatePrimaryUserRequest)},
  { 29, -1, sizeof(::tokenpb::ReassociatePrimaryUserRequest)},
  { 39, -1, sizeof(::tokenpb::ReassociatePrimaryUserResponse)},
  { 45, -1, sizeof(::tokenpb::AssociatePrimaryUserResponse)},
  { 51, -1, sizeof(::tokenpb::AssociateSecondaryClientRequest)},
  { 59, -1, sizeof(::tokenpb::AssociateSecondaryClientResponse)},
  { 65, -1, sizeof(::tokenpb::DisassociatePrimaryUserRequest)},
  { 70, -1, sizeof(::tokenpb::DisassociatePrimaryUserResponse)},
  { 75, -1, sizeof(::tokenpb::RefreshTokenRequest)},
  { 83, -1, sizeof(::tokenpb::RefreshTokenResponse)},
  { 89, -1, sizeof(::tokenpb::TokensPage)},
  { 97, -1, sizeof(::tokenpb::ListRevokedTokensRequest)},
  { 103, -1, sizeof(::tokenpb::ListRevokedTokensResponse)},
  { 109, -1, sizeof(::tokenpb::RevokeFactoryCertificateRequest)},
  { 115, -1, sizeof(::tokenpb::RevokeFactoryCertificateResponse)},
  { 120, -1, sizeof(::tokenpb::RevokeTokensRequest)},
  { 127, -1, sizeof(::tokenpb::RevokeTokensResponse)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tokenpb::_TokenBundle_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tokenpb::_StsToken_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tokenpb::_AssociatePrimaryUserRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tokenpb::_ReassociatePrimaryUserRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tokenpb::_ReassociatePrimaryUserResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tokenpb::_AssociatePrimaryUserResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tokenpb::_AssociateSecondaryClientRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tokenpb::_AssociateSecondaryClientResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tokenpb::_DisassociatePrimaryUserRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tokenpb::_DisassociatePrimaryUserResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tokenpb::_RefreshTokenRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tokenpb::_RefreshTokenResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tokenpb::_TokensPage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tokenpb::_ListRevokedTokensRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tokenpb::_ListRevokedTokensResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tokenpb::_RevokeFactoryCertificateRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tokenpb::_RevokeFactoryCertificateResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tokenpb::_RevokeTokensRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tokenpb::_RevokeTokensResponse_default_instance_),
};

const char descriptor_table_protodef_token_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\013token.proto\022\007tokenpb\"X\n\013TokenBundle\022\r\n"
  "\005token\030\001 \001(\t\022\024\n\014client_token\030\002 \001(\t\022$\n\tst"
  "s_token\030\004 \001(\0132\021.tokenpb.StsToken\"g\n\010StsT"
  "oken\022\025\n\raccess_key_id\030\001 \001(\t\022\031\n\021secret_ac"
  "cess_key\030\002 \001(\t\022\025\n\rsession_token\030\003 \001(\t\022\022\n"
  "\nexpiration\030\004 \001(\t\"\320\001\n\033AssociatePrimaryUs"
  "erRequest\022\032\n\022generate_sts_token\030\003 \001(\010\022\033\n"
  "\023session_certificate\030\004 \001(\014\022\023\n\013client_nam"
  "e\030\005 \001(\t\022\016\n\006app_id\030\006 \001(\t\022\031\n\021skip_client_t"
  "oken\030\007 \001(\010\022\034\n\024revoke_client_tokens\030\010 \001(\010"
  "\022\032\n\022expiration_minutes\030\t \001(\r\"\227\001\n\035Reassoc"
  "iatePrimaryUserRequest\022\032\n\022generate_sts_t"
  "oken\030\001 \001(\010\022\023\n\013client_name\030\002 \001(\t\022\016\n\006app_i"
  "d\030\003 \001(\t\022\031\n\021skip_client_token\030\004 \001(\010\022\032\n\022ex"
  "piration_minutes\030\005 \001(\r\"D\n\036ReassociatePri"
  "maryUserResponse\022\"\n\004data\030\001 \001(\0132\024.tokenpb"
  ".TokenBundle\"B\n\034AssociatePrimaryUserResp"
  "onse\022\"\n\004data\030\001 \001(\0132\024.tokenpb.TokenBundle"
  "\"\\\n\037AssociateSecondaryClientRequest\022\024\n\014u"
  "ser_session\030\002 \001(\t\022\023\n\013client_name\030\003 \001(\t\022\016"
  "\n\006app_id\030\004 \001(\t\"F\n AssociateSecondaryClie"
  "ntResponse\022\"\n\004data\030\001 \001(\0132\024.tokenpb.Token"
  "Bundle\" \n\036DisassociatePrimaryUserRequest"
  "\"!\n\037DisassociatePrimaryUserResponse\"i\n\023R"
  "efreshTokenRequest\022\032\n\022refresh_jwt_tokens"
  "\030\002 \001(\010\022\032\n\022refresh_sts_tokens\030\003 \001(\010\022\032\n\022ex"
  "piration_minutes\030\004 \001(\r\":\n\024RefreshTokenRe"
  "sponse\022\"\n\004data\030\001 \001(\0132\024.tokenpb.TokenBund"
  "le\"<\n\nTokensPage\022\016\n\006tokens\030\001 \003(\t\022\020\n\010last"
  "_key\030\002 \001(\t\022\014\n\004done\030\003 \001(\010\"0\n\030ListRevokedT"
  "okensRequest\022\024\n\014previous_key\030\001 \001(\t\">\n\031Li"
  "stRevokedTokensResponse\022!\n\004data\030\001 \001(\0132\023."
  "tokenpb.TokensPage\"9\n\037RevokeFactoryCerti"
  "ficateRequest\022\026\n\016certificate_id\030\001 \001(\t\"\"\n"
  " RevokeFactoryCertificateResponse\";\n\023Rev"
  "okeTokensRequest\022\027\n\017search_by_index\030\001 \001("
  "\t\022\013\n\003key\030\002 \001(\t\".\n\024RevokeTokensResponse\022\026"
  "\n\016tokens_revoked\030\001 \001(\r2\235\006\n\005Token\022c\n\024Asso"
  "ciatePrimaryUser\022$.tokenpb.AssociatePrim"
  "aryUserRequest\032%.tokenpb.AssociatePrimar"
  "yUserResponse\022i\n\026ReassociatePrimaryUser\022"
  "&.tokenpb.ReassociatePrimaryUserRequest\032"
  "\'.tokenpb.ReassociatePrimaryUserResponse"
  "\022o\n\030AssociateSecondaryClient\022(.tokenpb.A"
  "ssociateSecondaryClientRequest\032).tokenpb"
  ".AssociateSecondaryClientResponse\022l\n\027Dis"
  "associatePrimaryUser\022\'.tokenpb.Disassoci"
  "atePrimaryUserRequest\032(.tokenpb.Disassoc"
  "iatePrimaryUserResponse\022K\n\014RefreshToken\022"
  "\034.tokenpb.RefreshTokenRequest\032\035.tokenpb."
  "RefreshTokenResponse\022Z\n\021ListRevokedToken"
  "s\022!.tokenpb.ListRevokedTokensRequest\032\".t"
  "okenpb.ListRevokedTokensResponse\022o\n\030Revo"
  "keFactoryCertificate\022(.tokenpb.RevokeFac"
  "toryCertificateRequest\032).tokenpb.RevokeF"
  "actoryCertificateResponse\022K\n\014RevokeToken"
  "s\022\034.tokenpb.RevokeTokensRequest\032\035.tokenp"
  "b.RevokeTokensResponseB.Z,github.com/dig"
  "ital-dream-labs/api/go/tokenpbb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_token_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_token_2eproto_sccs[19] = {
  &scc_info_AssociatePrimaryUserRequest_token_2eproto.base,
  &scc_info_AssociatePrimaryUserResponse_token_2eproto.base,
  &scc_info_AssociateSecondaryClientRequest_token_2eproto.base,
  &scc_info_AssociateSecondaryClientResponse_token_2eproto.base,
  &scc_info_DisassociatePrimaryUserRequest_token_2eproto.base,
  &scc_info_DisassociatePrimaryUserResponse_token_2eproto.base,
  &scc_info_ListRevokedTokensRequest_token_2eproto.base,
  &scc_info_ListRevokedTokensResponse_token_2eproto.base,
  &scc_info_ReassociatePrimaryUserRequest_token_2eproto.base,
  &scc_info_ReassociatePrimaryUserResponse_token_2eproto.base,
  &scc_info_RefreshTokenRequest_token_2eproto.base,
  &scc_info_RefreshTokenResponse_token_2eproto.base,
  &scc_info_RevokeFactoryCertificateRequest_token_2eproto.base,
  &scc_info_RevokeFactoryCertificateResponse_token_2eproto.base,
  &scc_info_RevokeTokensRequest_token_2eproto.base,
  &scc_info_RevokeTokensResponse_token_2eproto.base,
  &scc_info_StsToken_token_2eproto.base,
  &scc_info_TokenBundle_token_2eproto.base,
  &scc_info_TokensPage_token_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_token_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_token_2eproto = {
  false, false, descriptor_table_protodef_token_2eproto, "token.proto", 2358,
  &descriptor_table_token_2eproto_once, descriptor_table_token_2eproto_sccs, descriptor_table_token_2eproto_deps, 19, 0,
  schemas, file_default_instances, TableStruct_token_2eproto::offsets,
  file_level_metadata_token_2eproto, 19, file_level_enum_descriptors_token_2eproto, file_level_service_descriptors_token_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_token_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_token_2eproto)), true);
namespace tokenpb {

// ===================================================================

void TokenBundle::InitAsDefaultInstance() {
  ::tokenpb::_TokenBundle_default_instance_._instance.get_mutable()->sts_token_ = const_cast< ::tokenpb::StsToken*>(
      ::tokenpb::StsToken::internal_default_instance());
}
class TokenBundle::_Internal {
 public:
  static const ::tokenpb::StsToken& sts_token(const TokenBundle* msg);
};

const ::tokenpb::StsToken&
TokenBundle::_Internal::sts_token(const TokenBundle* msg) {
  return *msg->sts_token_;
}
TokenBundle::TokenBundle(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tokenpb.TokenBundle)
}
TokenBundle::TokenBundle(const TokenBundle& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_token().empty()) {
    token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_token(),
      GetArena());
  }
  client_token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_client_token().empty()) {
    client_token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_client_token(),
      GetArena());
  }
  if (from._internal_has_sts_token()) {
    sts_token_ = new ::tokenpb::StsToken(*from.sts_token_);
  } else {
    sts_token_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:tokenpb.TokenBundle)
}

void TokenBundle::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TokenBundle_token_2eproto.base);
  token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  client_token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  sts_token_ = nullptr;
}

TokenBundle::~TokenBundle() {
  // @@protoc_insertion_point(destructor:tokenpb.TokenBundle)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TokenBundle::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  token_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  client_token_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete sts_token_;
}

void TokenBundle::ArenaDtor(void* object) {
  TokenBundle* _this = reinterpret_cast< TokenBundle* >(object);
  (void)_this;
}
void TokenBundle::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TokenBundle::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TokenBundle& TokenBundle::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TokenBundle_token_2eproto.base);
  return *internal_default_instance();
}


void TokenBundle::Clear() {
// @@protoc_insertion_point(message_clear_start:tokenpb.TokenBundle)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  token_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  client_token_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && sts_token_ != nullptr) {
    delete sts_token_;
  }
  sts_token_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TokenBundle::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string token = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_token();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "tokenpb.TokenBundle.token"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string client_token = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_client_token();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "tokenpb.TokenBundle.client_token"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .tokenpb.StsToken sts_token = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_sts_token(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TokenBundle::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tokenpb.TokenBundle)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string token = 1;
  if (this->token().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_token().data(), static_cast<int>(this->_internal_token().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tokenpb.TokenBundle.token");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_token(), target);
  }

  // string client_token = 2;
  if (this->client_token().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_client_token().data(), static_cast<int>(this->_internal_client_token().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tokenpb.TokenBundle.client_token");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_client_token(), target);
  }

  // .tokenpb.StsToken sts_token = 4;
  if (this->has_sts_token()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::sts_token(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tokenpb.TokenBundle)
  return target;
}

size_t TokenBundle::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tokenpb.TokenBundle)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string token = 1;
  if (this->token().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_token());
  }

  // string client_token = 2;
  if (this->client_token().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_client_token());
  }

  // .tokenpb.StsToken sts_token = 4;
  if (this->has_sts_token()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *sts_token_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TokenBundle::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tokenpb.TokenBundle)
  GOOGLE_DCHECK_NE(&from, this);
  const TokenBundle* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TokenBundle>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tokenpb.TokenBundle)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tokenpb.TokenBundle)
    MergeFrom(*source);
  }
}

void TokenBundle::MergeFrom(const TokenBundle& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tokenpb.TokenBundle)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.token().size() > 0) {
    _internal_set_token(from._internal_token());
  }
  if (from.client_token().size() > 0) {
    _internal_set_client_token(from._internal_client_token());
  }
  if (from.has_sts_token()) {
    _internal_mutable_sts_token()->::tokenpb::StsToken::MergeFrom(from._internal_sts_token());
  }
}

void TokenBundle::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tokenpb.TokenBundle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TokenBundle::CopyFrom(const TokenBundle& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tokenpb.TokenBundle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TokenBundle::IsInitialized() const {
  return true;
}

void TokenBundle::InternalSwap(TokenBundle* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  token_.Swap(&other->token_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  client_token_.Swap(&other->client_token_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(sts_token_, other->sts_token_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TokenBundle::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void StsToken::InitAsDefaultInstance() {
}
class StsToken::_Internal {
 public:
};

StsToken::StsToken(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tokenpb.StsToken)
}
StsToken::StsToken(const StsToken& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  access_key_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_access_key_id().empty()) {
    access_key_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_access_key_id(),
      GetArena());
  }
  secret_access_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_secret_access_key().empty()) {
    secret_access_key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_secret_access_key(),
      GetArena());
  }
  session_token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_session_token().empty()) {
    session_token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_session_token(),
      GetArena());
  }
  expiration_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_expiration().empty()) {
    expiration_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_expiration(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:tokenpb.StsToken)
}

void StsToken::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_StsToken_token_2eproto.base);
  access_key_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  secret_access_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  session_token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  expiration_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

StsToken::~StsToken() {
  // @@protoc_insertion_point(destructor:tokenpb.StsToken)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void StsToken::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  access_key_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  secret_access_key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  session_token_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  expiration_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void StsToken::ArenaDtor(void* object) {
  StsToken* _this = reinterpret_cast< StsToken* >(object);
  (void)_this;
}
void StsToken::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void StsToken::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const StsToken& StsToken::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_StsToken_token_2eproto.base);
  return *internal_default_instance();
}


void StsToken::Clear() {
// @@protoc_insertion_point(message_clear_start:tokenpb.StsToken)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  access_key_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  secret_access_key_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  session_token_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  expiration_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StsToken::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string access_key_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_access_key_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "tokenpb.StsToken.access_key_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string secret_access_key = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_secret_access_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "tokenpb.StsToken.secret_access_key"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string session_token = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_session_token();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "tokenpb.StsToken.session_token"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string expiration = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_expiration();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "tokenpb.StsToken.expiration"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* StsToken::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tokenpb.StsToken)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string access_key_id = 1;
  if (this->access_key_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_access_key_id().data(), static_cast<int>(this->_internal_access_key_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tokenpb.StsToken.access_key_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_access_key_id(), target);
  }

  // string secret_access_key = 2;
  if (this->secret_access_key().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_secret_access_key().data(), static_cast<int>(this->_internal_secret_access_key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tokenpb.StsToken.secret_access_key");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_secret_access_key(), target);
  }

  // string session_token = 3;
  if (this->session_token().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_session_token().data(), static_cast<int>(this->_internal_session_token().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tokenpb.StsToken.session_token");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_session_token(), target);
  }

  // string expiration = 4;
  if (this->expiration().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_expiration().data(), static_cast<int>(this->_internal_expiration().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tokenpb.StsToken.expiration");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_expiration(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tokenpb.StsToken)
  return target;
}

size_t StsToken::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tokenpb.StsToken)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string access_key_id = 1;
  if (this->access_key_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_access_key_id());
  }

  // string secret_access_key = 2;
  if (this->secret_access_key().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_secret_access_key());
  }

  // string session_token = 3;
  if (this->session_token().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_session_token());
  }

  // string expiration = 4;
  if (this->expiration().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_expiration());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StsToken::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tokenpb.StsToken)
  GOOGLE_DCHECK_NE(&from, this);
  const StsToken* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<StsToken>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tokenpb.StsToken)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tokenpb.StsToken)
    MergeFrom(*source);
  }
}

void StsToken::MergeFrom(const StsToken& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tokenpb.StsToken)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.access_key_id().size() > 0) {
    _internal_set_access_key_id(from._internal_access_key_id());
  }
  if (from.secret_access_key().size() > 0) {
    _internal_set_secret_access_key(from._internal_secret_access_key());
  }
  if (from.session_token().size() > 0) {
    _internal_set_session_token(from._internal_session_token());
  }
  if (from.expiration().size() > 0) {
    _internal_set_expiration(from._internal_expiration());
  }
}

void StsToken::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tokenpb.StsToken)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StsToken::CopyFrom(const StsToken& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tokenpb.StsToken)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StsToken::IsInitialized() const {
  return true;
}

void StsToken::InternalSwap(StsToken* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  access_key_id_.Swap(&other->access_key_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  secret_access_key_.Swap(&other->secret_access_key_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  session_token_.Swap(&other->session_token_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  expiration_.Swap(&other->expiration_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata StsToken::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AssociatePrimaryUserRequest::InitAsDefaultInstance() {
}
class AssociatePrimaryUserRequest::_Internal {
 public:
};

AssociatePrimaryUserRequest::AssociatePrimaryUserRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tokenpb.AssociatePrimaryUserRequest)
}
AssociatePrimaryUserRequest::AssociatePrimaryUserRequest(const AssociatePrimaryUserRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  session_certificate_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_session_certificate().empty()) {
    session_certificate_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_session_certificate(),
      GetArena());
  }
  client_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_client_name().empty()) {
    client_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_client_name(),
      GetArena());
  }
  app_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_app_id().empty()) {
    app_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_app_id(),
      GetArena());
  }
  ::memcpy(&generate_sts_token_, &from.generate_sts_token_,
    static_cast<size_t>(reinterpret_cast<char*>(&expiration_minutes_) -
    reinterpret_cast<char*>(&generate_sts_token_)) + sizeof(expiration_minutes_));
  // @@protoc_insertion_point(copy_constructor:tokenpb.AssociatePrimaryUserRequest)
}

void AssociatePrimaryUserRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AssociatePrimaryUserRequest_token_2eproto.base);
  session_certificate_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  client_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  app_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&generate_sts_token_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&expiration_minutes_) -
      reinterpret_cast<char*>(&generate_sts_token_)) + sizeof(expiration_minutes_));
}

AssociatePrimaryUserRequest::~AssociatePrimaryUserRequest() {
  // @@protoc_insertion_point(destructor:tokenpb.AssociatePrimaryUserRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AssociatePrimaryUserRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  session_certificate_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  client_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  app_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void AssociatePrimaryUserRequest::ArenaDtor(void* object) {
  AssociatePrimaryUserRequest* _this = reinterpret_cast< AssociatePrimaryUserRequest* >(object);
  (void)_this;
}
void AssociatePrimaryUserRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AssociatePrimaryUserRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AssociatePrimaryUserRequest& AssociatePrimaryUserRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AssociatePrimaryUserRequest_token_2eproto.base);
  return *internal_default_instance();
}


void AssociatePrimaryUserRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:tokenpb.AssociatePrimaryUserRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  session_certificate_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  client_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  app_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&generate_sts_token_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&expiration_minutes_) -
      reinterpret_cast<char*>(&generate_sts_token_)) + sizeof(expiration_minutes_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AssociatePrimaryUserRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool generate_sts_token = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          generate_sts_token_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes session_certificate = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_session_certificate();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string client_name = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_client_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "tokenpb.AssociatePrimaryUserRequest.client_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string app_id = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_app_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "tokenpb.AssociatePrimaryUserRequest.app_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool skip_client_token = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          skip_client_token_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool revoke_client_tokens = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          revoke_client_tokens_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 expiration_minutes = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          expiration_minutes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AssociatePrimaryUserRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tokenpb.AssociatePrimaryUserRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool generate_sts_token = 3;
  if (this->generate_sts_token() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_generate_sts_token(), target);
  }

  // bytes session_certificate = 4;
  if (this->session_certificate().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_session_certificate(), target);
  }

  // string client_name = 5;
  if (this->client_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_client_name().data(), static_cast<int>(this->_internal_client_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tokenpb.AssociatePrimaryUserRequest.client_name");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_client_name(), target);
  }

  // string app_id = 6;
  if (this->app_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_app_id().data(), static_cast<int>(this->_internal_app_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tokenpb.AssociatePrimaryUserRequest.app_id");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_app_id(), target);
  }

  // bool skip_client_token = 7;
  if (this->skip_client_token() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(7, this->_internal_skip_client_token(), target);
  }

  // bool revoke_client_tokens = 8;
  if (this->revoke_client_tokens() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(8, this->_internal_revoke_client_tokens(), target);
  }

  // uint32 expiration_minutes = 9;
  if (this->expiration_minutes() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(9, this->_internal_expiration_minutes(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tokenpb.AssociatePrimaryUserRequest)
  return target;
}

size_t AssociatePrimaryUserRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tokenpb.AssociatePrimaryUserRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes session_certificate = 4;
  if (this->session_certificate().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_session_certificate());
  }

  // string client_name = 5;
  if (this->client_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_client_name());
  }

  // string app_id = 6;
  if (this->app_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_app_id());
  }

  // bool generate_sts_token = 3;
  if (this->generate_sts_token() != 0) {
    total_size += 1 + 1;
  }

  // bool skip_client_token = 7;
  if (this->skip_client_token() != 0) {
    total_size += 1 + 1;
  }

  // bool revoke_client_tokens = 8;
  if (this->revoke_client_tokens() != 0) {
    total_size += 1 + 1;
  }

  // uint32 expiration_minutes = 9;
  if (this->expiration_minutes() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_expiration_minutes());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AssociatePrimaryUserRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tokenpb.AssociatePrimaryUserRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const AssociatePrimaryUserRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AssociatePrimaryUserRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tokenpb.AssociatePrimaryUserRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tokenpb.AssociatePrimaryUserRequest)
    MergeFrom(*source);
  }
}

void AssociatePrimaryUserRequest::MergeFrom(const AssociatePrimaryUserRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tokenpb.AssociatePrimaryUserRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.session_certificate().size() > 0) {
    _internal_set_session_certificate(from._internal_session_certificate());
  }
  if (from.client_name().size() > 0) {
    _internal_set_client_name(from._internal_client_name());
  }
  if (from.app_id().size() > 0) {
    _internal_set_app_id(from._internal_app_id());
  }
  if (from.generate_sts_token() != 0) {
    _internal_set_generate_sts_token(from._internal_generate_sts_token());
  }
  if (from.skip_client_token() != 0) {
    _internal_set_skip_client_token(from._internal_skip_client_token());
  }
  if (from.revoke_client_tokens() != 0) {
    _internal_set_revoke_client_tokens(from._internal_revoke_client_tokens());
  }
  if (from.expiration_minutes() != 0) {
    _internal_set_expiration_minutes(from._internal_expiration_minutes());
  }
}

void AssociatePrimaryUserRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tokenpb.AssociatePrimaryUserRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AssociatePrimaryUserRequest::CopyFrom(const AssociatePrimaryUserRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tokenpb.AssociatePrimaryUserRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AssociatePrimaryUserRequest::IsInitialized() const {
  return true;
}

void AssociatePrimaryUserRequest::InternalSwap(AssociatePrimaryUserRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  session_certificate_.Swap(&other->session_certificate_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  client_name_.Swap(&other->client_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  app_id_.Swap(&other->app_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AssociatePrimaryUserRequest, expiration_minutes_)
      + sizeof(AssociatePrimaryUserRequest::expiration_minutes_)
      - PROTOBUF_FIELD_OFFSET(AssociatePrimaryUserRequest, generate_sts_token_)>(
          reinterpret_cast<char*>(&generate_sts_token_),
          reinterpret_cast<char*>(&other->generate_sts_token_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AssociatePrimaryUserRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ReassociatePrimaryUserRequest::InitAsDefaultInstance() {
}
class ReassociatePrimaryUserRequest::_Internal {
 public:
};

ReassociatePrimaryUserRequest::ReassociatePrimaryUserRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tokenpb.ReassociatePrimaryUserRequest)
}
ReassociatePrimaryUserRequest::ReassociatePrimaryUserRequest(const ReassociatePrimaryUserRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  client_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_client_name().empty()) {
    client_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_client_name(),
      GetArena());
  }
  app_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_app_id().empty()) {
    app_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_app_id(),
      GetArena());
  }
  ::memcpy(&generate_sts_token_, &from.generate_sts_token_,
    static_cast<size_t>(reinterpret_cast<char*>(&expiration_minutes_) -
    reinterpret_cast<char*>(&generate_sts_token_)) + sizeof(expiration_minutes_));
  // @@protoc_insertion_point(copy_constructor:tokenpb.ReassociatePrimaryUserRequest)
}

void ReassociatePrimaryUserRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ReassociatePrimaryUserRequest_token_2eproto.base);
  client_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  app_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&generate_sts_token_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&expiration_minutes_) -
      reinterpret_cast<char*>(&generate_sts_token_)) + sizeof(expiration_minutes_));
}

ReassociatePrimaryUserRequest::~ReassociatePrimaryUserRequest() {
  // @@protoc_insertion_point(destructor:tokenpb.ReassociatePrimaryUserRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ReassociatePrimaryUserRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  client_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  app_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ReassociatePrimaryUserRequest::ArenaDtor(void* object) {
  ReassociatePrimaryUserRequest* _this = reinterpret_cast< ReassociatePrimaryUserRequest* >(object);
  (void)_this;
}
void ReassociatePrimaryUserRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ReassociatePrimaryUserRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ReassociatePrimaryUserRequest& ReassociatePrimaryUserRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ReassociatePrimaryUserRequest_token_2eproto.base);
  return *internal_default_instance();
}


void ReassociatePrimaryUserRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:tokenpb.ReassociatePrimaryUserRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  client_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  app_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&generate_sts_token_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&expiration_minutes_) -
      reinterpret_cast<char*>(&generate_sts_token_)) + sizeof(expiration_minutes_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReassociatePrimaryUserRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool generate_sts_token = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          generate_sts_token_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string client_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_client_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "tokenpb.ReassociatePrimaryUserRequest.client_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string app_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_app_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "tokenpb.ReassociatePrimaryUserRequest.app_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool skip_client_token = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          skip_client_token_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 expiration_minutes = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          expiration_minutes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ReassociatePrimaryUserRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tokenpb.ReassociatePrimaryUserRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool generate_sts_token = 1;
  if (this->generate_sts_token() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_generate_sts_token(), target);
  }

  // string client_name = 2;
  if (this->client_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_client_name().data(), static_cast<int>(this->_internal_client_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tokenpb.ReassociatePrimaryUserRequest.client_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_client_name(), target);
  }

  // string app_id = 3;
  if (this->app_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_app_id().data(), static_cast<int>(this->_internal_app_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tokenpb.ReassociatePrimaryUserRequest.app_id");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_app_id(), target);
  }

  // bool skip_client_token = 4;
  if (this->skip_client_token() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_skip_client_token(), target);
  }

  // uint32 expiration_minutes = 5;
  if (this->expiration_minutes() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_expiration_minutes(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tokenpb.ReassociatePrimaryUserRequest)
  return target;
}

size_t ReassociatePrimaryUserRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tokenpb.ReassociatePrimaryUserRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string client_name = 2;
  if (this->client_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_client_name());
  }

  // string app_id = 3;
  if (this->app_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_app_id());
  }

  // bool generate_sts_token = 1;
  if (this->generate_sts_token() != 0) {
    total_size += 1 + 1;
  }

  // bool skip_client_token = 4;
  if (this->skip_client_token() != 0) {
    total_size += 1 + 1;
  }

  // uint32 expiration_minutes = 5;
  if (this->expiration_minutes() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_expiration_minutes());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReassociatePrimaryUserRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tokenpb.ReassociatePrimaryUserRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ReassociatePrimaryUserRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ReassociatePrimaryUserRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tokenpb.ReassociatePrimaryUserRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tokenpb.ReassociatePrimaryUserRequest)
    MergeFrom(*source);
  }
}

void ReassociatePrimaryUserRequest::MergeFrom(const ReassociatePrimaryUserRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tokenpb.ReassociatePrimaryUserRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.client_name().size() > 0) {
    _internal_set_client_name(from._internal_client_name());
  }
  if (from.app_id().size() > 0) {
    _internal_set_app_id(from._internal_app_id());
  }
  if (from.generate_sts_token() != 0) {
    _internal_set_generate_sts_token(from._internal_generate_sts_token());
  }
  if (from.skip_client_token() != 0) {
    _internal_set_skip_client_token(from._internal_skip_client_token());
  }
  if (from.expiration_minutes() != 0) {
    _internal_set_expiration_minutes(from._internal_expiration_minutes());
  }
}

void ReassociatePrimaryUserRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tokenpb.ReassociatePrimaryUserRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReassociatePrimaryUserRequest::CopyFrom(const ReassociatePrimaryUserRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tokenpb.ReassociatePrimaryUserRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReassociatePrimaryUserRequest::IsInitialized() const {
  return true;
}

void ReassociatePrimaryUserRequest::InternalSwap(ReassociatePrimaryUserRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  client_name_.Swap(&other->client_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  app_id_.Swap(&other->app_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ReassociatePrimaryUserRequest, expiration_minutes_)
      + sizeof(ReassociatePrimaryUserRequest::expiration_minutes_)
      - PROTOBUF_FIELD_OFFSET(ReassociatePrimaryUserRequest, generate_sts_token_)>(
          reinterpret_cast<char*>(&generate_sts_token_),
          reinterpret_cast<char*>(&other->generate_sts_token_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ReassociatePrimaryUserRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ReassociatePrimaryUserResponse::InitAsDefaultInstance() {
  ::tokenpb::_ReassociatePrimaryUserResponse_default_instance_._instance.get_mutable()->data_ = const_cast< ::tokenpb::TokenBundle*>(
      ::tokenpb::TokenBundle::internal_default_instance());
}
class ReassociatePrimaryUserResponse::_Internal {
 public:
  static const ::tokenpb::TokenBundle& data(const ReassociatePrimaryUserResponse* msg);
};

const ::tokenpb::TokenBundle&
ReassociatePrimaryUserResponse::_Internal::data(const ReassociatePrimaryUserResponse* msg) {
  return *msg->data_;
}
ReassociatePrimaryUserResponse::ReassociatePrimaryUserResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tokenpb.ReassociatePrimaryUserResponse)
}
ReassociatePrimaryUserResponse::ReassociatePrimaryUserResponse(const ReassociatePrimaryUserResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_data()) {
    data_ = new ::tokenpb::TokenBundle(*from.data_);
  } else {
    data_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:tokenpb.ReassociatePrimaryUserResponse)
}

void ReassociatePrimaryUserResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ReassociatePrimaryUserResponse_token_2eproto.base);
  data_ = nullptr;
}

ReassociatePrimaryUserResponse::~ReassociatePrimaryUserResponse() {
  // @@protoc_insertion_point(destructor:tokenpb.ReassociatePrimaryUserResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ReassociatePrimaryUserResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete data_;
}

void ReassociatePrimaryUserResponse::ArenaDtor(void* object) {
  ReassociatePrimaryUserResponse* _this = reinterpret_cast< ReassociatePrimaryUserResponse* >(object);
  (void)_this;
}
void ReassociatePrimaryUserResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ReassociatePrimaryUserResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ReassociatePrimaryUserResponse& ReassociatePrimaryUserResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ReassociatePrimaryUserResponse_token_2eproto.base);
  return *internal_default_instance();
}


void ReassociatePrimaryUserResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:tokenpb.ReassociatePrimaryUserResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && data_ != nullptr) {
    delete data_;
  }
  data_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReassociatePrimaryUserResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .tokenpb.TokenBundle data = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_data(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ReassociatePrimaryUserResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tokenpb.ReassociatePrimaryUserResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .tokenpb.TokenBundle data = 1;
  if (this->has_data()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::data(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tokenpb.ReassociatePrimaryUserResponse)
  return target;
}

size_t ReassociatePrimaryUserResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tokenpb.ReassociatePrimaryUserResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .tokenpb.TokenBundle data = 1;
  if (this->has_data()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *data_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReassociatePrimaryUserResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tokenpb.ReassociatePrimaryUserResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const ReassociatePrimaryUserResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ReassociatePrimaryUserResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tokenpb.ReassociatePrimaryUserResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tokenpb.ReassociatePrimaryUserResponse)
    MergeFrom(*source);
  }
}

void ReassociatePrimaryUserResponse::MergeFrom(const ReassociatePrimaryUserResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tokenpb.ReassociatePrimaryUserResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_data()) {
    _internal_mutable_data()->::tokenpb::TokenBundle::MergeFrom(from._internal_data());
  }
}

void ReassociatePrimaryUserResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tokenpb.ReassociatePrimaryUserResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReassociatePrimaryUserResponse::CopyFrom(const ReassociatePrimaryUserResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tokenpb.ReassociatePrimaryUserResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReassociatePrimaryUserResponse::IsInitialized() const {
  return true;
}

void ReassociatePrimaryUserResponse::InternalSwap(ReassociatePrimaryUserResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(data_, other->data_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ReassociatePrimaryUserResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AssociatePrimaryUserResponse::InitAsDefaultInstance() {
  ::tokenpb::_AssociatePrimaryUserResponse_default_instance_._instance.get_mutable()->data_ = const_cast< ::tokenpb::TokenBundle*>(
      ::tokenpb::TokenBundle::internal_default_instance());
}
class AssociatePrimaryUserResponse::_Internal {
 public:
  static const ::tokenpb::TokenBundle& data(const AssociatePrimaryUserResponse* msg);
};

const ::tokenpb::TokenBundle&
AssociatePrimaryUserResponse::_Internal::data(const AssociatePrimaryUserResponse* msg) {
  return *msg->data_;
}
AssociatePrimaryUserResponse::AssociatePrimaryUserResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tokenpb.AssociatePrimaryUserResponse)
}
AssociatePrimaryUserResponse::AssociatePrimaryUserResponse(const AssociatePrimaryUserResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_data()) {
    data_ = new ::tokenpb::TokenBundle(*from.data_);
  } else {
    data_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:tokenpb.AssociatePrimaryUserResponse)
}

void AssociatePrimaryUserResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AssociatePrimaryUserResponse_token_2eproto.base);
  data_ = nullptr;
}

AssociatePrimaryUserResponse::~AssociatePrimaryUserResponse() {
  // @@protoc_insertion_point(destructor:tokenpb.AssociatePrimaryUserResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AssociatePrimaryUserResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete data_;
}

void AssociatePrimaryUserResponse::ArenaDtor(void* object) {
  AssociatePrimaryUserResponse* _this = reinterpret_cast< AssociatePrimaryUserResponse* >(object);
  (void)_this;
}
void AssociatePrimaryUserResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AssociatePrimaryUserResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AssociatePrimaryUserResponse& AssociatePrimaryUserResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AssociatePrimaryUserResponse_token_2eproto.base);
  return *internal_default_instance();
}


void AssociatePrimaryUserResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:tokenpb.AssociatePrimaryUserResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && data_ != nullptr) {
    delete data_;
  }
  data_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AssociatePrimaryUserResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .tokenpb.TokenBundle data = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_data(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AssociatePrimaryUserResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tokenpb.AssociatePrimaryUserResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .tokenpb.TokenBundle data = 1;
  if (this->has_data()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::data(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tokenpb.AssociatePrimaryUserResponse)
  return target;
}

size_t AssociatePrimaryUserResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tokenpb.AssociatePrimaryUserResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .tokenpb.TokenBundle data = 1;
  if (this->has_data()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *data_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AssociatePrimaryUserResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tokenpb.AssociatePrimaryUserResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const AssociatePrimaryUserResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AssociatePrimaryUserResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tokenpb.AssociatePrimaryUserResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tokenpb.AssociatePrimaryUserResponse)
    MergeFrom(*source);
  }
}

void AssociatePrimaryUserResponse::MergeFrom(const AssociatePrimaryUserResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tokenpb.AssociatePrimaryUserResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_data()) {
    _internal_mutable_data()->::tokenpb::TokenBundle::MergeFrom(from._internal_data());
  }
}

void AssociatePrimaryUserResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tokenpb.AssociatePrimaryUserResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AssociatePrimaryUserResponse::CopyFrom(const AssociatePrimaryUserResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tokenpb.AssociatePrimaryUserResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AssociatePrimaryUserResponse::IsInitialized() const {
  return true;
}

void AssociatePrimaryUserResponse::InternalSwap(AssociatePrimaryUserResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(data_, other->data_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AssociatePrimaryUserResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AssociateSecondaryClientRequest::InitAsDefaultInstance() {
}
class AssociateSecondaryClientRequest::_Internal {
 public:
};

AssociateSecondaryClientRequest::AssociateSecondaryClientRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tokenpb.AssociateSecondaryClientRequest)
}
AssociateSecondaryClientRequest::AssociateSecondaryClientRequest(const AssociateSecondaryClientRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  user_session_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_user_session().empty()) {
    user_session_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_user_session(),
      GetArena());
  }
  client_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_client_name().empty()) {
    client_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_client_name(),
      GetArena());
  }
  app_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_app_id().empty()) {
    app_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_app_id(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:tokenpb.AssociateSecondaryClientRequest)
}

void AssociateSecondaryClientRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AssociateSecondaryClientRequest_token_2eproto.base);
  user_session_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  client_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  app_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

AssociateSecondaryClientRequest::~AssociateSecondaryClientRequest() {
  // @@protoc_insertion_point(destructor:tokenpb.AssociateSecondaryClientRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AssociateSecondaryClientRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  user_session_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  client_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  app_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void AssociateSecondaryClientRequest::ArenaDtor(void* object) {
  AssociateSecondaryClientRequest* _this = reinterpret_cast< AssociateSecondaryClientRequest* >(object);
  (void)_this;
}
void AssociateSecondaryClientRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AssociateSecondaryClientRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AssociateSecondaryClientRequest& AssociateSecondaryClientRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AssociateSecondaryClientRequest_token_2eproto.base);
  return *internal_default_instance();
}


void AssociateSecondaryClientRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:tokenpb.AssociateSecondaryClientRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  user_session_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  client_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  app_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AssociateSecondaryClientRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string user_session = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_user_session();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "tokenpb.AssociateSecondaryClientRequest.user_session"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string client_name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_client_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "tokenpb.AssociateSecondaryClientRequest.client_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string app_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_app_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "tokenpb.AssociateSecondaryClientRequest.app_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AssociateSecondaryClientRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tokenpb.AssociateSecondaryClientRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string user_session = 2;
  if (this->user_session().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_user_session().data(), static_cast<int>(this->_internal_user_session().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tokenpb.AssociateSecondaryClientRequest.user_session");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_user_session(), target);
  }

  // string client_name = 3;
  if (this->client_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_client_name().data(), static_cast<int>(this->_internal_client_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tokenpb.AssociateSecondaryClientRequest.client_name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_client_name(), target);
  }

  // string app_id = 4;
  if (this->app_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_app_id().data(), static_cast<int>(this->_internal_app_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tokenpb.AssociateSecondaryClientRequest.app_id");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_app_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tokenpb.AssociateSecondaryClientRequest)
  return target;
}

size_t AssociateSecondaryClientRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tokenpb.AssociateSecondaryClientRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string user_session = 2;
  if (this->user_session().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_user_session());
  }

  // string client_name = 3;
  if (this->client_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_client_name());
  }

  // string app_id = 4;
  if (this->app_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_app_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AssociateSecondaryClientRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tokenpb.AssociateSecondaryClientRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const AssociateSecondaryClientRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AssociateSecondaryClientRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tokenpb.AssociateSecondaryClientRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tokenpb.AssociateSecondaryClientRequest)
    MergeFrom(*source);
  }
}

void AssociateSecondaryClientRequest::MergeFrom(const AssociateSecondaryClientRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tokenpb.AssociateSecondaryClientRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.user_session().size() > 0) {
    _internal_set_user_session(from._internal_user_session());
  }
  if (from.client_name().size() > 0) {
    _internal_set_client_name(from._internal_client_name());
  }
  if (from.app_id().size() > 0) {
    _internal_set_app_id(from._internal_app_id());
  }
}

void AssociateSecondaryClientRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tokenpb.AssociateSecondaryClientRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AssociateSecondaryClientRequest::CopyFrom(const AssociateSecondaryClientRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tokenpb.AssociateSecondaryClientRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AssociateSecondaryClientRequest::IsInitialized() const {
  return true;
}

void AssociateSecondaryClientRequest::InternalSwap(AssociateSecondaryClientRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  user_session_.Swap(&other->user_session_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  client_name_.Swap(&other->client_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  app_id_.Swap(&other->app_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata AssociateSecondaryClientRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AssociateSecondaryClientResponse::InitAsDefaultInstance() {
  ::tokenpb::_AssociateSecondaryClientResponse_default_instance_._instance.get_mutable()->data_ = const_cast< ::tokenpb::TokenBundle*>(
      ::tokenpb::TokenBundle::internal_default_instance());
}
class AssociateSecondaryClientResponse::_Internal {
 public:
  static const ::tokenpb::TokenBundle& data(const AssociateSecondaryClientResponse* msg);
};

const ::tokenpb::TokenBundle&
AssociateSecondaryClientResponse::_Internal::data(const AssociateSecondaryClientResponse* msg) {
  return *msg->data_;
}
AssociateSecondaryClientResponse::AssociateSecondaryClientResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tokenpb.AssociateSecondaryClientResponse)
}
AssociateSecondaryClientResponse::AssociateSecondaryClientResponse(const AssociateSecondaryClientResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_data()) {
    data_ = new ::tokenpb::TokenBundle(*from.data_);
  } else {
    data_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:tokenpb.AssociateSecondaryClientResponse)
}

void AssociateSecondaryClientResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AssociateSecondaryClientResponse_token_2eproto.base);
  data_ = nullptr;
}

AssociateSecondaryClientResponse::~AssociateSecondaryClientResponse() {
  // @@protoc_insertion_point(destructor:tokenpb.AssociateSecondaryClientResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AssociateSecondaryClientResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete data_;
}

void AssociateSecondaryClientResponse::ArenaDtor(void* object) {
  AssociateSecondaryClientResponse* _this = reinterpret_cast< AssociateSecondaryClientResponse* >(object);
  (void)_this;
}
void AssociateSecondaryClientResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AssociateSecondaryClientResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AssociateSecondaryClientResponse& AssociateSecondaryClientResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AssociateSecondaryClientResponse_token_2eproto.base);
  return *internal_default_instance();
}


void AssociateSecondaryClientResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:tokenpb.AssociateSecondaryClientResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && data_ != nullptr) {
    delete data_;
  }
  data_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AssociateSecondaryClientResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .tokenpb.TokenBundle data = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_data(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AssociateSecondaryClientResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tokenpb.AssociateSecondaryClientResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .tokenpb.TokenBundle data = 1;
  if (this->has_data()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::data(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tokenpb.AssociateSecondaryClientResponse)
  return target;
}

size_t AssociateSecondaryClientResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tokenpb.AssociateSecondaryClientResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .tokenpb.TokenBundle data = 1;
  if (this->has_data()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *data_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AssociateSecondaryClientResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tokenpb.AssociateSecondaryClientResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const AssociateSecondaryClientResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AssociateSecondaryClientResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tokenpb.AssociateSecondaryClientResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tokenpb.AssociateSecondaryClientResponse)
    MergeFrom(*source);
  }
}

void AssociateSecondaryClientResponse::MergeFrom(const AssociateSecondaryClientResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tokenpb.AssociateSecondaryClientResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_data()) {
    _internal_mutable_data()->::tokenpb::TokenBundle::MergeFrom(from._internal_data());
  }
}

void AssociateSecondaryClientResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tokenpb.AssociateSecondaryClientResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AssociateSecondaryClientResponse::CopyFrom(const AssociateSecondaryClientResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tokenpb.AssociateSecondaryClientResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AssociateSecondaryClientResponse::IsInitialized() const {
  return true;
}

void AssociateSecondaryClientResponse::InternalSwap(AssociateSecondaryClientResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(data_, other->data_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AssociateSecondaryClientResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DisassociatePrimaryUserRequest::InitAsDefaultInstance() {
}
class DisassociatePrimaryUserRequest::_Internal {
 public:
};

DisassociatePrimaryUserRequest::DisassociatePrimaryUserRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tokenpb.DisassociatePrimaryUserRequest)
}
DisassociatePrimaryUserRequest::DisassociatePrimaryUserRequest(const DisassociatePrimaryUserRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:tokenpb.DisassociatePrimaryUserRequest)
}

void DisassociatePrimaryUserRequest::SharedCtor() {
}

DisassociatePrimaryUserRequest::~DisassociatePrimaryUserRequest() {
  // @@protoc_insertion_point(destructor:tokenpb.DisassociatePrimaryUserRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DisassociatePrimaryUserRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void DisassociatePrimaryUserRequest::ArenaDtor(void* object) {
  DisassociatePrimaryUserRequest* _this = reinterpret_cast< DisassociatePrimaryUserRequest* >(object);
  (void)_this;
}
void DisassociatePrimaryUserRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DisassociatePrimaryUserRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DisassociatePrimaryUserRequest& DisassociatePrimaryUserRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DisassociatePrimaryUserRequest_token_2eproto.base);
  return *internal_default_instance();
}


void DisassociatePrimaryUserRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:tokenpb.DisassociatePrimaryUserRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DisassociatePrimaryUserRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DisassociatePrimaryUserRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tokenpb.DisassociatePrimaryUserRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tokenpb.DisassociatePrimaryUserRequest)
  return target;
}

size_t DisassociatePrimaryUserRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tokenpb.DisassociatePrimaryUserRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DisassociatePrimaryUserRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tokenpb.DisassociatePrimaryUserRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const DisassociatePrimaryUserRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DisassociatePrimaryUserRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tokenpb.DisassociatePrimaryUserRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tokenpb.DisassociatePrimaryUserRequest)
    MergeFrom(*source);
  }
}

void DisassociatePrimaryUserRequest::MergeFrom(const DisassociatePrimaryUserRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tokenpb.DisassociatePrimaryUserRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void DisassociatePrimaryUserRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tokenpb.DisassociatePrimaryUserRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DisassociatePrimaryUserRequest::CopyFrom(const DisassociatePrimaryUserRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tokenpb.DisassociatePrimaryUserRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DisassociatePrimaryUserRequest::IsInitialized() const {
  return true;
}

void DisassociatePrimaryUserRequest::InternalSwap(DisassociatePrimaryUserRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DisassociatePrimaryUserRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DisassociatePrimaryUserResponse::InitAsDefaultInstance() {
}
class DisassociatePrimaryUserResponse::_Internal {
 public:
};

DisassociatePrimaryUserResponse::DisassociatePrimaryUserResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tokenpb.DisassociatePrimaryUserResponse)
}
DisassociatePrimaryUserResponse::DisassociatePrimaryUserResponse(const DisassociatePrimaryUserResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:tokenpb.DisassociatePrimaryUserResponse)
}

void DisassociatePrimaryUserResponse::SharedCtor() {
}

DisassociatePrimaryUserResponse::~DisassociatePrimaryUserResponse() {
  // @@protoc_insertion_point(destructor:tokenpb.DisassociatePrimaryUserResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DisassociatePrimaryUserResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void DisassociatePrimaryUserResponse::ArenaDtor(void* object) {
  DisassociatePrimaryUserResponse* _this = reinterpret_cast< DisassociatePrimaryUserResponse* >(object);
  (void)_this;
}
void DisassociatePrimaryUserResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DisassociatePrimaryUserResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DisassociatePrimaryUserResponse& DisassociatePrimaryUserResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DisassociatePrimaryUserResponse_token_2eproto.base);
  return *internal_default_instance();
}


void DisassociatePrimaryUserResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:tokenpb.DisassociatePrimaryUserResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DisassociatePrimaryUserResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DisassociatePrimaryUserResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tokenpb.DisassociatePrimaryUserResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tokenpb.DisassociatePrimaryUserResponse)
  return target;
}

size_t DisassociatePrimaryUserResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tokenpb.DisassociatePrimaryUserResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DisassociatePrimaryUserResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tokenpb.DisassociatePrimaryUserResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const DisassociatePrimaryUserResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DisassociatePrimaryUserResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tokenpb.DisassociatePrimaryUserResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tokenpb.DisassociatePrimaryUserResponse)
    MergeFrom(*source);
  }
}

void DisassociatePrimaryUserResponse::MergeFrom(const DisassociatePrimaryUserResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tokenpb.DisassociatePrimaryUserResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void DisassociatePrimaryUserResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tokenpb.DisassociatePrimaryUserResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DisassociatePrimaryUserResponse::CopyFrom(const DisassociatePrimaryUserResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tokenpb.DisassociatePrimaryUserResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DisassociatePrimaryUserResponse::IsInitialized() const {
  return true;
}

void DisassociatePrimaryUserResponse::InternalSwap(DisassociatePrimaryUserResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DisassociatePrimaryUserResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RefreshTokenRequest::InitAsDefaultInstance() {
}
class RefreshTokenRequest::_Internal {
 public:
};

RefreshTokenRequest::RefreshTokenRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tokenpb.RefreshTokenRequest)
}
RefreshTokenRequest::RefreshTokenRequest(const RefreshTokenRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&refresh_jwt_tokens_, &from.refresh_jwt_tokens_,
    static_cast<size_t>(reinterpret_cast<char*>(&expiration_minutes_) -
    reinterpret_cast<char*>(&refresh_jwt_tokens_)) + sizeof(expiration_minutes_));
  // @@protoc_insertion_point(copy_constructor:tokenpb.RefreshTokenRequest)
}

void RefreshTokenRequest::SharedCtor() {
  ::memset(&refresh_jwt_tokens_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&expiration_minutes_) -
      reinterpret_cast<char*>(&refresh_jwt_tokens_)) + sizeof(expiration_minutes_));
}

RefreshTokenRequest::~RefreshTokenRequest() {
  // @@protoc_insertion_point(destructor:tokenpb.RefreshTokenRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RefreshTokenRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void RefreshTokenRequest::ArenaDtor(void* object) {
  RefreshTokenRequest* _this = reinterpret_cast< RefreshTokenRequest* >(object);
  (void)_this;
}
void RefreshTokenRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RefreshTokenRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RefreshTokenRequest& RefreshTokenRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RefreshTokenRequest_token_2eproto.base);
  return *internal_default_instance();
}


void RefreshTokenRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:tokenpb.RefreshTokenRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&refresh_jwt_tokens_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&expiration_minutes_) -
      reinterpret_cast<char*>(&refresh_jwt_tokens_)) + sizeof(expiration_minutes_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RefreshTokenRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool refresh_jwt_tokens = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          refresh_jwt_tokens_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool refresh_sts_tokens = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          refresh_sts_tokens_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 expiration_minutes = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          expiration_minutes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RefreshTokenRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tokenpb.RefreshTokenRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool refresh_jwt_tokens = 2;
  if (this->refresh_jwt_tokens() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_refresh_jwt_tokens(), target);
  }

  // bool refresh_sts_tokens = 3;
  if (this->refresh_sts_tokens() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_refresh_sts_tokens(), target);
  }

  // uint32 expiration_minutes = 4;
  if (this->expiration_minutes() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_expiration_minutes(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tokenpb.RefreshTokenRequest)
  return target;
}

size_t RefreshTokenRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tokenpb.RefreshTokenRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool refresh_jwt_tokens = 2;
  if (this->refresh_jwt_tokens() != 0) {
    total_size += 1 + 1;
  }

  // bool refresh_sts_tokens = 3;
  if (this->refresh_sts_tokens() != 0) {
    total_size += 1 + 1;
  }

  // uint32 expiration_minutes = 4;
  if (this->expiration_minutes() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_expiration_minutes());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RefreshTokenRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tokenpb.RefreshTokenRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const RefreshTokenRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RefreshTokenRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tokenpb.RefreshTokenRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tokenpb.RefreshTokenRequest)
    MergeFrom(*source);
  }
}

void RefreshTokenRequest::MergeFrom(const RefreshTokenRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tokenpb.RefreshTokenRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.refresh_jwt_tokens() != 0) {
    _internal_set_refresh_jwt_tokens(from._internal_refresh_jwt_tokens());
  }
  if (from.refresh_sts_tokens() != 0) {
    _internal_set_refresh_sts_tokens(from._internal_refresh_sts_tokens());
  }
  if (from.expiration_minutes() != 0) {
    _internal_set_expiration_minutes(from._internal_expiration_minutes());
  }
}

void RefreshTokenRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tokenpb.RefreshTokenRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RefreshTokenRequest::CopyFrom(const RefreshTokenRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tokenpb.RefreshTokenRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RefreshTokenRequest::IsInitialized() const {
  return true;
}

void RefreshTokenRequest::InternalSwap(RefreshTokenRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RefreshTokenRequest, expiration_minutes_)
      + sizeof(RefreshTokenRequest::expiration_minutes_)
      - PROTOBUF_FIELD_OFFSET(RefreshTokenRequest, refresh_jwt_tokens_)>(
          reinterpret_cast<char*>(&refresh_jwt_tokens_),
          reinterpret_cast<char*>(&other->refresh_jwt_tokens_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RefreshTokenRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RefreshTokenResponse::InitAsDefaultInstance() {
  ::tokenpb::_RefreshTokenResponse_default_instance_._instance.get_mutable()->data_ = const_cast< ::tokenpb::TokenBundle*>(
      ::tokenpb::TokenBundle::internal_default_instance());
}
class RefreshTokenResponse::_Internal {
 public:
  static const ::tokenpb::TokenBundle& data(const RefreshTokenResponse* msg);
};

const ::tokenpb::TokenBundle&
RefreshTokenResponse::_Internal::data(const RefreshTokenResponse* msg) {
  return *msg->data_;
}
RefreshTokenResponse::RefreshTokenResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tokenpb.RefreshTokenResponse)
}
RefreshTokenResponse::RefreshTokenResponse(const RefreshTokenResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_data()) {
    data_ = new ::tokenpb::TokenBundle(*from.data_);
  } else {
    data_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:tokenpb.RefreshTokenResponse)
}

void RefreshTokenResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RefreshTokenResponse_token_2eproto.base);
  data_ = nullptr;
}

RefreshTokenResponse::~RefreshTokenResponse() {
  // @@protoc_insertion_point(destructor:tokenpb.RefreshTokenResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RefreshTokenResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete data_;
}

void RefreshTokenResponse::ArenaDtor(void* object) {
  RefreshTokenResponse* _this = reinterpret_cast< RefreshTokenResponse* >(object);
  (void)_this;
}
void RefreshTokenResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RefreshTokenResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RefreshTokenResponse& RefreshTokenResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RefreshTokenResponse_token_2eproto.base);
  return *internal_default_instance();
}


void RefreshTokenResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:tokenpb.RefreshTokenResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && data_ != nullptr) {
    delete data_;
  }
  data_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RefreshTokenResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .tokenpb.TokenBundle data = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_data(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RefreshTokenResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tokenpb.RefreshTokenResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .tokenpb.TokenBundle data = 1;
  if (this->has_data()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::data(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tokenpb.RefreshTokenResponse)
  return target;
}

size_t RefreshTokenResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tokenpb.RefreshTokenResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .tokenpb.TokenBundle data = 1;
  if (this->has_data()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *data_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RefreshTokenResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tokenpb.RefreshTokenResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const RefreshTokenResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RefreshTokenResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tokenpb.RefreshTokenResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tokenpb.RefreshTokenResponse)
    MergeFrom(*source);
  }
}

void RefreshTokenResponse::MergeFrom(const RefreshTokenResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tokenpb.RefreshTokenResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_data()) {
    _internal_mutable_data()->::tokenpb::TokenBundle::MergeFrom(from._internal_data());
  }
}

void RefreshTokenResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tokenpb.RefreshTokenResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RefreshTokenResponse::CopyFrom(const RefreshTokenResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tokenpb.RefreshTokenResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RefreshTokenResponse::IsInitialized() const {
  return true;
}

void RefreshTokenResponse::InternalSwap(RefreshTokenResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(data_, other->data_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RefreshTokenResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TokensPage::InitAsDefaultInstance() {
}
class TokensPage::_Internal {
 public:
};

TokensPage::TokensPage(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  tokens_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tokenpb.TokensPage)
}
TokensPage::TokensPage(const TokensPage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      tokens_(from.tokens_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  last_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_last_key().empty()) {
    last_key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_last_key(),
      GetArena());
  }
  done_ = from.done_;
  // @@protoc_insertion_point(copy_constructor:tokenpb.TokensPage)
}

void TokensPage::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TokensPage_token_2eproto.base);
  last_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  done_ = false;
}

TokensPage::~TokensPage() {
  // @@protoc_insertion_point(destructor:tokenpb.TokensPage)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TokensPage::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  last_key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void TokensPage::ArenaDtor(void* object) {
  TokensPage* _this = reinterpret_cast< TokensPage* >(object);
  (void)_this;
}
void TokensPage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TokensPage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TokensPage& TokensPage::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TokensPage_token_2eproto.base);
  return *internal_default_instance();
}


void TokensPage::Clear() {
// @@protoc_insertion_point(message_clear_start:tokenpb.TokensPage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tokens_.Clear();
  last_key_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  done_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TokensPage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated string tokens = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_tokens();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "tokenpb.TokensPage.tokens"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // string last_key = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_last_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "tokenpb.TokensPage.last_key"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool done = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          done_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TokensPage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tokenpb.TokensPage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string tokens = 1;
  for (int i = 0, n = this->_internal_tokens_size(); i < n; i++) {
    const auto& s = this->_internal_tokens(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tokenpb.TokensPage.tokens");
    target = stream->WriteString(1, s, target);
  }

  // string last_key = 2;
  if (this->last_key().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_last_key().data(), static_cast<int>(this->_internal_last_key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tokenpb.TokensPage.last_key");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_last_key(), target);
  }

  // bool done = 3;
  if (this->done() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_done(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tokenpb.TokensPage)
  return target;
}

size_t TokensPage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tokenpb.TokensPage)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string tokens = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(tokens_.size());
  for (int i = 0, n = tokens_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      tokens_.Get(i));
  }

  // string last_key = 2;
  if (this->last_key().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_last_key());
  }

  // bool done = 3;
  if (this->done() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TokensPage::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tokenpb.TokensPage)
  GOOGLE_DCHECK_NE(&from, this);
  const TokensPage* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TokensPage>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tokenpb.TokensPage)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tokenpb.TokensPage)
    MergeFrom(*source);
  }
}

void TokensPage::MergeFrom(const TokensPage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tokenpb.TokensPage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  tokens_.MergeFrom(from.tokens_);
  if (from.last_key().size() > 0) {
    _internal_set_last_key(from._internal_last_key());
  }
  if (from.done() != 0) {
    _internal_set_done(from._internal_done());
  }
}

void TokensPage::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tokenpb.TokensPage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TokensPage::CopyFrom(const TokensPage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tokenpb.TokensPage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TokensPage::IsInitialized() const {
  return true;
}

void TokensPage::InternalSwap(TokensPage* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  tokens_.InternalSwap(&other->tokens_);
  last_key_.Swap(&other->last_key_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(done_, other->done_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TokensPage::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ListRevokedTokensRequest::InitAsDefaultInstance() {
}
class ListRevokedTokensRequest::_Internal {
 public:
};

ListRevokedTokensRequest::ListRevokedTokensRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tokenpb.ListRevokedTokensRequest)
}
ListRevokedTokensRequest::ListRevokedTokensRequest(const ListRevokedTokensRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  previous_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_previous_key().empty()) {
    previous_key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_previous_key(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:tokenpb.ListRevokedTokensRequest)
}

void ListRevokedTokensRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ListRevokedTokensRequest_token_2eproto.base);
  previous_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

ListRevokedTokensRequest::~ListRevokedTokensRequest() {
  // @@protoc_insertion_point(destructor:tokenpb.ListRevokedTokensRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ListRevokedTokensRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  previous_key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ListRevokedTokensRequest::ArenaDtor(void* object) {
  ListRevokedTokensRequest* _this = reinterpret_cast< ListRevokedTokensRequest* >(object);
  (void)_this;
}
void ListRevokedTokensRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ListRevokedTokensRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ListRevokedTokensRequest& ListRevokedTokensRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ListRevokedTokensRequest_token_2eproto.base);
  return *internal_default_instance();
}


void ListRevokedTokensRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:tokenpb.ListRevokedTokensRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  previous_key_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ListRevokedTokensRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string previous_key = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_previous_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "tokenpb.ListRevokedTokensRequest.previous_key"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ListRevokedTokensRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tokenpb.ListRevokedTokensRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string previous_key = 1;
  if (this->previous_key().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_previous_key().data(), static_cast<int>(this->_internal_previous_key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tokenpb.ListRevokedTokensRequest.previous_key");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_previous_key(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tokenpb.ListRevokedTokensRequest)
  return target;
}

size_t ListRevokedTokensRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tokenpb.ListRevokedTokensRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string previous_key = 1;
  if (this->previous_key().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_previous_key());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ListRevokedTokensRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tokenpb.ListRevokedTokensRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ListRevokedTokensRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ListRevokedTokensRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tokenpb.ListRevokedTokensRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tokenpb.ListRevokedTokensRequest)
    MergeFrom(*source);
  }
}

void ListRevokedTokensRequest::MergeFrom(const ListRevokedTokensRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tokenpb.ListRevokedTokensRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.previous_key().size() > 0) {
    _internal_set_previous_key(from._internal_previous_key());
  }
}

void ListRevokedTokensRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tokenpb.ListRevokedTokensRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListRevokedTokensRequest::CopyFrom(const ListRevokedTokensRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tokenpb.ListRevokedTokensRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListRevokedTokensRequest::IsInitialized() const {
  return true;
}

void ListRevokedTokensRequest::InternalSwap(ListRevokedTokensRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  previous_key_.Swap(&other->previous_key_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata ListRevokedTokensRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ListRevokedTokensResponse::InitAsDefaultInstance() {
  ::tokenpb::_ListRevokedTokensResponse_default_instance_._instance.get_mutable()->data_ = const_cast< ::tokenpb::TokensPage*>(
      ::tokenpb::TokensPage::internal_default_instance());
}
class ListRevokedTokensResponse::_Internal {
 public:
  static const ::tokenpb::TokensPage& data(const ListRevokedTokensResponse* msg);
};

const ::tokenpb::TokensPage&
ListRevokedTokensResponse::_Internal::data(const ListRevokedTokensResponse* msg) {
  return *msg->data_;
}
ListRevokedTokensResponse::ListRevokedTokensResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tokenpb.ListRevokedTokensResponse)
}
ListRevokedTokensResponse::ListRevokedTokensResponse(const ListRevokedTokensResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_data()) {
    data_ = new ::tokenpb::TokensPage(*from.data_);
  } else {
    data_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:tokenpb.ListRevokedTokensResponse)
}

void ListRevokedTokensResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ListRevokedTokensResponse_token_2eproto.base);
  data_ = nullptr;
}

ListRevokedTokensResponse::~ListRevokedTokensResponse() {
  // @@protoc_insertion_point(destructor:tokenpb.ListRevokedTokensResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ListRevokedTokensResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete data_;
}

void ListRevokedTokensResponse::ArenaDtor(void* object) {
  ListRevokedTokensResponse* _this = reinterpret_cast< ListRevokedTokensResponse* >(object);
  (void)_this;
}
void ListRevokedTokensResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ListRevokedTokensResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ListRevokedTokensResponse& ListRevokedTokensResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ListRevokedTokensResponse_token_2eproto.base);
  return *internal_default_instance();
}


void ListRevokedTokensResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:tokenpb.ListRevokedTokensResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && data_ != nullptr) {
    delete data_;
  }
  data_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ListRevokedTokensResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .tokenpb.TokensPage data = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_data(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ListRevokedTokensResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tokenpb.ListRevokedTokensResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .tokenpb.TokensPage data = 1;
  if (this->has_data()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::data(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tokenpb.ListRevokedTokensResponse)
  return target;
}

size_t ListRevokedTokensResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tokenpb.ListRevokedTokensResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .tokenpb.TokensPage data = 1;
  if (this->has_data()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *data_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ListRevokedTokensResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tokenpb.ListRevokedTokensResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const ListRevokedTokensResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ListRevokedTokensResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tokenpb.ListRevokedTokensResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tokenpb.ListRevokedTokensResponse)
    MergeFrom(*source);
  }
}

void ListRevokedTokensResponse::MergeFrom(const ListRevokedTokensResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tokenpb.ListRevokedTokensResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_data()) {
    _internal_mutable_data()->::tokenpb::TokensPage::MergeFrom(from._internal_data());
  }
}

void ListRevokedTokensResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tokenpb.ListRevokedTokensResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListRevokedTokensResponse::CopyFrom(const ListRevokedTokensResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tokenpb.ListRevokedTokensResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListRevokedTokensResponse::IsInitialized() const {
  return true;
}

void ListRevokedTokensResponse::InternalSwap(ListRevokedTokensResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(data_, other->data_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ListRevokedTokensResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RevokeFactoryCertificateRequest::InitAsDefaultInstance() {
}
class RevokeFactoryCertificateRequest::_Internal {
 public:
};

RevokeFactoryCertificateRequest::RevokeFactoryCertificateRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tokenpb.RevokeFactoryCertificateRequest)
}
RevokeFactoryCertificateRequest::RevokeFactoryCertificateRequest(const RevokeFactoryCertificateRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  certificate_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_certificate_id().empty()) {
    certificate_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_certificate_id(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:tokenpb.RevokeFactoryCertificateRequest)
}

void RevokeFactoryCertificateRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RevokeFactoryCertificateRequest_token_2eproto.base);
  certificate_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

RevokeFactoryCertificateRequest::~RevokeFactoryCertificateRequest() {
  // @@protoc_insertion_point(destructor:tokenpb.RevokeFactoryCertificateRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RevokeFactoryCertificateRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  certificate_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void RevokeFactoryCertificateRequest::ArenaDtor(void* object) {
  RevokeFactoryCertificateRequest* _this = reinterpret_cast< RevokeFactoryCertificateRequest* >(object);
  (void)_this;
}
void RevokeFactoryCertificateRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RevokeFactoryCertificateRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RevokeFactoryCertificateRequest& RevokeFactoryCertificateRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RevokeFactoryCertificateRequest_token_2eproto.base);
  return *internal_default_instance();
}


void RevokeFactoryCertificateRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:tokenpb.RevokeFactoryCertificateRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  certificate_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RevokeFactoryCertificateRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string certificate_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_certificate_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "tokenpb.RevokeFactoryCertificateRequest.certificate_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RevokeFactoryCertificateRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tokenpb.RevokeFactoryCertificateRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string certificate_id = 1;
  if (this->certificate_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_certificate_id().data(), static_cast<int>(this->_internal_certificate_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tokenpb.RevokeFactoryCertificateRequest.certificate_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_certificate_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tokenpb.RevokeFactoryCertificateRequest)
  return target;
}

size_t RevokeFactoryCertificateRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tokenpb.RevokeFactoryCertificateRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string certificate_id = 1;
  if (this->certificate_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_certificate_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RevokeFactoryCertificateRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tokenpb.RevokeFactoryCertificateRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const RevokeFactoryCertificateRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RevokeFactoryCertificateRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tokenpb.RevokeFactoryCertificateRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tokenpb.RevokeFactoryCertificateRequest)
    MergeFrom(*source);
  }
}

void RevokeFactoryCertificateRequest::MergeFrom(const RevokeFactoryCertificateRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tokenpb.RevokeFactoryCertificateRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.certificate_id().size() > 0) {
    _internal_set_certificate_id(from._internal_certificate_id());
  }
}

void RevokeFactoryCertificateRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tokenpb.RevokeFactoryCertificateRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RevokeFactoryCertificateRequest::CopyFrom(const RevokeFactoryCertificateRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tokenpb.RevokeFactoryCertificateRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RevokeFactoryCertificateRequest::IsInitialized() const {
  return true;
}

void RevokeFactoryCertificateRequest::InternalSwap(RevokeFactoryCertificateRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  certificate_id_.Swap(&other->certificate_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata RevokeFactoryCertificateRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RevokeFactoryCertificateResponse::InitAsDefaultInstance() {
}
class RevokeFactoryCertificateResponse::_Internal {
 public:
};

RevokeFactoryCertificateResponse::RevokeFactoryCertificateResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tokenpb.RevokeFactoryCertificateResponse)
}
RevokeFactoryCertificateResponse::RevokeFactoryCertificateResponse(const RevokeFactoryCertificateResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:tokenpb.RevokeFactoryCertificateResponse)
}

void RevokeFactoryCertificateResponse::SharedCtor() {
}

RevokeFactoryCertificateResponse::~RevokeFactoryCertificateResponse() {
  // @@protoc_insertion_point(destructor:tokenpb.RevokeFactoryCertificateResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RevokeFactoryCertificateResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void RevokeFactoryCertificateResponse::ArenaDtor(void* object) {
  RevokeFactoryCertificateResponse* _this = reinterpret_cast< RevokeFactoryCertificateResponse* >(object);
  (void)_this;
}
void RevokeFactoryCertificateResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RevokeFactoryCertificateResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RevokeFactoryCertificateResponse& RevokeFactoryCertificateResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RevokeFactoryCertificateResponse_token_2eproto.base);
  return *internal_default_instance();
}


void RevokeFactoryCertificateResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:tokenpb.RevokeFactoryCertificateResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RevokeFactoryCertificateResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RevokeFactoryCertificateResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tokenpb.RevokeFactoryCertificateResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tokenpb.RevokeFactoryCertificateResponse)
  return target;
}

size_t RevokeFactoryCertificateResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tokenpb.RevokeFactoryCertificateResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RevokeFactoryCertificateResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tokenpb.RevokeFactoryCertificateResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const RevokeFactoryCertificateResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RevokeFactoryCertificateResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tokenpb.RevokeFactoryCertificateResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tokenpb.RevokeFactoryCertificateResponse)
    MergeFrom(*source);
  }
}

void RevokeFactoryCertificateResponse::MergeFrom(const RevokeFactoryCertificateResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tokenpb.RevokeFactoryCertificateResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void RevokeFactoryCertificateResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tokenpb.RevokeFactoryCertificateResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RevokeFactoryCertificateResponse::CopyFrom(const RevokeFactoryCertificateResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tokenpb.RevokeFactoryCertificateResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RevokeFactoryCertificateResponse::IsInitialized() const {
  return true;
}

void RevokeFactoryCertificateResponse::InternalSwap(RevokeFactoryCertificateResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RevokeFactoryCertificateResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RevokeTokensRequest::InitAsDefaultInstance() {
}
class RevokeTokensRequest::_Internal {
 public:
};

RevokeTokensRequest::RevokeTokensRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tokenpb.RevokeTokensRequest)
}
RevokeTokensRequest::RevokeTokensRequest(const RevokeTokensRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  search_by_index_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_search_by_index().empty()) {
    search_by_index_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_search_by_index(),
      GetArena());
  }
  key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_key().empty()) {
    key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_key(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:tokenpb.RevokeTokensRequest)
}

void RevokeTokensRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RevokeTokensRequest_token_2eproto.base);
  search_by_index_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

RevokeTokensRequest::~RevokeTokensRequest() {
  // @@protoc_insertion_point(destructor:tokenpb.RevokeTokensRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RevokeTokensRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  search_by_index_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void RevokeTokensRequest::ArenaDtor(void* object) {
  RevokeTokensRequest* _this = reinterpret_cast< RevokeTokensRequest* >(object);
  (void)_this;
}
void RevokeTokensRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RevokeTokensRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RevokeTokensRequest& RevokeTokensRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RevokeTokensRequest_token_2eproto.base);
  return *internal_default_instance();
}


void RevokeTokensRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:tokenpb.RevokeTokensRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  search_by_index_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  key_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RevokeTokensRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string search_by_index = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_search_by_index();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "tokenpb.RevokeTokensRequest.search_by_index"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string key = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "tokenpb.RevokeTokensRequest.key"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RevokeTokensRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tokenpb.RevokeTokensRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string search_by_index = 1;
  if (this->search_by_index().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_search_by_index().data(), static_cast<int>(this->_internal_search_by_index().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tokenpb.RevokeTokensRequest.search_by_index");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_search_by_index(), target);
  }

  // string key = 2;
  if (this->key().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_key().data(), static_cast<int>(this->_internal_key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tokenpb.RevokeTokensRequest.key");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_key(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tokenpb.RevokeTokensRequest)
  return target;
}

size_t RevokeTokensRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tokenpb.RevokeTokensRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string search_by_index = 1;
  if (this->search_by_index().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_search_by_index());
  }

  // string key = 2;
  if (this->key().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_key());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RevokeTokensRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tokenpb.RevokeTokensRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const RevokeTokensRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RevokeTokensRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tokenpb.RevokeTokensRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tokenpb.RevokeTokensRequest)
    MergeFrom(*source);
  }
}

void RevokeTokensRequest::MergeFrom(const RevokeTokensRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tokenpb.RevokeTokensRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.search_by_index().size() > 0) {
    _internal_set_search_by_index(from._internal_search_by_index());
  }
  if (from.key().size() > 0) {
    _internal_set_key(from._internal_key());
  }
}

void RevokeTokensRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tokenpb.RevokeTokensRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RevokeTokensRequest::CopyFrom(const RevokeTokensRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tokenpb.RevokeTokensRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RevokeTokensRequest::IsInitialized() const {
  return true;
}

void RevokeTokensRequest::InternalSwap(RevokeTokensRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  search_by_index_.Swap(&other->search_by_index_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  key_.Swap(&other->key_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata RevokeTokensRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RevokeTokensResponse::InitAsDefaultInstance() {
}
class RevokeTokensResponse::_Internal {
 public:
};

RevokeTokensResponse::RevokeTokensResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tokenpb.RevokeTokensResponse)
}
RevokeTokensResponse::RevokeTokensResponse(const RevokeTokensResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  tokens_revoked_ = from.tokens_revoked_;
  // @@protoc_insertion_point(copy_constructor:tokenpb.RevokeTokensResponse)
}

void RevokeTokensResponse::SharedCtor() {
  tokens_revoked_ = 0u;
}

RevokeTokensResponse::~RevokeTokensResponse() {
  // @@protoc_insertion_point(destructor:tokenpb.RevokeTokensResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RevokeTokensResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void RevokeTokensResponse::ArenaDtor(void* object) {
  RevokeTokensResponse* _this = reinterpret_cast< RevokeTokensResponse* >(object);
  (void)_this;
}
void RevokeTokensResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RevokeTokensResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RevokeTokensResponse& RevokeTokensResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RevokeTokensResponse_token_2eproto.base);
  return *internal_default_instance();
}


void RevokeTokensResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:tokenpb.RevokeTokensResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tokens_revoked_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RevokeTokensResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 tokens_revoked = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          tokens_revoked_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RevokeTokensResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tokenpb.RevokeTokensResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 tokens_revoked = 1;
  if (this->tokens_revoked() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_tokens_revoked(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tokenpb.RevokeTokensResponse)
  return target;
}

size_t RevokeTokensResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tokenpb.RevokeTokensResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 tokens_revoked = 1;
  if (this->tokens_revoked() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_tokens_revoked());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RevokeTokensResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tokenpb.RevokeTokensResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const RevokeTokensResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RevokeTokensResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tokenpb.RevokeTokensResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tokenpb.RevokeTokensResponse)
    MergeFrom(*source);
  }
}

void RevokeTokensResponse::MergeFrom(const RevokeTokensResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tokenpb.RevokeTokensResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.tokens_revoked() != 0) {
    _internal_set_tokens_revoked(from._internal_tokens_revoked());
  }
}

void RevokeTokensResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tokenpb.RevokeTokensResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RevokeTokensResponse::CopyFrom(const RevokeTokensResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tokenpb.RevokeTokensResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RevokeTokensResponse::IsInitialized() const {
  return true;
}

void RevokeTokensResponse::InternalSwap(RevokeTokensResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(tokens_revoked_, other->tokens_revoked_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RevokeTokensResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace tokenpb
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::tokenpb::TokenBundle* Arena::CreateMaybeMessage< ::tokenpb::TokenBundle >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tokenpb::TokenBundle >(arena);
}
template<> PROTOBUF_NOINLINE ::tokenpb::StsToken* Arena::CreateMaybeMessage< ::tokenpb::StsToken >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tokenpb::StsToken >(arena);
}
template<> PROTOBUF_NOINLINE ::tokenpb::AssociatePrimaryUserRequest* Arena::CreateMaybeMessage< ::tokenpb::AssociatePrimaryUserRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tokenpb::AssociatePrimaryUserRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::tokenpb::ReassociatePrimaryUserRequest* Arena::CreateMaybeMessage< ::tokenpb::ReassociatePrimaryUserRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tokenpb::ReassociatePrimaryUserRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::tokenpb::ReassociatePrimaryUserResponse* Arena::CreateMaybeMessage< ::tokenpb::ReassociatePrimaryUserResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tokenpb::ReassociatePrimaryUserResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::tokenpb::AssociatePrimaryUserResponse* Arena::CreateMaybeMessage< ::tokenpb::AssociatePrimaryUserResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tokenpb::AssociatePrimaryUserResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::tokenpb::AssociateSecondaryClientRequest* Arena::CreateMaybeMessage< ::tokenpb::AssociateSecondaryClientRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tokenpb::AssociateSecondaryClientRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::tokenpb::AssociateSecondaryClientResponse* Arena::CreateMaybeMessage< ::tokenpb::AssociateSecondaryClientResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tokenpb::AssociateSecondaryClientResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::tokenpb::DisassociatePrimaryUserRequest* Arena::CreateMaybeMessage< ::tokenpb::DisassociatePrimaryUserRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tokenpb::DisassociatePrimaryUserRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::tokenpb::DisassociatePrimaryUserResponse* Arena::CreateMaybeMessage< ::tokenpb::DisassociatePrimaryUserResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tokenpb::DisassociatePrimaryUserResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::tokenpb::RefreshTokenRequest* Arena::CreateMaybeMessage< ::tokenpb::RefreshTokenRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tokenpb::RefreshTokenRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::tokenpb::RefreshTokenResponse* Arena::CreateMaybeMessage< ::tokenpb::RefreshTokenResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tokenpb::RefreshTokenResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::tokenpb::TokensPage* Arena::CreateMaybeMessage< ::tokenpb::TokensPage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tokenpb::TokensPage >(arena);
}
template<> PROTOBUF_NOINLINE ::tokenpb::ListRevokedTokensRequest* Arena::CreateMaybeMessage< ::tokenpb::ListRevokedTokensRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tokenpb::ListRevokedTokensRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::tokenpb::ListRevokedTokensResponse* Arena::CreateMaybeMessage< ::tokenpb::ListRevokedTokensResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tokenpb::ListRevokedTokensResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::tokenpb::RevokeFactoryCertificateRequest* Arena::CreateMaybeMessage< ::tokenpb::RevokeFactoryCertificateRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tokenpb::RevokeFactoryCertificateRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::tokenpb::RevokeFactoryCertificateResponse* Arena::CreateMaybeMessage< ::tokenpb::RevokeFactoryCertificateResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tokenpb::RevokeFactoryCertificateResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::tokenpb::RevokeTokensRequest* Arena::CreateMaybeMessage< ::tokenpb::RevokeTokensRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tokenpb::RevokeTokensRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::tokenpb::RevokeTokensResponse* Arena::CreateMaybeMessage< ::tokenpb::RevokeTokensResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tokenpb::RevokeTokensResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
