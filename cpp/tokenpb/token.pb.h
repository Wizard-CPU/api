// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: token.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_token_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_token_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_token_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_token_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[19]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_token_2eproto;
namespace tokenpb {
class AssociatePrimaryUserRequest;
class AssociatePrimaryUserRequestDefaultTypeInternal;
extern AssociatePrimaryUserRequestDefaultTypeInternal _AssociatePrimaryUserRequest_default_instance_;
class AssociatePrimaryUserResponse;
class AssociatePrimaryUserResponseDefaultTypeInternal;
extern AssociatePrimaryUserResponseDefaultTypeInternal _AssociatePrimaryUserResponse_default_instance_;
class AssociateSecondaryClientRequest;
class AssociateSecondaryClientRequestDefaultTypeInternal;
extern AssociateSecondaryClientRequestDefaultTypeInternal _AssociateSecondaryClientRequest_default_instance_;
class AssociateSecondaryClientResponse;
class AssociateSecondaryClientResponseDefaultTypeInternal;
extern AssociateSecondaryClientResponseDefaultTypeInternal _AssociateSecondaryClientResponse_default_instance_;
class DisassociatePrimaryUserRequest;
class DisassociatePrimaryUserRequestDefaultTypeInternal;
extern DisassociatePrimaryUserRequestDefaultTypeInternal _DisassociatePrimaryUserRequest_default_instance_;
class DisassociatePrimaryUserResponse;
class DisassociatePrimaryUserResponseDefaultTypeInternal;
extern DisassociatePrimaryUserResponseDefaultTypeInternal _DisassociatePrimaryUserResponse_default_instance_;
class ListRevokedTokensRequest;
class ListRevokedTokensRequestDefaultTypeInternal;
extern ListRevokedTokensRequestDefaultTypeInternal _ListRevokedTokensRequest_default_instance_;
class ListRevokedTokensResponse;
class ListRevokedTokensResponseDefaultTypeInternal;
extern ListRevokedTokensResponseDefaultTypeInternal _ListRevokedTokensResponse_default_instance_;
class ReassociatePrimaryUserRequest;
class ReassociatePrimaryUserRequestDefaultTypeInternal;
extern ReassociatePrimaryUserRequestDefaultTypeInternal _ReassociatePrimaryUserRequest_default_instance_;
class ReassociatePrimaryUserResponse;
class ReassociatePrimaryUserResponseDefaultTypeInternal;
extern ReassociatePrimaryUserResponseDefaultTypeInternal _ReassociatePrimaryUserResponse_default_instance_;
class RefreshTokenRequest;
class RefreshTokenRequestDefaultTypeInternal;
extern RefreshTokenRequestDefaultTypeInternal _RefreshTokenRequest_default_instance_;
class RefreshTokenResponse;
class RefreshTokenResponseDefaultTypeInternal;
extern RefreshTokenResponseDefaultTypeInternal _RefreshTokenResponse_default_instance_;
class RevokeFactoryCertificateRequest;
class RevokeFactoryCertificateRequestDefaultTypeInternal;
extern RevokeFactoryCertificateRequestDefaultTypeInternal _RevokeFactoryCertificateRequest_default_instance_;
class RevokeFactoryCertificateResponse;
class RevokeFactoryCertificateResponseDefaultTypeInternal;
extern RevokeFactoryCertificateResponseDefaultTypeInternal _RevokeFactoryCertificateResponse_default_instance_;
class RevokeTokensRequest;
class RevokeTokensRequestDefaultTypeInternal;
extern RevokeTokensRequestDefaultTypeInternal _RevokeTokensRequest_default_instance_;
class RevokeTokensResponse;
class RevokeTokensResponseDefaultTypeInternal;
extern RevokeTokensResponseDefaultTypeInternal _RevokeTokensResponse_default_instance_;
class StsToken;
class StsTokenDefaultTypeInternal;
extern StsTokenDefaultTypeInternal _StsToken_default_instance_;
class TokenBundle;
class TokenBundleDefaultTypeInternal;
extern TokenBundleDefaultTypeInternal _TokenBundle_default_instance_;
class TokensPage;
class TokensPageDefaultTypeInternal;
extern TokensPageDefaultTypeInternal _TokensPage_default_instance_;
}  // namespace tokenpb
PROTOBUF_NAMESPACE_OPEN
template<> ::tokenpb::AssociatePrimaryUserRequest* Arena::CreateMaybeMessage<::tokenpb::AssociatePrimaryUserRequest>(Arena*);
template<> ::tokenpb::AssociatePrimaryUserResponse* Arena::CreateMaybeMessage<::tokenpb::AssociatePrimaryUserResponse>(Arena*);
template<> ::tokenpb::AssociateSecondaryClientRequest* Arena::CreateMaybeMessage<::tokenpb::AssociateSecondaryClientRequest>(Arena*);
template<> ::tokenpb::AssociateSecondaryClientResponse* Arena::CreateMaybeMessage<::tokenpb::AssociateSecondaryClientResponse>(Arena*);
template<> ::tokenpb::DisassociatePrimaryUserRequest* Arena::CreateMaybeMessage<::tokenpb::DisassociatePrimaryUserRequest>(Arena*);
template<> ::tokenpb::DisassociatePrimaryUserResponse* Arena::CreateMaybeMessage<::tokenpb::DisassociatePrimaryUserResponse>(Arena*);
template<> ::tokenpb::ListRevokedTokensRequest* Arena::CreateMaybeMessage<::tokenpb::ListRevokedTokensRequest>(Arena*);
template<> ::tokenpb::ListRevokedTokensResponse* Arena::CreateMaybeMessage<::tokenpb::ListRevokedTokensResponse>(Arena*);
template<> ::tokenpb::ReassociatePrimaryUserRequest* Arena::CreateMaybeMessage<::tokenpb::ReassociatePrimaryUserRequest>(Arena*);
template<> ::tokenpb::ReassociatePrimaryUserResponse* Arena::CreateMaybeMessage<::tokenpb::ReassociatePrimaryUserResponse>(Arena*);
template<> ::tokenpb::RefreshTokenRequest* Arena::CreateMaybeMessage<::tokenpb::RefreshTokenRequest>(Arena*);
template<> ::tokenpb::RefreshTokenResponse* Arena::CreateMaybeMessage<::tokenpb::RefreshTokenResponse>(Arena*);
template<> ::tokenpb::RevokeFactoryCertificateRequest* Arena::CreateMaybeMessage<::tokenpb::RevokeFactoryCertificateRequest>(Arena*);
template<> ::tokenpb::RevokeFactoryCertificateResponse* Arena::CreateMaybeMessage<::tokenpb::RevokeFactoryCertificateResponse>(Arena*);
template<> ::tokenpb::RevokeTokensRequest* Arena::CreateMaybeMessage<::tokenpb::RevokeTokensRequest>(Arena*);
template<> ::tokenpb::RevokeTokensResponse* Arena::CreateMaybeMessage<::tokenpb::RevokeTokensResponse>(Arena*);
template<> ::tokenpb::StsToken* Arena::CreateMaybeMessage<::tokenpb::StsToken>(Arena*);
template<> ::tokenpb::TokenBundle* Arena::CreateMaybeMessage<::tokenpb::TokenBundle>(Arena*);
template<> ::tokenpb::TokensPage* Arena::CreateMaybeMessage<::tokenpb::TokensPage>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace tokenpb {

// ===================================================================

class TokenBundle PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tokenpb.TokenBundle) */ {
 public:
  inline TokenBundle() : TokenBundle(nullptr) {};
  virtual ~TokenBundle();

  TokenBundle(const TokenBundle& from);
  TokenBundle(TokenBundle&& from) noexcept
    : TokenBundle() {
    *this = ::std::move(from);
  }

  inline TokenBundle& operator=(const TokenBundle& from) {
    CopyFrom(from);
    return *this;
  }
  inline TokenBundle& operator=(TokenBundle&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TokenBundle& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TokenBundle* internal_default_instance() {
    return reinterpret_cast<const TokenBundle*>(
               &_TokenBundle_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(TokenBundle& a, TokenBundle& b) {
    a.Swap(&b);
  }
  inline void Swap(TokenBundle* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TokenBundle* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TokenBundle* New() const final {
    return CreateMaybeMessage<TokenBundle>(nullptr);
  }

  TokenBundle* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TokenBundle>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TokenBundle& from);
  void MergeFrom(const TokenBundle& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TokenBundle* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tokenpb.TokenBundle";
  }
  protected:
  explicit TokenBundle(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_token_2eproto);
    return ::descriptor_table_token_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTokenFieldNumber = 1,
    kClientTokenFieldNumber = 2,
    kStsTokenFieldNumber = 4,
  };
  // string token = 1;
  void clear_token();
  const std::string& token() const;
  void set_token(const std::string& value);
  void set_token(std::string&& value);
  void set_token(const char* value);
  void set_token(const char* value, size_t size);
  std::string* mutable_token();
  std::string* release_token();
  void set_allocated_token(std::string* token);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_token();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_token(
      std::string* token);
  private:
  const std::string& _internal_token() const;
  void _internal_set_token(const std::string& value);
  std::string* _internal_mutable_token();
  public:

  // string client_token = 2;
  void clear_client_token();
  const std::string& client_token() const;
  void set_client_token(const std::string& value);
  void set_client_token(std::string&& value);
  void set_client_token(const char* value);
  void set_client_token(const char* value, size_t size);
  std::string* mutable_client_token();
  std::string* release_client_token();
  void set_allocated_client_token(std::string* client_token);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_client_token();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_client_token(
      std::string* client_token);
  private:
  const std::string& _internal_client_token() const;
  void _internal_set_client_token(const std::string& value);
  std::string* _internal_mutable_client_token();
  public:

  // .tokenpb.StsToken sts_token = 4;
  bool has_sts_token() const;
  private:
  bool _internal_has_sts_token() const;
  public:
  void clear_sts_token();
  const ::tokenpb::StsToken& sts_token() const;
  ::tokenpb::StsToken* release_sts_token();
  ::tokenpb::StsToken* mutable_sts_token();
  void set_allocated_sts_token(::tokenpb::StsToken* sts_token);
  private:
  const ::tokenpb::StsToken& _internal_sts_token() const;
  ::tokenpb::StsToken* _internal_mutable_sts_token();
  public:
  void unsafe_arena_set_allocated_sts_token(
      ::tokenpb::StsToken* sts_token);
  ::tokenpb::StsToken* unsafe_arena_release_sts_token();

  // @@protoc_insertion_point(class_scope:tokenpb.TokenBundle)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr token_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr client_token_;
  ::tokenpb::StsToken* sts_token_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_token_2eproto;
};
// -------------------------------------------------------------------

class StsToken PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tokenpb.StsToken) */ {
 public:
  inline StsToken() : StsToken(nullptr) {};
  virtual ~StsToken();

  StsToken(const StsToken& from);
  StsToken(StsToken&& from) noexcept
    : StsToken() {
    *this = ::std::move(from);
  }

  inline StsToken& operator=(const StsToken& from) {
    CopyFrom(from);
    return *this;
  }
  inline StsToken& operator=(StsToken&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const StsToken& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StsToken* internal_default_instance() {
    return reinterpret_cast<const StsToken*>(
               &_StsToken_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(StsToken& a, StsToken& b) {
    a.Swap(&b);
  }
  inline void Swap(StsToken* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StsToken* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StsToken* New() const final {
    return CreateMaybeMessage<StsToken>(nullptr);
  }

  StsToken* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StsToken>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StsToken& from);
  void MergeFrom(const StsToken& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StsToken* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tokenpb.StsToken";
  }
  protected:
  explicit StsToken(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_token_2eproto);
    return ::descriptor_table_token_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAccessKeyIdFieldNumber = 1,
    kSecretAccessKeyFieldNumber = 2,
    kSessionTokenFieldNumber = 3,
    kExpirationFieldNumber = 4,
  };
  // string access_key_id = 1;
  void clear_access_key_id();
  const std::string& access_key_id() const;
  void set_access_key_id(const std::string& value);
  void set_access_key_id(std::string&& value);
  void set_access_key_id(const char* value);
  void set_access_key_id(const char* value, size_t size);
  std::string* mutable_access_key_id();
  std::string* release_access_key_id();
  void set_allocated_access_key_id(std::string* access_key_id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_access_key_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_access_key_id(
      std::string* access_key_id);
  private:
  const std::string& _internal_access_key_id() const;
  void _internal_set_access_key_id(const std::string& value);
  std::string* _internal_mutable_access_key_id();
  public:

  // string secret_access_key = 2;
  void clear_secret_access_key();
  const std::string& secret_access_key() const;
  void set_secret_access_key(const std::string& value);
  void set_secret_access_key(std::string&& value);
  void set_secret_access_key(const char* value);
  void set_secret_access_key(const char* value, size_t size);
  std::string* mutable_secret_access_key();
  std::string* release_secret_access_key();
  void set_allocated_secret_access_key(std::string* secret_access_key);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_secret_access_key();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_secret_access_key(
      std::string* secret_access_key);
  private:
  const std::string& _internal_secret_access_key() const;
  void _internal_set_secret_access_key(const std::string& value);
  std::string* _internal_mutable_secret_access_key();
  public:

  // string session_token = 3;
  void clear_session_token();
  const std::string& session_token() const;
  void set_session_token(const std::string& value);
  void set_session_token(std::string&& value);
  void set_session_token(const char* value);
  void set_session_token(const char* value, size_t size);
  std::string* mutable_session_token();
  std::string* release_session_token();
  void set_allocated_session_token(std::string* session_token);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_session_token();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_session_token(
      std::string* session_token);
  private:
  const std::string& _internal_session_token() const;
  void _internal_set_session_token(const std::string& value);
  std::string* _internal_mutable_session_token();
  public:

  // string expiration = 4;
  void clear_expiration();
  const std::string& expiration() const;
  void set_expiration(const std::string& value);
  void set_expiration(std::string&& value);
  void set_expiration(const char* value);
  void set_expiration(const char* value, size_t size);
  std::string* mutable_expiration();
  std::string* release_expiration();
  void set_allocated_expiration(std::string* expiration);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_expiration();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_expiration(
      std::string* expiration);
  private:
  const std::string& _internal_expiration() const;
  void _internal_set_expiration(const std::string& value);
  std::string* _internal_mutable_expiration();
  public:

  // @@protoc_insertion_point(class_scope:tokenpb.StsToken)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr access_key_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr secret_access_key_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr session_token_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr expiration_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_token_2eproto;
};
// -------------------------------------------------------------------

class AssociatePrimaryUserRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tokenpb.AssociatePrimaryUserRequest) */ {
 public:
  inline AssociatePrimaryUserRequest() : AssociatePrimaryUserRequest(nullptr) {};
  virtual ~AssociatePrimaryUserRequest();

  AssociatePrimaryUserRequest(const AssociatePrimaryUserRequest& from);
  AssociatePrimaryUserRequest(AssociatePrimaryUserRequest&& from) noexcept
    : AssociatePrimaryUserRequest() {
    *this = ::std::move(from);
  }

  inline AssociatePrimaryUserRequest& operator=(const AssociatePrimaryUserRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline AssociatePrimaryUserRequest& operator=(AssociatePrimaryUserRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AssociatePrimaryUserRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AssociatePrimaryUserRequest* internal_default_instance() {
    return reinterpret_cast<const AssociatePrimaryUserRequest*>(
               &_AssociatePrimaryUserRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(AssociatePrimaryUserRequest& a, AssociatePrimaryUserRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(AssociatePrimaryUserRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AssociatePrimaryUserRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AssociatePrimaryUserRequest* New() const final {
    return CreateMaybeMessage<AssociatePrimaryUserRequest>(nullptr);
  }

  AssociatePrimaryUserRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AssociatePrimaryUserRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AssociatePrimaryUserRequest& from);
  void MergeFrom(const AssociatePrimaryUserRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AssociatePrimaryUserRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tokenpb.AssociatePrimaryUserRequest";
  }
  protected:
  explicit AssociatePrimaryUserRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_token_2eproto);
    return ::descriptor_table_token_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSessionCertificateFieldNumber = 4,
    kClientNameFieldNumber = 5,
    kAppIdFieldNumber = 6,
    kGenerateStsTokenFieldNumber = 3,
    kSkipClientTokenFieldNumber = 7,
    kRevokeClientTokensFieldNumber = 8,
    kExpirationMinutesFieldNumber = 9,
  };
  // bytes session_certificate = 4;
  void clear_session_certificate();
  const std::string& session_certificate() const;
  void set_session_certificate(const std::string& value);
  void set_session_certificate(std::string&& value);
  void set_session_certificate(const char* value);
  void set_session_certificate(const void* value, size_t size);
  std::string* mutable_session_certificate();
  std::string* release_session_certificate();
  void set_allocated_session_certificate(std::string* session_certificate);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_session_certificate();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_session_certificate(
      std::string* session_certificate);
  private:
  const std::string& _internal_session_certificate() const;
  void _internal_set_session_certificate(const std::string& value);
  std::string* _internal_mutable_session_certificate();
  public:

  // string client_name = 5;
  void clear_client_name();
  const std::string& client_name() const;
  void set_client_name(const std::string& value);
  void set_client_name(std::string&& value);
  void set_client_name(const char* value);
  void set_client_name(const char* value, size_t size);
  std::string* mutable_client_name();
  std::string* release_client_name();
  void set_allocated_client_name(std::string* client_name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_client_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_client_name(
      std::string* client_name);
  private:
  const std::string& _internal_client_name() const;
  void _internal_set_client_name(const std::string& value);
  std::string* _internal_mutable_client_name();
  public:

  // string app_id = 6;
  void clear_app_id();
  const std::string& app_id() const;
  void set_app_id(const std::string& value);
  void set_app_id(std::string&& value);
  void set_app_id(const char* value);
  void set_app_id(const char* value, size_t size);
  std::string* mutable_app_id();
  std::string* release_app_id();
  void set_allocated_app_id(std::string* app_id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_app_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_app_id(
      std::string* app_id);
  private:
  const std::string& _internal_app_id() const;
  void _internal_set_app_id(const std::string& value);
  std::string* _internal_mutable_app_id();
  public:

  // bool generate_sts_token = 3;
  void clear_generate_sts_token();
  bool generate_sts_token() const;
  void set_generate_sts_token(bool value);
  private:
  bool _internal_generate_sts_token() const;
  void _internal_set_generate_sts_token(bool value);
  public:

  // bool skip_client_token = 7;
  void clear_skip_client_token();
  bool skip_client_token() const;
  void set_skip_client_token(bool value);
  private:
  bool _internal_skip_client_token() const;
  void _internal_set_skip_client_token(bool value);
  public:

  // bool revoke_client_tokens = 8;
  void clear_revoke_client_tokens();
  bool revoke_client_tokens() const;
  void set_revoke_client_tokens(bool value);
  private:
  bool _internal_revoke_client_tokens() const;
  void _internal_set_revoke_client_tokens(bool value);
  public:

  // uint32 expiration_minutes = 9;
  void clear_expiration_minutes();
  ::PROTOBUF_NAMESPACE_ID::uint32 expiration_minutes() const;
  void set_expiration_minutes(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_expiration_minutes() const;
  void _internal_set_expiration_minutes(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:tokenpb.AssociatePrimaryUserRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr session_certificate_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr client_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr app_id_;
  bool generate_sts_token_;
  bool skip_client_token_;
  bool revoke_client_tokens_;
  ::PROTOBUF_NAMESPACE_ID::uint32 expiration_minutes_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_token_2eproto;
};
// -------------------------------------------------------------------

class ReassociatePrimaryUserRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tokenpb.ReassociatePrimaryUserRequest) */ {
 public:
  inline ReassociatePrimaryUserRequest() : ReassociatePrimaryUserRequest(nullptr) {};
  virtual ~ReassociatePrimaryUserRequest();

  ReassociatePrimaryUserRequest(const ReassociatePrimaryUserRequest& from);
  ReassociatePrimaryUserRequest(ReassociatePrimaryUserRequest&& from) noexcept
    : ReassociatePrimaryUserRequest() {
    *this = ::std::move(from);
  }

  inline ReassociatePrimaryUserRequest& operator=(const ReassociatePrimaryUserRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReassociatePrimaryUserRequest& operator=(ReassociatePrimaryUserRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ReassociatePrimaryUserRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ReassociatePrimaryUserRequest* internal_default_instance() {
    return reinterpret_cast<const ReassociatePrimaryUserRequest*>(
               &_ReassociatePrimaryUserRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(ReassociatePrimaryUserRequest& a, ReassociatePrimaryUserRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ReassociatePrimaryUserRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReassociatePrimaryUserRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ReassociatePrimaryUserRequest* New() const final {
    return CreateMaybeMessage<ReassociatePrimaryUserRequest>(nullptr);
  }

  ReassociatePrimaryUserRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ReassociatePrimaryUserRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ReassociatePrimaryUserRequest& from);
  void MergeFrom(const ReassociatePrimaryUserRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReassociatePrimaryUserRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tokenpb.ReassociatePrimaryUserRequest";
  }
  protected:
  explicit ReassociatePrimaryUserRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_token_2eproto);
    return ::descriptor_table_token_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kClientNameFieldNumber = 2,
    kAppIdFieldNumber = 3,
    kGenerateStsTokenFieldNumber = 1,
    kSkipClientTokenFieldNumber = 4,
    kExpirationMinutesFieldNumber = 5,
  };
  // string client_name = 2;
  void clear_client_name();
  const std::string& client_name() const;
  void set_client_name(const std::string& value);
  void set_client_name(std::string&& value);
  void set_client_name(const char* value);
  void set_client_name(const char* value, size_t size);
  std::string* mutable_client_name();
  std::string* release_client_name();
  void set_allocated_client_name(std::string* client_name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_client_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_client_name(
      std::string* client_name);
  private:
  const std::string& _internal_client_name() const;
  void _internal_set_client_name(const std::string& value);
  std::string* _internal_mutable_client_name();
  public:

  // string app_id = 3;
  void clear_app_id();
  const std::string& app_id() const;
  void set_app_id(const std::string& value);
  void set_app_id(std::string&& value);
  void set_app_id(const char* value);
  void set_app_id(const char* value, size_t size);
  std::string* mutable_app_id();
  std::string* release_app_id();
  void set_allocated_app_id(std::string* app_id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_app_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_app_id(
      std::string* app_id);
  private:
  const std::string& _internal_app_id() const;
  void _internal_set_app_id(const std::string& value);
  std::string* _internal_mutable_app_id();
  public:

  // bool generate_sts_token = 1;
  void clear_generate_sts_token();
  bool generate_sts_token() const;
  void set_generate_sts_token(bool value);
  private:
  bool _internal_generate_sts_token() const;
  void _internal_set_generate_sts_token(bool value);
  public:

  // bool skip_client_token = 4;
  void clear_skip_client_token();
  bool skip_client_token() const;
  void set_skip_client_token(bool value);
  private:
  bool _internal_skip_client_token() const;
  void _internal_set_skip_client_token(bool value);
  public:

  // uint32 expiration_minutes = 5;
  void clear_expiration_minutes();
  ::PROTOBUF_NAMESPACE_ID::uint32 expiration_minutes() const;
  void set_expiration_minutes(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_expiration_minutes() const;
  void _internal_set_expiration_minutes(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:tokenpb.ReassociatePrimaryUserRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr client_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr app_id_;
  bool generate_sts_token_;
  bool skip_client_token_;
  ::PROTOBUF_NAMESPACE_ID::uint32 expiration_minutes_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_token_2eproto;
};
// -------------------------------------------------------------------

class ReassociatePrimaryUserResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tokenpb.ReassociatePrimaryUserResponse) */ {
 public:
  inline ReassociatePrimaryUserResponse() : ReassociatePrimaryUserResponse(nullptr) {};
  virtual ~ReassociatePrimaryUserResponse();

  ReassociatePrimaryUserResponse(const ReassociatePrimaryUserResponse& from);
  ReassociatePrimaryUserResponse(ReassociatePrimaryUserResponse&& from) noexcept
    : ReassociatePrimaryUserResponse() {
    *this = ::std::move(from);
  }

  inline ReassociatePrimaryUserResponse& operator=(const ReassociatePrimaryUserResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReassociatePrimaryUserResponse& operator=(ReassociatePrimaryUserResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ReassociatePrimaryUserResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ReassociatePrimaryUserResponse* internal_default_instance() {
    return reinterpret_cast<const ReassociatePrimaryUserResponse*>(
               &_ReassociatePrimaryUserResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(ReassociatePrimaryUserResponse& a, ReassociatePrimaryUserResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ReassociatePrimaryUserResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReassociatePrimaryUserResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ReassociatePrimaryUserResponse* New() const final {
    return CreateMaybeMessage<ReassociatePrimaryUserResponse>(nullptr);
  }

  ReassociatePrimaryUserResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ReassociatePrimaryUserResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ReassociatePrimaryUserResponse& from);
  void MergeFrom(const ReassociatePrimaryUserResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReassociatePrimaryUserResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tokenpb.ReassociatePrimaryUserResponse";
  }
  protected:
  explicit ReassociatePrimaryUserResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_token_2eproto);
    return ::descriptor_table_token_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 1,
  };
  // .tokenpb.TokenBundle data = 1;
  bool has_data() const;
  private:
  bool _internal_has_data() const;
  public:
  void clear_data();
  const ::tokenpb::TokenBundle& data() const;
  ::tokenpb::TokenBundle* release_data();
  ::tokenpb::TokenBundle* mutable_data();
  void set_allocated_data(::tokenpb::TokenBundle* data);
  private:
  const ::tokenpb::TokenBundle& _internal_data() const;
  ::tokenpb::TokenBundle* _internal_mutable_data();
  public:
  void unsafe_arena_set_allocated_data(
      ::tokenpb::TokenBundle* data);
  ::tokenpb::TokenBundle* unsafe_arena_release_data();

  // @@protoc_insertion_point(class_scope:tokenpb.ReassociatePrimaryUserResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::tokenpb::TokenBundle* data_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_token_2eproto;
};
// -------------------------------------------------------------------

class AssociatePrimaryUserResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tokenpb.AssociatePrimaryUserResponse) */ {
 public:
  inline AssociatePrimaryUserResponse() : AssociatePrimaryUserResponse(nullptr) {};
  virtual ~AssociatePrimaryUserResponse();

  AssociatePrimaryUserResponse(const AssociatePrimaryUserResponse& from);
  AssociatePrimaryUserResponse(AssociatePrimaryUserResponse&& from) noexcept
    : AssociatePrimaryUserResponse() {
    *this = ::std::move(from);
  }

  inline AssociatePrimaryUserResponse& operator=(const AssociatePrimaryUserResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline AssociatePrimaryUserResponse& operator=(AssociatePrimaryUserResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AssociatePrimaryUserResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AssociatePrimaryUserResponse* internal_default_instance() {
    return reinterpret_cast<const AssociatePrimaryUserResponse*>(
               &_AssociatePrimaryUserResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(AssociatePrimaryUserResponse& a, AssociatePrimaryUserResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(AssociatePrimaryUserResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AssociatePrimaryUserResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AssociatePrimaryUserResponse* New() const final {
    return CreateMaybeMessage<AssociatePrimaryUserResponse>(nullptr);
  }

  AssociatePrimaryUserResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AssociatePrimaryUserResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AssociatePrimaryUserResponse& from);
  void MergeFrom(const AssociatePrimaryUserResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AssociatePrimaryUserResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tokenpb.AssociatePrimaryUserResponse";
  }
  protected:
  explicit AssociatePrimaryUserResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_token_2eproto);
    return ::descriptor_table_token_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 1,
  };
  // .tokenpb.TokenBundle data = 1;
  bool has_data() const;
  private:
  bool _internal_has_data() const;
  public:
  void clear_data();
  const ::tokenpb::TokenBundle& data() const;
  ::tokenpb::TokenBundle* release_data();
  ::tokenpb::TokenBundle* mutable_data();
  void set_allocated_data(::tokenpb::TokenBundle* data);
  private:
  const ::tokenpb::TokenBundle& _internal_data() const;
  ::tokenpb::TokenBundle* _internal_mutable_data();
  public:
  void unsafe_arena_set_allocated_data(
      ::tokenpb::TokenBundle* data);
  ::tokenpb::TokenBundle* unsafe_arena_release_data();

  // @@protoc_insertion_point(class_scope:tokenpb.AssociatePrimaryUserResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::tokenpb::TokenBundle* data_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_token_2eproto;
};
// -------------------------------------------------------------------

class AssociateSecondaryClientRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tokenpb.AssociateSecondaryClientRequest) */ {
 public:
  inline AssociateSecondaryClientRequest() : AssociateSecondaryClientRequest(nullptr) {};
  virtual ~AssociateSecondaryClientRequest();

  AssociateSecondaryClientRequest(const AssociateSecondaryClientRequest& from);
  AssociateSecondaryClientRequest(AssociateSecondaryClientRequest&& from) noexcept
    : AssociateSecondaryClientRequest() {
    *this = ::std::move(from);
  }

  inline AssociateSecondaryClientRequest& operator=(const AssociateSecondaryClientRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline AssociateSecondaryClientRequest& operator=(AssociateSecondaryClientRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AssociateSecondaryClientRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AssociateSecondaryClientRequest* internal_default_instance() {
    return reinterpret_cast<const AssociateSecondaryClientRequest*>(
               &_AssociateSecondaryClientRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(AssociateSecondaryClientRequest& a, AssociateSecondaryClientRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(AssociateSecondaryClientRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AssociateSecondaryClientRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AssociateSecondaryClientRequest* New() const final {
    return CreateMaybeMessage<AssociateSecondaryClientRequest>(nullptr);
  }

  AssociateSecondaryClientRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AssociateSecondaryClientRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AssociateSecondaryClientRequest& from);
  void MergeFrom(const AssociateSecondaryClientRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AssociateSecondaryClientRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tokenpb.AssociateSecondaryClientRequest";
  }
  protected:
  explicit AssociateSecondaryClientRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_token_2eproto);
    return ::descriptor_table_token_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserSessionFieldNumber = 2,
    kClientNameFieldNumber = 3,
    kAppIdFieldNumber = 4,
  };
  // string user_session = 2;
  void clear_user_session();
  const std::string& user_session() const;
  void set_user_session(const std::string& value);
  void set_user_session(std::string&& value);
  void set_user_session(const char* value);
  void set_user_session(const char* value, size_t size);
  std::string* mutable_user_session();
  std::string* release_user_session();
  void set_allocated_user_session(std::string* user_session);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_user_session();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_user_session(
      std::string* user_session);
  private:
  const std::string& _internal_user_session() const;
  void _internal_set_user_session(const std::string& value);
  std::string* _internal_mutable_user_session();
  public:

  // string client_name = 3;
  void clear_client_name();
  const std::string& client_name() const;
  void set_client_name(const std::string& value);
  void set_client_name(std::string&& value);
  void set_client_name(const char* value);
  void set_client_name(const char* value, size_t size);
  std::string* mutable_client_name();
  std::string* release_client_name();
  void set_allocated_client_name(std::string* client_name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_client_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_client_name(
      std::string* client_name);
  private:
  const std::string& _internal_client_name() const;
  void _internal_set_client_name(const std::string& value);
  std::string* _internal_mutable_client_name();
  public:

  // string app_id = 4;
  void clear_app_id();
  const std::string& app_id() const;
  void set_app_id(const std::string& value);
  void set_app_id(std::string&& value);
  void set_app_id(const char* value);
  void set_app_id(const char* value, size_t size);
  std::string* mutable_app_id();
  std::string* release_app_id();
  void set_allocated_app_id(std::string* app_id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_app_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_app_id(
      std::string* app_id);
  private:
  const std::string& _internal_app_id() const;
  void _internal_set_app_id(const std::string& value);
  std::string* _internal_mutable_app_id();
  public:

  // @@protoc_insertion_point(class_scope:tokenpb.AssociateSecondaryClientRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_session_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr client_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr app_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_token_2eproto;
};
// -------------------------------------------------------------------

class AssociateSecondaryClientResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tokenpb.AssociateSecondaryClientResponse) */ {
 public:
  inline AssociateSecondaryClientResponse() : AssociateSecondaryClientResponse(nullptr) {};
  virtual ~AssociateSecondaryClientResponse();

  AssociateSecondaryClientResponse(const AssociateSecondaryClientResponse& from);
  AssociateSecondaryClientResponse(AssociateSecondaryClientResponse&& from) noexcept
    : AssociateSecondaryClientResponse() {
    *this = ::std::move(from);
  }

  inline AssociateSecondaryClientResponse& operator=(const AssociateSecondaryClientResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline AssociateSecondaryClientResponse& operator=(AssociateSecondaryClientResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AssociateSecondaryClientResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AssociateSecondaryClientResponse* internal_default_instance() {
    return reinterpret_cast<const AssociateSecondaryClientResponse*>(
               &_AssociateSecondaryClientResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(AssociateSecondaryClientResponse& a, AssociateSecondaryClientResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(AssociateSecondaryClientResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AssociateSecondaryClientResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AssociateSecondaryClientResponse* New() const final {
    return CreateMaybeMessage<AssociateSecondaryClientResponse>(nullptr);
  }

  AssociateSecondaryClientResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AssociateSecondaryClientResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AssociateSecondaryClientResponse& from);
  void MergeFrom(const AssociateSecondaryClientResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AssociateSecondaryClientResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tokenpb.AssociateSecondaryClientResponse";
  }
  protected:
  explicit AssociateSecondaryClientResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_token_2eproto);
    return ::descriptor_table_token_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 1,
  };
  // .tokenpb.TokenBundle data = 1;
  bool has_data() const;
  private:
  bool _internal_has_data() const;
  public:
  void clear_data();
  const ::tokenpb::TokenBundle& data() const;
  ::tokenpb::TokenBundle* release_data();
  ::tokenpb::TokenBundle* mutable_data();
  void set_allocated_data(::tokenpb::TokenBundle* data);
  private:
  const ::tokenpb::TokenBundle& _internal_data() const;
  ::tokenpb::TokenBundle* _internal_mutable_data();
  public:
  void unsafe_arena_set_allocated_data(
      ::tokenpb::TokenBundle* data);
  ::tokenpb::TokenBundle* unsafe_arena_release_data();

  // @@protoc_insertion_point(class_scope:tokenpb.AssociateSecondaryClientResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::tokenpb::TokenBundle* data_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_token_2eproto;
};
// -------------------------------------------------------------------

class DisassociatePrimaryUserRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tokenpb.DisassociatePrimaryUserRequest) */ {
 public:
  inline DisassociatePrimaryUserRequest() : DisassociatePrimaryUserRequest(nullptr) {};
  virtual ~DisassociatePrimaryUserRequest();

  DisassociatePrimaryUserRequest(const DisassociatePrimaryUserRequest& from);
  DisassociatePrimaryUserRequest(DisassociatePrimaryUserRequest&& from) noexcept
    : DisassociatePrimaryUserRequest() {
    *this = ::std::move(from);
  }

  inline DisassociatePrimaryUserRequest& operator=(const DisassociatePrimaryUserRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DisassociatePrimaryUserRequest& operator=(DisassociatePrimaryUserRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DisassociatePrimaryUserRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DisassociatePrimaryUserRequest* internal_default_instance() {
    return reinterpret_cast<const DisassociatePrimaryUserRequest*>(
               &_DisassociatePrimaryUserRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(DisassociatePrimaryUserRequest& a, DisassociatePrimaryUserRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(DisassociatePrimaryUserRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DisassociatePrimaryUserRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DisassociatePrimaryUserRequest* New() const final {
    return CreateMaybeMessage<DisassociatePrimaryUserRequest>(nullptr);
  }

  DisassociatePrimaryUserRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DisassociatePrimaryUserRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DisassociatePrimaryUserRequest& from);
  void MergeFrom(const DisassociatePrimaryUserRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DisassociatePrimaryUserRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tokenpb.DisassociatePrimaryUserRequest";
  }
  protected:
  explicit DisassociatePrimaryUserRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_token_2eproto);
    return ::descriptor_table_token_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:tokenpb.DisassociatePrimaryUserRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_token_2eproto;
};
// -------------------------------------------------------------------

class DisassociatePrimaryUserResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tokenpb.DisassociatePrimaryUserResponse) */ {
 public:
  inline DisassociatePrimaryUserResponse() : DisassociatePrimaryUserResponse(nullptr) {};
  virtual ~DisassociatePrimaryUserResponse();

  DisassociatePrimaryUserResponse(const DisassociatePrimaryUserResponse& from);
  DisassociatePrimaryUserResponse(DisassociatePrimaryUserResponse&& from) noexcept
    : DisassociatePrimaryUserResponse() {
    *this = ::std::move(from);
  }

  inline DisassociatePrimaryUserResponse& operator=(const DisassociatePrimaryUserResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline DisassociatePrimaryUserResponse& operator=(DisassociatePrimaryUserResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DisassociatePrimaryUserResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DisassociatePrimaryUserResponse* internal_default_instance() {
    return reinterpret_cast<const DisassociatePrimaryUserResponse*>(
               &_DisassociatePrimaryUserResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(DisassociatePrimaryUserResponse& a, DisassociatePrimaryUserResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(DisassociatePrimaryUserResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DisassociatePrimaryUserResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DisassociatePrimaryUserResponse* New() const final {
    return CreateMaybeMessage<DisassociatePrimaryUserResponse>(nullptr);
  }

  DisassociatePrimaryUserResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DisassociatePrimaryUserResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DisassociatePrimaryUserResponse& from);
  void MergeFrom(const DisassociatePrimaryUserResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DisassociatePrimaryUserResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tokenpb.DisassociatePrimaryUserResponse";
  }
  protected:
  explicit DisassociatePrimaryUserResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_token_2eproto);
    return ::descriptor_table_token_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:tokenpb.DisassociatePrimaryUserResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_token_2eproto;
};
// -------------------------------------------------------------------

class RefreshTokenRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tokenpb.RefreshTokenRequest) */ {
 public:
  inline RefreshTokenRequest() : RefreshTokenRequest(nullptr) {};
  virtual ~RefreshTokenRequest();

  RefreshTokenRequest(const RefreshTokenRequest& from);
  RefreshTokenRequest(RefreshTokenRequest&& from) noexcept
    : RefreshTokenRequest() {
    *this = ::std::move(from);
  }

  inline RefreshTokenRequest& operator=(const RefreshTokenRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline RefreshTokenRequest& operator=(RefreshTokenRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RefreshTokenRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RefreshTokenRequest* internal_default_instance() {
    return reinterpret_cast<const RefreshTokenRequest*>(
               &_RefreshTokenRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(RefreshTokenRequest& a, RefreshTokenRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(RefreshTokenRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RefreshTokenRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RefreshTokenRequest* New() const final {
    return CreateMaybeMessage<RefreshTokenRequest>(nullptr);
  }

  RefreshTokenRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RefreshTokenRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RefreshTokenRequest& from);
  void MergeFrom(const RefreshTokenRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RefreshTokenRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tokenpb.RefreshTokenRequest";
  }
  protected:
  explicit RefreshTokenRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_token_2eproto);
    return ::descriptor_table_token_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRefreshJwtTokensFieldNumber = 2,
    kRefreshStsTokensFieldNumber = 3,
    kExpirationMinutesFieldNumber = 4,
  };
  // bool refresh_jwt_tokens = 2;
  void clear_refresh_jwt_tokens();
  bool refresh_jwt_tokens() const;
  void set_refresh_jwt_tokens(bool value);
  private:
  bool _internal_refresh_jwt_tokens() const;
  void _internal_set_refresh_jwt_tokens(bool value);
  public:

  // bool refresh_sts_tokens = 3;
  void clear_refresh_sts_tokens();
  bool refresh_sts_tokens() const;
  void set_refresh_sts_tokens(bool value);
  private:
  bool _internal_refresh_sts_tokens() const;
  void _internal_set_refresh_sts_tokens(bool value);
  public:

  // uint32 expiration_minutes = 4;
  void clear_expiration_minutes();
  ::PROTOBUF_NAMESPACE_ID::uint32 expiration_minutes() const;
  void set_expiration_minutes(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_expiration_minutes() const;
  void _internal_set_expiration_minutes(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:tokenpb.RefreshTokenRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool refresh_jwt_tokens_;
  bool refresh_sts_tokens_;
  ::PROTOBUF_NAMESPACE_ID::uint32 expiration_minutes_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_token_2eproto;
};
// -------------------------------------------------------------------

class RefreshTokenResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tokenpb.RefreshTokenResponse) */ {
 public:
  inline RefreshTokenResponse() : RefreshTokenResponse(nullptr) {};
  virtual ~RefreshTokenResponse();

  RefreshTokenResponse(const RefreshTokenResponse& from);
  RefreshTokenResponse(RefreshTokenResponse&& from) noexcept
    : RefreshTokenResponse() {
    *this = ::std::move(from);
  }

  inline RefreshTokenResponse& operator=(const RefreshTokenResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline RefreshTokenResponse& operator=(RefreshTokenResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RefreshTokenResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RefreshTokenResponse* internal_default_instance() {
    return reinterpret_cast<const RefreshTokenResponse*>(
               &_RefreshTokenResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(RefreshTokenResponse& a, RefreshTokenResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(RefreshTokenResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RefreshTokenResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RefreshTokenResponse* New() const final {
    return CreateMaybeMessage<RefreshTokenResponse>(nullptr);
  }

  RefreshTokenResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RefreshTokenResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RefreshTokenResponse& from);
  void MergeFrom(const RefreshTokenResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RefreshTokenResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tokenpb.RefreshTokenResponse";
  }
  protected:
  explicit RefreshTokenResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_token_2eproto);
    return ::descriptor_table_token_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 1,
  };
  // .tokenpb.TokenBundle data = 1;
  bool has_data() const;
  private:
  bool _internal_has_data() const;
  public:
  void clear_data();
  const ::tokenpb::TokenBundle& data() const;
  ::tokenpb::TokenBundle* release_data();
  ::tokenpb::TokenBundle* mutable_data();
  void set_allocated_data(::tokenpb::TokenBundle* data);
  private:
  const ::tokenpb::TokenBundle& _internal_data() const;
  ::tokenpb::TokenBundle* _internal_mutable_data();
  public:
  void unsafe_arena_set_allocated_data(
      ::tokenpb::TokenBundle* data);
  ::tokenpb::TokenBundle* unsafe_arena_release_data();

  // @@protoc_insertion_point(class_scope:tokenpb.RefreshTokenResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::tokenpb::TokenBundle* data_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_token_2eproto;
};
// -------------------------------------------------------------------

class TokensPage PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tokenpb.TokensPage) */ {
 public:
  inline TokensPage() : TokensPage(nullptr) {};
  virtual ~TokensPage();

  TokensPage(const TokensPage& from);
  TokensPage(TokensPage&& from) noexcept
    : TokensPage() {
    *this = ::std::move(from);
  }

  inline TokensPage& operator=(const TokensPage& from) {
    CopyFrom(from);
    return *this;
  }
  inline TokensPage& operator=(TokensPage&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TokensPage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TokensPage* internal_default_instance() {
    return reinterpret_cast<const TokensPage*>(
               &_TokensPage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(TokensPage& a, TokensPage& b) {
    a.Swap(&b);
  }
  inline void Swap(TokensPage* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TokensPage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TokensPage* New() const final {
    return CreateMaybeMessage<TokensPage>(nullptr);
  }

  TokensPage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TokensPage>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TokensPage& from);
  void MergeFrom(const TokensPage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TokensPage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tokenpb.TokensPage";
  }
  protected:
  explicit TokensPage(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_token_2eproto);
    return ::descriptor_table_token_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTokensFieldNumber = 1,
    kLastKeyFieldNumber = 2,
    kDoneFieldNumber = 3,
  };
  // repeated string tokens = 1;
  int tokens_size() const;
  private:
  int _internal_tokens_size() const;
  public:
  void clear_tokens();
  const std::string& tokens(int index) const;
  std::string* mutable_tokens(int index);
  void set_tokens(int index, const std::string& value);
  void set_tokens(int index, std::string&& value);
  void set_tokens(int index, const char* value);
  void set_tokens(int index, const char* value, size_t size);
  std::string* add_tokens();
  void add_tokens(const std::string& value);
  void add_tokens(std::string&& value);
  void add_tokens(const char* value);
  void add_tokens(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& tokens() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_tokens();
  private:
  const std::string& _internal_tokens(int index) const;
  std::string* _internal_add_tokens();
  public:

  // string last_key = 2;
  void clear_last_key();
  const std::string& last_key() const;
  void set_last_key(const std::string& value);
  void set_last_key(std::string&& value);
  void set_last_key(const char* value);
  void set_last_key(const char* value, size_t size);
  std::string* mutable_last_key();
  std::string* release_last_key();
  void set_allocated_last_key(std::string* last_key);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_last_key();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_last_key(
      std::string* last_key);
  private:
  const std::string& _internal_last_key() const;
  void _internal_set_last_key(const std::string& value);
  std::string* _internal_mutable_last_key();
  public:

  // bool done = 3;
  void clear_done();
  bool done() const;
  void set_done(bool value);
  private:
  bool _internal_done() const;
  void _internal_set_done(bool value);
  public:

  // @@protoc_insertion_point(class_scope:tokenpb.TokensPage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> tokens_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr last_key_;
  bool done_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_token_2eproto;
};
// -------------------------------------------------------------------

class ListRevokedTokensRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tokenpb.ListRevokedTokensRequest) */ {
 public:
  inline ListRevokedTokensRequest() : ListRevokedTokensRequest(nullptr) {};
  virtual ~ListRevokedTokensRequest();

  ListRevokedTokensRequest(const ListRevokedTokensRequest& from);
  ListRevokedTokensRequest(ListRevokedTokensRequest&& from) noexcept
    : ListRevokedTokensRequest() {
    *this = ::std::move(from);
  }

  inline ListRevokedTokensRequest& operator=(const ListRevokedTokensRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListRevokedTokensRequest& operator=(ListRevokedTokensRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ListRevokedTokensRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ListRevokedTokensRequest* internal_default_instance() {
    return reinterpret_cast<const ListRevokedTokensRequest*>(
               &_ListRevokedTokensRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(ListRevokedTokensRequest& a, ListRevokedTokensRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ListRevokedTokensRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListRevokedTokensRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ListRevokedTokensRequest* New() const final {
    return CreateMaybeMessage<ListRevokedTokensRequest>(nullptr);
  }

  ListRevokedTokensRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ListRevokedTokensRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ListRevokedTokensRequest& from);
  void MergeFrom(const ListRevokedTokensRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListRevokedTokensRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tokenpb.ListRevokedTokensRequest";
  }
  protected:
  explicit ListRevokedTokensRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_token_2eproto);
    return ::descriptor_table_token_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPreviousKeyFieldNumber = 1,
  };
  // string previous_key = 1;
  void clear_previous_key();
  const std::string& previous_key() const;
  void set_previous_key(const std::string& value);
  void set_previous_key(std::string&& value);
  void set_previous_key(const char* value);
  void set_previous_key(const char* value, size_t size);
  std::string* mutable_previous_key();
  std::string* release_previous_key();
  void set_allocated_previous_key(std::string* previous_key);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_previous_key();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_previous_key(
      std::string* previous_key);
  private:
  const std::string& _internal_previous_key() const;
  void _internal_set_previous_key(const std::string& value);
  std::string* _internal_mutable_previous_key();
  public:

  // @@protoc_insertion_point(class_scope:tokenpb.ListRevokedTokensRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr previous_key_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_token_2eproto;
};
// -------------------------------------------------------------------

class ListRevokedTokensResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tokenpb.ListRevokedTokensResponse) */ {
 public:
  inline ListRevokedTokensResponse() : ListRevokedTokensResponse(nullptr) {};
  virtual ~ListRevokedTokensResponse();

  ListRevokedTokensResponse(const ListRevokedTokensResponse& from);
  ListRevokedTokensResponse(ListRevokedTokensResponse&& from) noexcept
    : ListRevokedTokensResponse() {
    *this = ::std::move(from);
  }

  inline ListRevokedTokensResponse& operator=(const ListRevokedTokensResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListRevokedTokensResponse& operator=(ListRevokedTokensResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ListRevokedTokensResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ListRevokedTokensResponse* internal_default_instance() {
    return reinterpret_cast<const ListRevokedTokensResponse*>(
               &_ListRevokedTokensResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(ListRevokedTokensResponse& a, ListRevokedTokensResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ListRevokedTokensResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListRevokedTokensResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ListRevokedTokensResponse* New() const final {
    return CreateMaybeMessage<ListRevokedTokensResponse>(nullptr);
  }

  ListRevokedTokensResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ListRevokedTokensResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ListRevokedTokensResponse& from);
  void MergeFrom(const ListRevokedTokensResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListRevokedTokensResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tokenpb.ListRevokedTokensResponse";
  }
  protected:
  explicit ListRevokedTokensResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_token_2eproto);
    return ::descriptor_table_token_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 1,
  };
  // .tokenpb.TokensPage data = 1;
  bool has_data() const;
  private:
  bool _internal_has_data() const;
  public:
  void clear_data();
  const ::tokenpb::TokensPage& data() const;
  ::tokenpb::TokensPage* release_data();
  ::tokenpb::TokensPage* mutable_data();
  void set_allocated_data(::tokenpb::TokensPage* data);
  private:
  const ::tokenpb::TokensPage& _internal_data() const;
  ::tokenpb::TokensPage* _internal_mutable_data();
  public:
  void unsafe_arena_set_allocated_data(
      ::tokenpb::TokensPage* data);
  ::tokenpb::TokensPage* unsafe_arena_release_data();

  // @@protoc_insertion_point(class_scope:tokenpb.ListRevokedTokensResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::tokenpb::TokensPage* data_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_token_2eproto;
};
// -------------------------------------------------------------------

class RevokeFactoryCertificateRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tokenpb.RevokeFactoryCertificateRequest) */ {
 public:
  inline RevokeFactoryCertificateRequest() : RevokeFactoryCertificateRequest(nullptr) {};
  virtual ~RevokeFactoryCertificateRequest();

  RevokeFactoryCertificateRequest(const RevokeFactoryCertificateRequest& from);
  RevokeFactoryCertificateRequest(RevokeFactoryCertificateRequest&& from) noexcept
    : RevokeFactoryCertificateRequest() {
    *this = ::std::move(from);
  }

  inline RevokeFactoryCertificateRequest& operator=(const RevokeFactoryCertificateRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline RevokeFactoryCertificateRequest& operator=(RevokeFactoryCertificateRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RevokeFactoryCertificateRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RevokeFactoryCertificateRequest* internal_default_instance() {
    return reinterpret_cast<const RevokeFactoryCertificateRequest*>(
               &_RevokeFactoryCertificateRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(RevokeFactoryCertificateRequest& a, RevokeFactoryCertificateRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(RevokeFactoryCertificateRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RevokeFactoryCertificateRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RevokeFactoryCertificateRequest* New() const final {
    return CreateMaybeMessage<RevokeFactoryCertificateRequest>(nullptr);
  }

  RevokeFactoryCertificateRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RevokeFactoryCertificateRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RevokeFactoryCertificateRequest& from);
  void MergeFrom(const RevokeFactoryCertificateRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RevokeFactoryCertificateRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tokenpb.RevokeFactoryCertificateRequest";
  }
  protected:
  explicit RevokeFactoryCertificateRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_token_2eproto);
    return ::descriptor_table_token_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCertificateIdFieldNumber = 1,
  };
  // string certificate_id = 1;
  void clear_certificate_id();
  const std::string& certificate_id() const;
  void set_certificate_id(const std::string& value);
  void set_certificate_id(std::string&& value);
  void set_certificate_id(const char* value);
  void set_certificate_id(const char* value, size_t size);
  std::string* mutable_certificate_id();
  std::string* release_certificate_id();
  void set_allocated_certificate_id(std::string* certificate_id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_certificate_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_certificate_id(
      std::string* certificate_id);
  private:
  const std::string& _internal_certificate_id() const;
  void _internal_set_certificate_id(const std::string& value);
  std::string* _internal_mutable_certificate_id();
  public:

  // @@protoc_insertion_point(class_scope:tokenpb.RevokeFactoryCertificateRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr certificate_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_token_2eproto;
};
// -------------------------------------------------------------------

class RevokeFactoryCertificateResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tokenpb.RevokeFactoryCertificateResponse) */ {
 public:
  inline RevokeFactoryCertificateResponse() : RevokeFactoryCertificateResponse(nullptr) {};
  virtual ~RevokeFactoryCertificateResponse();

  RevokeFactoryCertificateResponse(const RevokeFactoryCertificateResponse& from);
  RevokeFactoryCertificateResponse(RevokeFactoryCertificateResponse&& from) noexcept
    : RevokeFactoryCertificateResponse() {
    *this = ::std::move(from);
  }

  inline RevokeFactoryCertificateResponse& operator=(const RevokeFactoryCertificateResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline RevokeFactoryCertificateResponse& operator=(RevokeFactoryCertificateResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RevokeFactoryCertificateResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RevokeFactoryCertificateResponse* internal_default_instance() {
    return reinterpret_cast<const RevokeFactoryCertificateResponse*>(
               &_RevokeFactoryCertificateResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(RevokeFactoryCertificateResponse& a, RevokeFactoryCertificateResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(RevokeFactoryCertificateResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RevokeFactoryCertificateResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RevokeFactoryCertificateResponse* New() const final {
    return CreateMaybeMessage<RevokeFactoryCertificateResponse>(nullptr);
  }

  RevokeFactoryCertificateResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RevokeFactoryCertificateResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RevokeFactoryCertificateResponse& from);
  void MergeFrom(const RevokeFactoryCertificateResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RevokeFactoryCertificateResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tokenpb.RevokeFactoryCertificateResponse";
  }
  protected:
  explicit RevokeFactoryCertificateResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_token_2eproto);
    return ::descriptor_table_token_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:tokenpb.RevokeFactoryCertificateResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_token_2eproto;
};
// -------------------------------------------------------------------

class RevokeTokensRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tokenpb.RevokeTokensRequest) */ {
 public:
  inline RevokeTokensRequest() : RevokeTokensRequest(nullptr) {};
  virtual ~RevokeTokensRequest();

  RevokeTokensRequest(const RevokeTokensRequest& from);
  RevokeTokensRequest(RevokeTokensRequest&& from) noexcept
    : RevokeTokensRequest() {
    *this = ::std::move(from);
  }

  inline RevokeTokensRequest& operator=(const RevokeTokensRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline RevokeTokensRequest& operator=(RevokeTokensRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RevokeTokensRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RevokeTokensRequest* internal_default_instance() {
    return reinterpret_cast<const RevokeTokensRequest*>(
               &_RevokeTokensRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(RevokeTokensRequest& a, RevokeTokensRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(RevokeTokensRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RevokeTokensRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RevokeTokensRequest* New() const final {
    return CreateMaybeMessage<RevokeTokensRequest>(nullptr);
  }

  RevokeTokensRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RevokeTokensRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RevokeTokensRequest& from);
  void MergeFrom(const RevokeTokensRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RevokeTokensRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tokenpb.RevokeTokensRequest";
  }
  protected:
  explicit RevokeTokensRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_token_2eproto);
    return ::descriptor_table_token_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSearchByIndexFieldNumber = 1,
    kKeyFieldNumber = 2,
  };
  // string search_by_index = 1;
  void clear_search_by_index();
  const std::string& search_by_index() const;
  void set_search_by_index(const std::string& value);
  void set_search_by_index(std::string&& value);
  void set_search_by_index(const char* value);
  void set_search_by_index(const char* value, size_t size);
  std::string* mutable_search_by_index();
  std::string* release_search_by_index();
  void set_allocated_search_by_index(std::string* search_by_index);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_search_by_index();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_search_by_index(
      std::string* search_by_index);
  private:
  const std::string& _internal_search_by_index() const;
  void _internal_set_search_by_index(const std::string& value);
  std::string* _internal_mutable_search_by_index();
  public:

  // string key = 2;
  void clear_key();
  const std::string& key() const;
  void set_key(const std::string& value);
  void set_key(std::string&& value);
  void set_key(const char* value);
  void set_key(const char* value, size_t size);
  std::string* mutable_key();
  std::string* release_key();
  void set_allocated_key(std::string* key);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_key();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_key(
      std::string* key);
  private:
  const std::string& _internal_key() const;
  void _internal_set_key(const std::string& value);
  std::string* _internal_mutable_key();
  public:

  // @@protoc_insertion_point(class_scope:tokenpb.RevokeTokensRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr search_by_index_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_token_2eproto;
};
// -------------------------------------------------------------------

class RevokeTokensResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tokenpb.RevokeTokensResponse) */ {
 public:
  inline RevokeTokensResponse() : RevokeTokensResponse(nullptr) {};
  virtual ~RevokeTokensResponse();

  RevokeTokensResponse(const RevokeTokensResponse& from);
  RevokeTokensResponse(RevokeTokensResponse&& from) noexcept
    : RevokeTokensResponse() {
    *this = ::std::move(from);
  }

  inline RevokeTokensResponse& operator=(const RevokeTokensResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline RevokeTokensResponse& operator=(RevokeTokensResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RevokeTokensResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RevokeTokensResponse* internal_default_instance() {
    return reinterpret_cast<const RevokeTokensResponse*>(
               &_RevokeTokensResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(RevokeTokensResponse& a, RevokeTokensResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(RevokeTokensResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RevokeTokensResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RevokeTokensResponse* New() const final {
    return CreateMaybeMessage<RevokeTokensResponse>(nullptr);
  }

  RevokeTokensResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RevokeTokensResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RevokeTokensResponse& from);
  void MergeFrom(const RevokeTokensResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RevokeTokensResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tokenpb.RevokeTokensResponse";
  }
  protected:
  explicit RevokeTokensResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_token_2eproto);
    return ::descriptor_table_token_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTokensRevokedFieldNumber = 1,
  };
  // uint32 tokens_revoked = 1;
  void clear_tokens_revoked();
  ::PROTOBUF_NAMESPACE_ID::uint32 tokens_revoked() const;
  void set_tokens_revoked(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_tokens_revoked() const;
  void _internal_set_tokens_revoked(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:tokenpb.RevokeTokensResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint32 tokens_revoked_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_token_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// TokenBundle

// string token = 1;
inline void TokenBundle::clear_token() {
  token_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& TokenBundle::token() const {
  // @@protoc_insertion_point(field_get:tokenpb.TokenBundle.token)
  return _internal_token();
}
inline void TokenBundle::set_token(const std::string& value) {
  _internal_set_token(value);
  // @@protoc_insertion_point(field_set:tokenpb.TokenBundle.token)
}
inline std::string* TokenBundle::mutable_token() {
  // @@protoc_insertion_point(field_mutable:tokenpb.TokenBundle.token)
  return _internal_mutable_token();
}
inline const std::string& TokenBundle::_internal_token() const {
  return token_.Get();
}
inline void TokenBundle::_internal_set_token(const std::string& value) {
  
  token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void TokenBundle::set_token(std::string&& value) {
  
  token_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:tokenpb.TokenBundle.token)
}
inline void TokenBundle::set_token(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:tokenpb.TokenBundle.token)
}
inline void TokenBundle::set_token(const char* value,
    size_t size) {
  
  token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:tokenpb.TokenBundle.token)
}
inline std::string* TokenBundle::_internal_mutable_token() {
  
  return token_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* TokenBundle::release_token() {
  // @@protoc_insertion_point(field_release:tokenpb.TokenBundle.token)
  return token_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TokenBundle::set_allocated_token(std::string* token) {
  if (token != nullptr) {
    
  } else {
    
  }
  token_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), token,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:tokenpb.TokenBundle.token)
}
inline std::string* TokenBundle::unsafe_arena_release_token() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tokenpb.TokenBundle.token)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return token_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void TokenBundle::unsafe_arena_set_allocated_token(
    std::string* token) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (token != nullptr) {
    
  } else {
    
  }
  token_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      token, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tokenpb.TokenBundle.token)
}

// string client_token = 2;
inline void TokenBundle::clear_client_token() {
  client_token_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& TokenBundle::client_token() const {
  // @@protoc_insertion_point(field_get:tokenpb.TokenBundle.client_token)
  return _internal_client_token();
}
inline void TokenBundle::set_client_token(const std::string& value) {
  _internal_set_client_token(value);
  // @@protoc_insertion_point(field_set:tokenpb.TokenBundle.client_token)
}
inline std::string* TokenBundle::mutable_client_token() {
  // @@protoc_insertion_point(field_mutable:tokenpb.TokenBundle.client_token)
  return _internal_mutable_client_token();
}
inline const std::string& TokenBundle::_internal_client_token() const {
  return client_token_.Get();
}
inline void TokenBundle::_internal_set_client_token(const std::string& value) {
  
  client_token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void TokenBundle::set_client_token(std::string&& value) {
  
  client_token_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:tokenpb.TokenBundle.client_token)
}
inline void TokenBundle::set_client_token(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  client_token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:tokenpb.TokenBundle.client_token)
}
inline void TokenBundle::set_client_token(const char* value,
    size_t size) {
  
  client_token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:tokenpb.TokenBundle.client_token)
}
inline std::string* TokenBundle::_internal_mutable_client_token() {
  
  return client_token_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* TokenBundle::release_client_token() {
  // @@protoc_insertion_point(field_release:tokenpb.TokenBundle.client_token)
  return client_token_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TokenBundle::set_allocated_client_token(std::string* client_token) {
  if (client_token != nullptr) {
    
  } else {
    
  }
  client_token_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), client_token,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:tokenpb.TokenBundle.client_token)
}
inline std::string* TokenBundle::unsafe_arena_release_client_token() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tokenpb.TokenBundle.client_token)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return client_token_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void TokenBundle::unsafe_arena_set_allocated_client_token(
    std::string* client_token) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (client_token != nullptr) {
    
  } else {
    
  }
  client_token_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      client_token, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tokenpb.TokenBundle.client_token)
}

// .tokenpb.StsToken sts_token = 4;
inline bool TokenBundle::_internal_has_sts_token() const {
  return this != internal_default_instance() && sts_token_ != nullptr;
}
inline bool TokenBundle::has_sts_token() const {
  return _internal_has_sts_token();
}
inline void TokenBundle::clear_sts_token() {
  if (GetArena() == nullptr && sts_token_ != nullptr) {
    delete sts_token_;
  }
  sts_token_ = nullptr;
}
inline const ::tokenpb::StsToken& TokenBundle::_internal_sts_token() const {
  const ::tokenpb::StsToken* p = sts_token_;
  return p != nullptr ? *p : *reinterpret_cast<const ::tokenpb::StsToken*>(
      &::tokenpb::_StsToken_default_instance_);
}
inline const ::tokenpb::StsToken& TokenBundle::sts_token() const {
  // @@protoc_insertion_point(field_get:tokenpb.TokenBundle.sts_token)
  return _internal_sts_token();
}
inline void TokenBundle::unsafe_arena_set_allocated_sts_token(
    ::tokenpb::StsToken* sts_token) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(sts_token_);
  }
  sts_token_ = sts_token;
  if (sts_token) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tokenpb.TokenBundle.sts_token)
}
inline ::tokenpb::StsToken* TokenBundle::release_sts_token() {
  auto temp = unsafe_arena_release_sts_token();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::tokenpb::StsToken* TokenBundle::unsafe_arena_release_sts_token() {
  // @@protoc_insertion_point(field_release:tokenpb.TokenBundle.sts_token)
  
  ::tokenpb::StsToken* temp = sts_token_;
  sts_token_ = nullptr;
  return temp;
}
inline ::tokenpb::StsToken* TokenBundle::_internal_mutable_sts_token() {
  
  if (sts_token_ == nullptr) {
    auto* p = CreateMaybeMessage<::tokenpb::StsToken>(GetArena());
    sts_token_ = p;
  }
  return sts_token_;
}
inline ::tokenpb::StsToken* TokenBundle::mutable_sts_token() {
  // @@protoc_insertion_point(field_mutable:tokenpb.TokenBundle.sts_token)
  return _internal_mutable_sts_token();
}
inline void TokenBundle::set_allocated_sts_token(::tokenpb::StsToken* sts_token) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete sts_token_;
  }
  if (sts_token) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(sts_token);
    if (message_arena != submessage_arena) {
      sts_token = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sts_token, submessage_arena);
    }
    
  } else {
    
  }
  sts_token_ = sts_token;
  // @@protoc_insertion_point(field_set_allocated:tokenpb.TokenBundle.sts_token)
}

// -------------------------------------------------------------------

// StsToken

// string access_key_id = 1;
inline void StsToken::clear_access_key_id() {
  access_key_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& StsToken::access_key_id() const {
  // @@protoc_insertion_point(field_get:tokenpb.StsToken.access_key_id)
  return _internal_access_key_id();
}
inline void StsToken::set_access_key_id(const std::string& value) {
  _internal_set_access_key_id(value);
  // @@protoc_insertion_point(field_set:tokenpb.StsToken.access_key_id)
}
inline std::string* StsToken::mutable_access_key_id() {
  // @@protoc_insertion_point(field_mutable:tokenpb.StsToken.access_key_id)
  return _internal_mutable_access_key_id();
}
inline const std::string& StsToken::_internal_access_key_id() const {
  return access_key_id_.Get();
}
inline void StsToken::_internal_set_access_key_id(const std::string& value) {
  
  access_key_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void StsToken::set_access_key_id(std::string&& value) {
  
  access_key_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:tokenpb.StsToken.access_key_id)
}
inline void StsToken::set_access_key_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  access_key_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:tokenpb.StsToken.access_key_id)
}
inline void StsToken::set_access_key_id(const char* value,
    size_t size) {
  
  access_key_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:tokenpb.StsToken.access_key_id)
}
inline std::string* StsToken::_internal_mutable_access_key_id() {
  
  return access_key_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* StsToken::release_access_key_id() {
  // @@protoc_insertion_point(field_release:tokenpb.StsToken.access_key_id)
  return access_key_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void StsToken::set_allocated_access_key_id(std::string* access_key_id) {
  if (access_key_id != nullptr) {
    
  } else {
    
  }
  access_key_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), access_key_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:tokenpb.StsToken.access_key_id)
}
inline std::string* StsToken::unsafe_arena_release_access_key_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tokenpb.StsToken.access_key_id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return access_key_id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void StsToken::unsafe_arena_set_allocated_access_key_id(
    std::string* access_key_id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (access_key_id != nullptr) {
    
  } else {
    
  }
  access_key_id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      access_key_id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tokenpb.StsToken.access_key_id)
}

// string secret_access_key = 2;
inline void StsToken::clear_secret_access_key() {
  secret_access_key_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& StsToken::secret_access_key() const {
  // @@protoc_insertion_point(field_get:tokenpb.StsToken.secret_access_key)
  return _internal_secret_access_key();
}
inline void StsToken::set_secret_access_key(const std::string& value) {
  _internal_set_secret_access_key(value);
  // @@protoc_insertion_point(field_set:tokenpb.StsToken.secret_access_key)
}
inline std::string* StsToken::mutable_secret_access_key() {
  // @@protoc_insertion_point(field_mutable:tokenpb.StsToken.secret_access_key)
  return _internal_mutable_secret_access_key();
}
inline const std::string& StsToken::_internal_secret_access_key() const {
  return secret_access_key_.Get();
}
inline void StsToken::_internal_set_secret_access_key(const std::string& value) {
  
  secret_access_key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void StsToken::set_secret_access_key(std::string&& value) {
  
  secret_access_key_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:tokenpb.StsToken.secret_access_key)
}
inline void StsToken::set_secret_access_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  secret_access_key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:tokenpb.StsToken.secret_access_key)
}
inline void StsToken::set_secret_access_key(const char* value,
    size_t size) {
  
  secret_access_key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:tokenpb.StsToken.secret_access_key)
}
inline std::string* StsToken::_internal_mutable_secret_access_key() {
  
  return secret_access_key_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* StsToken::release_secret_access_key() {
  // @@protoc_insertion_point(field_release:tokenpb.StsToken.secret_access_key)
  return secret_access_key_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void StsToken::set_allocated_secret_access_key(std::string* secret_access_key) {
  if (secret_access_key != nullptr) {
    
  } else {
    
  }
  secret_access_key_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), secret_access_key,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:tokenpb.StsToken.secret_access_key)
}
inline std::string* StsToken::unsafe_arena_release_secret_access_key() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tokenpb.StsToken.secret_access_key)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return secret_access_key_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void StsToken::unsafe_arena_set_allocated_secret_access_key(
    std::string* secret_access_key) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (secret_access_key != nullptr) {
    
  } else {
    
  }
  secret_access_key_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      secret_access_key, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tokenpb.StsToken.secret_access_key)
}

// string session_token = 3;
inline void StsToken::clear_session_token() {
  session_token_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& StsToken::session_token() const {
  // @@protoc_insertion_point(field_get:tokenpb.StsToken.session_token)
  return _internal_session_token();
}
inline void StsToken::set_session_token(const std::string& value) {
  _internal_set_session_token(value);
  // @@protoc_insertion_point(field_set:tokenpb.StsToken.session_token)
}
inline std::string* StsToken::mutable_session_token() {
  // @@protoc_insertion_point(field_mutable:tokenpb.StsToken.session_token)
  return _internal_mutable_session_token();
}
inline const std::string& StsToken::_internal_session_token() const {
  return session_token_.Get();
}
inline void StsToken::_internal_set_session_token(const std::string& value) {
  
  session_token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void StsToken::set_session_token(std::string&& value) {
  
  session_token_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:tokenpb.StsToken.session_token)
}
inline void StsToken::set_session_token(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  session_token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:tokenpb.StsToken.session_token)
}
inline void StsToken::set_session_token(const char* value,
    size_t size) {
  
  session_token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:tokenpb.StsToken.session_token)
}
inline std::string* StsToken::_internal_mutable_session_token() {
  
  return session_token_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* StsToken::release_session_token() {
  // @@protoc_insertion_point(field_release:tokenpb.StsToken.session_token)
  return session_token_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void StsToken::set_allocated_session_token(std::string* session_token) {
  if (session_token != nullptr) {
    
  } else {
    
  }
  session_token_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), session_token,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:tokenpb.StsToken.session_token)
}
inline std::string* StsToken::unsafe_arena_release_session_token() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tokenpb.StsToken.session_token)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return session_token_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void StsToken::unsafe_arena_set_allocated_session_token(
    std::string* session_token) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (session_token != nullptr) {
    
  } else {
    
  }
  session_token_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      session_token, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tokenpb.StsToken.session_token)
}

// string expiration = 4;
inline void StsToken::clear_expiration() {
  expiration_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& StsToken::expiration() const {
  // @@protoc_insertion_point(field_get:tokenpb.StsToken.expiration)
  return _internal_expiration();
}
inline void StsToken::set_expiration(const std::string& value) {
  _internal_set_expiration(value);
  // @@protoc_insertion_point(field_set:tokenpb.StsToken.expiration)
}
inline std::string* StsToken::mutable_expiration() {
  // @@protoc_insertion_point(field_mutable:tokenpb.StsToken.expiration)
  return _internal_mutable_expiration();
}
inline const std::string& StsToken::_internal_expiration() const {
  return expiration_.Get();
}
inline void StsToken::_internal_set_expiration(const std::string& value) {
  
  expiration_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void StsToken::set_expiration(std::string&& value) {
  
  expiration_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:tokenpb.StsToken.expiration)
}
inline void StsToken::set_expiration(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  expiration_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:tokenpb.StsToken.expiration)
}
inline void StsToken::set_expiration(const char* value,
    size_t size) {
  
  expiration_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:tokenpb.StsToken.expiration)
}
inline std::string* StsToken::_internal_mutable_expiration() {
  
  return expiration_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* StsToken::release_expiration() {
  // @@protoc_insertion_point(field_release:tokenpb.StsToken.expiration)
  return expiration_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void StsToken::set_allocated_expiration(std::string* expiration) {
  if (expiration != nullptr) {
    
  } else {
    
  }
  expiration_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), expiration,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:tokenpb.StsToken.expiration)
}
inline std::string* StsToken::unsafe_arena_release_expiration() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tokenpb.StsToken.expiration)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return expiration_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void StsToken::unsafe_arena_set_allocated_expiration(
    std::string* expiration) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (expiration != nullptr) {
    
  } else {
    
  }
  expiration_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      expiration, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tokenpb.StsToken.expiration)
}

// -------------------------------------------------------------------

// AssociatePrimaryUserRequest

// bool generate_sts_token = 3;
inline void AssociatePrimaryUserRequest::clear_generate_sts_token() {
  generate_sts_token_ = false;
}
inline bool AssociatePrimaryUserRequest::_internal_generate_sts_token() const {
  return generate_sts_token_;
}
inline bool AssociatePrimaryUserRequest::generate_sts_token() const {
  // @@protoc_insertion_point(field_get:tokenpb.AssociatePrimaryUserRequest.generate_sts_token)
  return _internal_generate_sts_token();
}
inline void AssociatePrimaryUserRequest::_internal_set_generate_sts_token(bool value) {
  
  generate_sts_token_ = value;
}
inline void AssociatePrimaryUserRequest::set_generate_sts_token(bool value) {
  _internal_set_generate_sts_token(value);
  // @@protoc_insertion_point(field_set:tokenpb.AssociatePrimaryUserRequest.generate_sts_token)
}

// bytes session_certificate = 4;
inline void AssociatePrimaryUserRequest::clear_session_certificate() {
  session_certificate_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& AssociatePrimaryUserRequest::session_certificate() const {
  // @@protoc_insertion_point(field_get:tokenpb.AssociatePrimaryUserRequest.session_certificate)
  return _internal_session_certificate();
}
inline void AssociatePrimaryUserRequest::set_session_certificate(const std::string& value) {
  _internal_set_session_certificate(value);
  // @@protoc_insertion_point(field_set:tokenpb.AssociatePrimaryUserRequest.session_certificate)
}
inline std::string* AssociatePrimaryUserRequest::mutable_session_certificate() {
  // @@protoc_insertion_point(field_mutable:tokenpb.AssociatePrimaryUserRequest.session_certificate)
  return _internal_mutable_session_certificate();
}
inline const std::string& AssociatePrimaryUserRequest::_internal_session_certificate() const {
  return session_certificate_.Get();
}
inline void AssociatePrimaryUserRequest::_internal_set_session_certificate(const std::string& value) {
  
  session_certificate_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void AssociatePrimaryUserRequest::set_session_certificate(std::string&& value) {
  
  session_certificate_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:tokenpb.AssociatePrimaryUserRequest.session_certificate)
}
inline void AssociatePrimaryUserRequest::set_session_certificate(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  session_certificate_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:tokenpb.AssociatePrimaryUserRequest.session_certificate)
}
inline void AssociatePrimaryUserRequest::set_session_certificate(const void* value,
    size_t size) {
  
  session_certificate_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:tokenpb.AssociatePrimaryUserRequest.session_certificate)
}
inline std::string* AssociatePrimaryUserRequest::_internal_mutable_session_certificate() {
  
  return session_certificate_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* AssociatePrimaryUserRequest::release_session_certificate() {
  // @@protoc_insertion_point(field_release:tokenpb.AssociatePrimaryUserRequest.session_certificate)
  return session_certificate_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AssociatePrimaryUserRequest::set_allocated_session_certificate(std::string* session_certificate) {
  if (session_certificate != nullptr) {
    
  } else {
    
  }
  session_certificate_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), session_certificate,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:tokenpb.AssociatePrimaryUserRequest.session_certificate)
}
inline std::string* AssociatePrimaryUserRequest::unsafe_arena_release_session_certificate() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tokenpb.AssociatePrimaryUserRequest.session_certificate)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return session_certificate_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void AssociatePrimaryUserRequest::unsafe_arena_set_allocated_session_certificate(
    std::string* session_certificate) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (session_certificate != nullptr) {
    
  } else {
    
  }
  session_certificate_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      session_certificate, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tokenpb.AssociatePrimaryUserRequest.session_certificate)
}

// string client_name = 5;
inline void AssociatePrimaryUserRequest::clear_client_name() {
  client_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& AssociatePrimaryUserRequest::client_name() const {
  // @@protoc_insertion_point(field_get:tokenpb.AssociatePrimaryUserRequest.client_name)
  return _internal_client_name();
}
inline void AssociatePrimaryUserRequest::set_client_name(const std::string& value) {
  _internal_set_client_name(value);
  // @@protoc_insertion_point(field_set:tokenpb.AssociatePrimaryUserRequest.client_name)
}
inline std::string* AssociatePrimaryUserRequest::mutable_client_name() {
  // @@protoc_insertion_point(field_mutable:tokenpb.AssociatePrimaryUserRequest.client_name)
  return _internal_mutable_client_name();
}
inline const std::string& AssociatePrimaryUserRequest::_internal_client_name() const {
  return client_name_.Get();
}
inline void AssociatePrimaryUserRequest::_internal_set_client_name(const std::string& value) {
  
  client_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void AssociatePrimaryUserRequest::set_client_name(std::string&& value) {
  
  client_name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:tokenpb.AssociatePrimaryUserRequest.client_name)
}
inline void AssociatePrimaryUserRequest::set_client_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  client_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:tokenpb.AssociatePrimaryUserRequest.client_name)
}
inline void AssociatePrimaryUserRequest::set_client_name(const char* value,
    size_t size) {
  
  client_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:tokenpb.AssociatePrimaryUserRequest.client_name)
}
inline std::string* AssociatePrimaryUserRequest::_internal_mutable_client_name() {
  
  return client_name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* AssociatePrimaryUserRequest::release_client_name() {
  // @@protoc_insertion_point(field_release:tokenpb.AssociatePrimaryUserRequest.client_name)
  return client_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AssociatePrimaryUserRequest::set_allocated_client_name(std::string* client_name) {
  if (client_name != nullptr) {
    
  } else {
    
  }
  client_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), client_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:tokenpb.AssociatePrimaryUserRequest.client_name)
}
inline std::string* AssociatePrimaryUserRequest::unsafe_arena_release_client_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tokenpb.AssociatePrimaryUserRequest.client_name)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return client_name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void AssociatePrimaryUserRequest::unsafe_arena_set_allocated_client_name(
    std::string* client_name) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (client_name != nullptr) {
    
  } else {
    
  }
  client_name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      client_name, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tokenpb.AssociatePrimaryUserRequest.client_name)
}

// string app_id = 6;
inline void AssociatePrimaryUserRequest::clear_app_id() {
  app_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& AssociatePrimaryUserRequest::app_id() const {
  // @@protoc_insertion_point(field_get:tokenpb.AssociatePrimaryUserRequest.app_id)
  return _internal_app_id();
}
inline void AssociatePrimaryUserRequest::set_app_id(const std::string& value) {
  _internal_set_app_id(value);
  // @@protoc_insertion_point(field_set:tokenpb.AssociatePrimaryUserRequest.app_id)
}
inline std::string* AssociatePrimaryUserRequest::mutable_app_id() {
  // @@protoc_insertion_point(field_mutable:tokenpb.AssociatePrimaryUserRequest.app_id)
  return _internal_mutable_app_id();
}
inline const std::string& AssociatePrimaryUserRequest::_internal_app_id() const {
  return app_id_.Get();
}
inline void AssociatePrimaryUserRequest::_internal_set_app_id(const std::string& value) {
  
  app_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void AssociatePrimaryUserRequest::set_app_id(std::string&& value) {
  
  app_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:tokenpb.AssociatePrimaryUserRequest.app_id)
}
inline void AssociatePrimaryUserRequest::set_app_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  app_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:tokenpb.AssociatePrimaryUserRequest.app_id)
}
inline void AssociatePrimaryUserRequest::set_app_id(const char* value,
    size_t size) {
  
  app_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:tokenpb.AssociatePrimaryUserRequest.app_id)
}
inline std::string* AssociatePrimaryUserRequest::_internal_mutable_app_id() {
  
  return app_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* AssociatePrimaryUserRequest::release_app_id() {
  // @@protoc_insertion_point(field_release:tokenpb.AssociatePrimaryUserRequest.app_id)
  return app_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AssociatePrimaryUserRequest::set_allocated_app_id(std::string* app_id) {
  if (app_id != nullptr) {
    
  } else {
    
  }
  app_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), app_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:tokenpb.AssociatePrimaryUserRequest.app_id)
}
inline std::string* AssociatePrimaryUserRequest::unsafe_arena_release_app_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tokenpb.AssociatePrimaryUserRequest.app_id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return app_id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void AssociatePrimaryUserRequest::unsafe_arena_set_allocated_app_id(
    std::string* app_id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (app_id != nullptr) {
    
  } else {
    
  }
  app_id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      app_id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tokenpb.AssociatePrimaryUserRequest.app_id)
}

// bool skip_client_token = 7;
inline void AssociatePrimaryUserRequest::clear_skip_client_token() {
  skip_client_token_ = false;
}
inline bool AssociatePrimaryUserRequest::_internal_skip_client_token() const {
  return skip_client_token_;
}
inline bool AssociatePrimaryUserRequest::skip_client_token() const {
  // @@protoc_insertion_point(field_get:tokenpb.AssociatePrimaryUserRequest.skip_client_token)
  return _internal_skip_client_token();
}
inline void AssociatePrimaryUserRequest::_internal_set_skip_client_token(bool value) {
  
  skip_client_token_ = value;
}
inline void AssociatePrimaryUserRequest::set_skip_client_token(bool value) {
  _internal_set_skip_client_token(value);
  // @@protoc_insertion_point(field_set:tokenpb.AssociatePrimaryUserRequest.skip_client_token)
}

// bool revoke_client_tokens = 8;
inline void AssociatePrimaryUserRequest::clear_revoke_client_tokens() {
  revoke_client_tokens_ = false;
}
inline bool AssociatePrimaryUserRequest::_internal_revoke_client_tokens() const {
  return revoke_client_tokens_;
}
inline bool AssociatePrimaryUserRequest::revoke_client_tokens() const {
  // @@protoc_insertion_point(field_get:tokenpb.AssociatePrimaryUserRequest.revoke_client_tokens)
  return _internal_revoke_client_tokens();
}
inline void AssociatePrimaryUserRequest::_internal_set_revoke_client_tokens(bool value) {
  
  revoke_client_tokens_ = value;
}
inline void AssociatePrimaryUserRequest::set_revoke_client_tokens(bool value) {
  _internal_set_revoke_client_tokens(value);
  // @@protoc_insertion_point(field_set:tokenpb.AssociatePrimaryUserRequest.revoke_client_tokens)
}

// uint32 expiration_minutes = 9;
inline void AssociatePrimaryUserRequest::clear_expiration_minutes() {
  expiration_minutes_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 AssociatePrimaryUserRequest::_internal_expiration_minutes() const {
  return expiration_minutes_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 AssociatePrimaryUserRequest::expiration_minutes() const {
  // @@protoc_insertion_point(field_get:tokenpb.AssociatePrimaryUserRequest.expiration_minutes)
  return _internal_expiration_minutes();
}
inline void AssociatePrimaryUserRequest::_internal_set_expiration_minutes(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  expiration_minutes_ = value;
}
inline void AssociatePrimaryUserRequest::set_expiration_minutes(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_expiration_minutes(value);
  // @@protoc_insertion_point(field_set:tokenpb.AssociatePrimaryUserRequest.expiration_minutes)
}

// -------------------------------------------------------------------

// ReassociatePrimaryUserRequest

// bool generate_sts_token = 1;
inline void ReassociatePrimaryUserRequest::clear_generate_sts_token() {
  generate_sts_token_ = false;
}
inline bool ReassociatePrimaryUserRequest::_internal_generate_sts_token() const {
  return generate_sts_token_;
}
inline bool ReassociatePrimaryUserRequest::generate_sts_token() const {
  // @@protoc_insertion_point(field_get:tokenpb.ReassociatePrimaryUserRequest.generate_sts_token)
  return _internal_generate_sts_token();
}
inline void ReassociatePrimaryUserRequest::_internal_set_generate_sts_token(bool value) {
  
  generate_sts_token_ = value;
}
inline void ReassociatePrimaryUserRequest::set_generate_sts_token(bool value) {
  _internal_set_generate_sts_token(value);
  // @@protoc_insertion_point(field_set:tokenpb.ReassociatePrimaryUserRequest.generate_sts_token)
}

// string client_name = 2;
inline void ReassociatePrimaryUserRequest::clear_client_name() {
  client_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ReassociatePrimaryUserRequest::client_name() const {
  // @@protoc_insertion_point(field_get:tokenpb.ReassociatePrimaryUserRequest.client_name)
  return _internal_client_name();
}
inline void ReassociatePrimaryUserRequest::set_client_name(const std::string& value) {
  _internal_set_client_name(value);
  // @@protoc_insertion_point(field_set:tokenpb.ReassociatePrimaryUserRequest.client_name)
}
inline std::string* ReassociatePrimaryUserRequest::mutable_client_name() {
  // @@protoc_insertion_point(field_mutable:tokenpb.ReassociatePrimaryUserRequest.client_name)
  return _internal_mutable_client_name();
}
inline const std::string& ReassociatePrimaryUserRequest::_internal_client_name() const {
  return client_name_.Get();
}
inline void ReassociatePrimaryUserRequest::_internal_set_client_name(const std::string& value) {
  
  client_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ReassociatePrimaryUserRequest::set_client_name(std::string&& value) {
  
  client_name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:tokenpb.ReassociatePrimaryUserRequest.client_name)
}
inline void ReassociatePrimaryUserRequest::set_client_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  client_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:tokenpb.ReassociatePrimaryUserRequest.client_name)
}
inline void ReassociatePrimaryUserRequest::set_client_name(const char* value,
    size_t size) {
  
  client_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:tokenpb.ReassociatePrimaryUserRequest.client_name)
}
inline std::string* ReassociatePrimaryUserRequest::_internal_mutable_client_name() {
  
  return client_name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ReassociatePrimaryUserRequest::release_client_name() {
  // @@protoc_insertion_point(field_release:tokenpb.ReassociatePrimaryUserRequest.client_name)
  return client_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ReassociatePrimaryUserRequest::set_allocated_client_name(std::string* client_name) {
  if (client_name != nullptr) {
    
  } else {
    
  }
  client_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), client_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:tokenpb.ReassociatePrimaryUserRequest.client_name)
}
inline std::string* ReassociatePrimaryUserRequest::unsafe_arena_release_client_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tokenpb.ReassociatePrimaryUserRequest.client_name)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return client_name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ReassociatePrimaryUserRequest::unsafe_arena_set_allocated_client_name(
    std::string* client_name) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (client_name != nullptr) {
    
  } else {
    
  }
  client_name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      client_name, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tokenpb.ReassociatePrimaryUserRequest.client_name)
}

// string app_id = 3;
inline void ReassociatePrimaryUserRequest::clear_app_id() {
  app_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ReassociatePrimaryUserRequest::app_id() const {
  // @@protoc_insertion_point(field_get:tokenpb.ReassociatePrimaryUserRequest.app_id)
  return _internal_app_id();
}
inline void ReassociatePrimaryUserRequest::set_app_id(const std::string& value) {
  _internal_set_app_id(value);
  // @@protoc_insertion_point(field_set:tokenpb.ReassociatePrimaryUserRequest.app_id)
}
inline std::string* ReassociatePrimaryUserRequest::mutable_app_id() {
  // @@protoc_insertion_point(field_mutable:tokenpb.ReassociatePrimaryUserRequest.app_id)
  return _internal_mutable_app_id();
}
inline const std::string& ReassociatePrimaryUserRequest::_internal_app_id() const {
  return app_id_.Get();
}
inline void ReassociatePrimaryUserRequest::_internal_set_app_id(const std::string& value) {
  
  app_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ReassociatePrimaryUserRequest::set_app_id(std::string&& value) {
  
  app_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:tokenpb.ReassociatePrimaryUserRequest.app_id)
}
inline void ReassociatePrimaryUserRequest::set_app_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  app_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:tokenpb.ReassociatePrimaryUserRequest.app_id)
}
inline void ReassociatePrimaryUserRequest::set_app_id(const char* value,
    size_t size) {
  
  app_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:tokenpb.ReassociatePrimaryUserRequest.app_id)
}
inline std::string* ReassociatePrimaryUserRequest::_internal_mutable_app_id() {
  
  return app_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ReassociatePrimaryUserRequest::release_app_id() {
  // @@protoc_insertion_point(field_release:tokenpb.ReassociatePrimaryUserRequest.app_id)
  return app_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ReassociatePrimaryUserRequest::set_allocated_app_id(std::string* app_id) {
  if (app_id != nullptr) {
    
  } else {
    
  }
  app_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), app_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:tokenpb.ReassociatePrimaryUserRequest.app_id)
}
inline std::string* ReassociatePrimaryUserRequest::unsafe_arena_release_app_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tokenpb.ReassociatePrimaryUserRequest.app_id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return app_id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ReassociatePrimaryUserRequest::unsafe_arena_set_allocated_app_id(
    std::string* app_id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (app_id != nullptr) {
    
  } else {
    
  }
  app_id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      app_id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tokenpb.ReassociatePrimaryUserRequest.app_id)
}

// bool skip_client_token = 4;
inline void ReassociatePrimaryUserRequest::clear_skip_client_token() {
  skip_client_token_ = false;
}
inline bool ReassociatePrimaryUserRequest::_internal_skip_client_token() const {
  return skip_client_token_;
}
inline bool ReassociatePrimaryUserRequest::skip_client_token() const {
  // @@protoc_insertion_point(field_get:tokenpb.ReassociatePrimaryUserRequest.skip_client_token)
  return _internal_skip_client_token();
}
inline void ReassociatePrimaryUserRequest::_internal_set_skip_client_token(bool value) {
  
  skip_client_token_ = value;
}
inline void ReassociatePrimaryUserRequest::set_skip_client_token(bool value) {
  _internal_set_skip_client_token(value);
  // @@protoc_insertion_point(field_set:tokenpb.ReassociatePrimaryUserRequest.skip_client_token)
}

// uint32 expiration_minutes = 5;
inline void ReassociatePrimaryUserRequest::clear_expiration_minutes() {
  expiration_minutes_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ReassociatePrimaryUserRequest::_internal_expiration_minutes() const {
  return expiration_minutes_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ReassociatePrimaryUserRequest::expiration_minutes() const {
  // @@protoc_insertion_point(field_get:tokenpb.ReassociatePrimaryUserRequest.expiration_minutes)
  return _internal_expiration_minutes();
}
inline void ReassociatePrimaryUserRequest::_internal_set_expiration_minutes(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  expiration_minutes_ = value;
}
inline void ReassociatePrimaryUserRequest::set_expiration_minutes(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_expiration_minutes(value);
  // @@protoc_insertion_point(field_set:tokenpb.ReassociatePrimaryUserRequest.expiration_minutes)
}

// -------------------------------------------------------------------

// ReassociatePrimaryUserResponse

// .tokenpb.TokenBundle data = 1;
inline bool ReassociatePrimaryUserResponse::_internal_has_data() const {
  return this != internal_default_instance() && data_ != nullptr;
}
inline bool ReassociatePrimaryUserResponse::has_data() const {
  return _internal_has_data();
}
inline void ReassociatePrimaryUserResponse::clear_data() {
  if (GetArena() == nullptr && data_ != nullptr) {
    delete data_;
  }
  data_ = nullptr;
}
inline const ::tokenpb::TokenBundle& ReassociatePrimaryUserResponse::_internal_data() const {
  const ::tokenpb::TokenBundle* p = data_;
  return p != nullptr ? *p : *reinterpret_cast<const ::tokenpb::TokenBundle*>(
      &::tokenpb::_TokenBundle_default_instance_);
}
inline const ::tokenpb::TokenBundle& ReassociatePrimaryUserResponse::data() const {
  // @@protoc_insertion_point(field_get:tokenpb.ReassociatePrimaryUserResponse.data)
  return _internal_data();
}
inline void ReassociatePrimaryUserResponse::unsafe_arena_set_allocated_data(
    ::tokenpb::TokenBundle* data) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(data_);
  }
  data_ = data;
  if (data) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tokenpb.ReassociatePrimaryUserResponse.data)
}
inline ::tokenpb::TokenBundle* ReassociatePrimaryUserResponse::release_data() {
  auto temp = unsafe_arena_release_data();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::tokenpb::TokenBundle* ReassociatePrimaryUserResponse::unsafe_arena_release_data() {
  // @@protoc_insertion_point(field_release:tokenpb.ReassociatePrimaryUserResponse.data)
  
  ::tokenpb::TokenBundle* temp = data_;
  data_ = nullptr;
  return temp;
}
inline ::tokenpb::TokenBundle* ReassociatePrimaryUserResponse::_internal_mutable_data() {
  
  if (data_ == nullptr) {
    auto* p = CreateMaybeMessage<::tokenpb::TokenBundle>(GetArena());
    data_ = p;
  }
  return data_;
}
inline ::tokenpb::TokenBundle* ReassociatePrimaryUserResponse::mutable_data() {
  // @@protoc_insertion_point(field_mutable:tokenpb.ReassociatePrimaryUserResponse.data)
  return _internal_mutable_data();
}
inline void ReassociatePrimaryUserResponse::set_allocated_data(::tokenpb::TokenBundle* data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete data_;
  }
  if (data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(data);
    if (message_arena != submessage_arena) {
      data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, data, submessage_arena);
    }
    
  } else {
    
  }
  data_ = data;
  // @@protoc_insertion_point(field_set_allocated:tokenpb.ReassociatePrimaryUserResponse.data)
}

// -------------------------------------------------------------------

// AssociatePrimaryUserResponse

// .tokenpb.TokenBundle data = 1;
inline bool AssociatePrimaryUserResponse::_internal_has_data() const {
  return this != internal_default_instance() && data_ != nullptr;
}
inline bool AssociatePrimaryUserResponse::has_data() const {
  return _internal_has_data();
}
inline void AssociatePrimaryUserResponse::clear_data() {
  if (GetArena() == nullptr && data_ != nullptr) {
    delete data_;
  }
  data_ = nullptr;
}
inline const ::tokenpb::TokenBundle& AssociatePrimaryUserResponse::_internal_data() const {
  const ::tokenpb::TokenBundle* p = data_;
  return p != nullptr ? *p : *reinterpret_cast<const ::tokenpb::TokenBundle*>(
      &::tokenpb::_TokenBundle_default_instance_);
}
inline const ::tokenpb::TokenBundle& AssociatePrimaryUserResponse::data() const {
  // @@protoc_insertion_point(field_get:tokenpb.AssociatePrimaryUserResponse.data)
  return _internal_data();
}
inline void AssociatePrimaryUserResponse::unsafe_arena_set_allocated_data(
    ::tokenpb::TokenBundle* data) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(data_);
  }
  data_ = data;
  if (data) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tokenpb.AssociatePrimaryUserResponse.data)
}
inline ::tokenpb::TokenBundle* AssociatePrimaryUserResponse::release_data() {
  auto temp = unsafe_arena_release_data();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::tokenpb::TokenBundle* AssociatePrimaryUserResponse::unsafe_arena_release_data() {
  // @@protoc_insertion_point(field_release:tokenpb.AssociatePrimaryUserResponse.data)
  
  ::tokenpb::TokenBundle* temp = data_;
  data_ = nullptr;
  return temp;
}
inline ::tokenpb::TokenBundle* AssociatePrimaryUserResponse::_internal_mutable_data() {
  
  if (data_ == nullptr) {
    auto* p = CreateMaybeMessage<::tokenpb::TokenBundle>(GetArena());
    data_ = p;
  }
  return data_;
}
inline ::tokenpb::TokenBundle* AssociatePrimaryUserResponse::mutable_data() {
  // @@protoc_insertion_point(field_mutable:tokenpb.AssociatePrimaryUserResponse.data)
  return _internal_mutable_data();
}
inline void AssociatePrimaryUserResponse::set_allocated_data(::tokenpb::TokenBundle* data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete data_;
  }
  if (data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(data);
    if (message_arena != submessage_arena) {
      data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, data, submessage_arena);
    }
    
  } else {
    
  }
  data_ = data;
  // @@protoc_insertion_point(field_set_allocated:tokenpb.AssociatePrimaryUserResponse.data)
}

// -------------------------------------------------------------------

// AssociateSecondaryClientRequest

// string user_session = 2;
inline void AssociateSecondaryClientRequest::clear_user_session() {
  user_session_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& AssociateSecondaryClientRequest::user_session() const {
  // @@protoc_insertion_point(field_get:tokenpb.AssociateSecondaryClientRequest.user_session)
  return _internal_user_session();
}
inline void AssociateSecondaryClientRequest::set_user_session(const std::string& value) {
  _internal_set_user_session(value);
  // @@protoc_insertion_point(field_set:tokenpb.AssociateSecondaryClientRequest.user_session)
}
inline std::string* AssociateSecondaryClientRequest::mutable_user_session() {
  // @@protoc_insertion_point(field_mutable:tokenpb.AssociateSecondaryClientRequest.user_session)
  return _internal_mutable_user_session();
}
inline const std::string& AssociateSecondaryClientRequest::_internal_user_session() const {
  return user_session_.Get();
}
inline void AssociateSecondaryClientRequest::_internal_set_user_session(const std::string& value) {
  
  user_session_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void AssociateSecondaryClientRequest::set_user_session(std::string&& value) {
  
  user_session_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:tokenpb.AssociateSecondaryClientRequest.user_session)
}
inline void AssociateSecondaryClientRequest::set_user_session(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  user_session_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:tokenpb.AssociateSecondaryClientRequest.user_session)
}
inline void AssociateSecondaryClientRequest::set_user_session(const char* value,
    size_t size) {
  
  user_session_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:tokenpb.AssociateSecondaryClientRequest.user_session)
}
inline std::string* AssociateSecondaryClientRequest::_internal_mutable_user_session() {
  
  return user_session_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* AssociateSecondaryClientRequest::release_user_session() {
  // @@protoc_insertion_point(field_release:tokenpb.AssociateSecondaryClientRequest.user_session)
  return user_session_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AssociateSecondaryClientRequest::set_allocated_user_session(std::string* user_session) {
  if (user_session != nullptr) {
    
  } else {
    
  }
  user_session_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), user_session,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:tokenpb.AssociateSecondaryClientRequest.user_session)
}
inline std::string* AssociateSecondaryClientRequest::unsafe_arena_release_user_session() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tokenpb.AssociateSecondaryClientRequest.user_session)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return user_session_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void AssociateSecondaryClientRequest::unsafe_arena_set_allocated_user_session(
    std::string* user_session) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (user_session != nullptr) {
    
  } else {
    
  }
  user_session_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      user_session, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tokenpb.AssociateSecondaryClientRequest.user_session)
}

// string client_name = 3;
inline void AssociateSecondaryClientRequest::clear_client_name() {
  client_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& AssociateSecondaryClientRequest::client_name() const {
  // @@protoc_insertion_point(field_get:tokenpb.AssociateSecondaryClientRequest.client_name)
  return _internal_client_name();
}
inline void AssociateSecondaryClientRequest::set_client_name(const std::string& value) {
  _internal_set_client_name(value);
  // @@protoc_insertion_point(field_set:tokenpb.AssociateSecondaryClientRequest.client_name)
}
inline std::string* AssociateSecondaryClientRequest::mutable_client_name() {
  // @@protoc_insertion_point(field_mutable:tokenpb.AssociateSecondaryClientRequest.client_name)
  return _internal_mutable_client_name();
}
inline const std::string& AssociateSecondaryClientRequest::_internal_client_name() const {
  return client_name_.Get();
}
inline void AssociateSecondaryClientRequest::_internal_set_client_name(const std::string& value) {
  
  client_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void AssociateSecondaryClientRequest::set_client_name(std::string&& value) {
  
  client_name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:tokenpb.AssociateSecondaryClientRequest.client_name)
}
inline void AssociateSecondaryClientRequest::set_client_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  client_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:tokenpb.AssociateSecondaryClientRequest.client_name)
}
inline void AssociateSecondaryClientRequest::set_client_name(const char* value,
    size_t size) {
  
  client_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:tokenpb.AssociateSecondaryClientRequest.client_name)
}
inline std::string* AssociateSecondaryClientRequest::_internal_mutable_client_name() {
  
  return client_name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* AssociateSecondaryClientRequest::release_client_name() {
  // @@protoc_insertion_point(field_release:tokenpb.AssociateSecondaryClientRequest.client_name)
  return client_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AssociateSecondaryClientRequest::set_allocated_client_name(std::string* client_name) {
  if (client_name != nullptr) {
    
  } else {
    
  }
  client_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), client_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:tokenpb.AssociateSecondaryClientRequest.client_name)
}
inline std::string* AssociateSecondaryClientRequest::unsafe_arena_release_client_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tokenpb.AssociateSecondaryClientRequest.client_name)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return client_name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void AssociateSecondaryClientRequest::unsafe_arena_set_allocated_client_name(
    std::string* client_name) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (client_name != nullptr) {
    
  } else {
    
  }
  client_name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      client_name, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tokenpb.AssociateSecondaryClientRequest.client_name)
}

// string app_id = 4;
inline void AssociateSecondaryClientRequest::clear_app_id() {
  app_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& AssociateSecondaryClientRequest::app_id() const {
  // @@protoc_insertion_point(field_get:tokenpb.AssociateSecondaryClientRequest.app_id)
  return _internal_app_id();
}
inline void AssociateSecondaryClientRequest::set_app_id(const std::string& value) {
  _internal_set_app_id(value);
  // @@protoc_insertion_point(field_set:tokenpb.AssociateSecondaryClientRequest.app_id)
}
inline std::string* AssociateSecondaryClientRequest::mutable_app_id() {
  // @@protoc_insertion_point(field_mutable:tokenpb.AssociateSecondaryClientRequest.app_id)
  return _internal_mutable_app_id();
}
inline const std::string& AssociateSecondaryClientRequest::_internal_app_id() const {
  return app_id_.Get();
}
inline void AssociateSecondaryClientRequest::_internal_set_app_id(const std::string& value) {
  
  app_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void AssociateSecondaryClientRequest::set_app_id(std::string&& value) {
  
  app_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:tokenpb.AssociateSecondaryClientRequest.app_id)
}
inline void AssociateSecondaryClientRequest::set_app_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  app_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:tokenpb.AssociateSecondaryClientRequest.app_id)
}
inline void AssociateSecondaryClientRequest::set_app_id(const char* value,
    size_t size) {
  
  app_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:tokenpb.AssociateSecondaryClientRequest.app_id)
}
inline std::string* AssociateSecondaryClientRequest::_internal_mutable_app_id() {
  
  return app_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* AssociateSecondaryClientRequest::release_app_id() {
  // @@protoc_insertion_point(field_release:tokenpb.AssociateSecondaryClientRequest.app_id)
  return app_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AssociateSecondaryClientRequest::set_allocated_app_id(std::string* app_id) {
  if (app_id != nullptr) {
    
  } else {
    
  }
  app_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), app_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:tokenpb.AssociateSecondaryClientRequest.app_id)
}
inline std::string* AssociateSecondaryClientRequest::unsafe_arena_release_app_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tokenpb.AssociateSecondaryClientRequest.app_id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return app_id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void AssociateSecondaryClientRequest::unsafe_arena_set_allocated_app_id(
    std::string* app_id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (app_id != nullptr) {
    
  } else {
    
  }
  app_id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      app_id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tokenpb.AssociateSecondaryClientRequest.app_id)
}

// -------------------------------------------------------------------

// AssociateSecondaryClientResponse

// .tokenpb.TokenBundle data = 1;
inline bool AssociateSecondaryClientResponse::_internal_has_data() const {
  return this != internal_default_instance() && data_ != nullptr;
}
inline bool AssociateSecondaryClientResponse::has_data() const {
  return _internal_has_data();
}
inline void AssociateSecondaryClientResponse::clear_data() {
  if (GetArena() == nullptr && data_ != nullptr) {
    delete data_;
  }
  data_ = nullptr;
}
inline const ::tokenpb::TokenBundle& AssociateSecondaryClientResponse::_internal_data() const {
  const ::tokenpb::TokenBundle* p = data_;
  return p != nullptr ? *p : *reinterpret_cast<const ::tokenpb::TokenBundle*>(
      &::tokenpb::_TokenBundle_default_instance_);
}
inline const ::tokenpb::TokenBundle& AssociateSecondaryClientResponse::data() const {
  // @@protoc_insertion_point(field_get:tokenpb.AssociateSecondaryClientResponse.data)
  return _internal_data();
}
inline void AssociateSecondaryClientResponse::unsafe_arena_set_allocated_data(
    ::tokenpb::TokenBundle* data) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(data_);
  }
  data_ = data;
  if (data) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tokenpb.AssociateSecondaryClientResponse.data)
}
inline ::tokenpb::TokenBundle* AssociateSecondaryClientResponse::release_data() {
  auto temp = unsafe_arena_release_data();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::tokenpb::TokenBundle* AssociateSecondaryClientResponse::unsafe_arena_release_data() {
  // @@protoc_insertion_point(field_release:tokenpb.AssociateSecondaryClientResponse.data)
  
  ::tokenpb::TokenBundle* temp = data_;
  data_ = nullptr;
  return temp;
}
inline ::tokenpb::TokenBundle* AssociateSecondaryClientResponse::_internal_mutable_data() {
  
  if (data_ == nullptr) {
    auto* p = CreateMaybeMessage<::tokenpb::TokenBundle>(GetArena());
    data_ = p;
  }
  return data_;
}
inline ::tokenpb::TokenBundle* AssociateSecondaryClientResponse::mutable_data() {
  // @@protoc_insertion_point(field_mutable:tokenpb.AssociateSecondaryClientResponse.data)
  return _internal_mutable_data();
}
inline void AssociateSecondaryClientResponse::set_allocated_data(::tokenpb::TokenBundle* data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete data_;
  }
  if (data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(data);
    if (message_arena != submessage_arena) {
      data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, data, submessage_arena);
    }
    
  } else {
    
  }
  data_ = data;
  // @@protoc_insertion_point(field_set_allocated:tokenpb.AssociateSecondaryClientResponse.data)
}

// -------------------------------------------------------------------

// DisassociatePrimaryUserRequest

// -------------------------------------------------------------------

// DisassociatePrimaryUserResponse

// -------------------------------------------------------------------

// RefreshTokenRequest

// bool refresh_jwt_tokens = 2;
inline void RefreshTokenRequest::clear_refresh_jwt_tokens() {
  refresh_jwt_tokens_ = false;
}
inline bool RefreshTokenRequest::_internal_refresh_jwt_tokens() const {
  return refresh_jwt_tokens_;
}
inline bool RefreshTokenRequest::refresh_jwt_tokens() const {
  // @@protoc_insertion_point(field_get:tokenpb.RefreshTokenRequest.refresh_jwt_tokens)
  return _internal_refresh_jwt_tokens();
}
inline void RefreshTokenRequest::_internal_set_refresh_jwt_tokens(bool value) {
  
  refresh_jwt_tokens_ = value;
}
inline void RefreshTokenRequest::set_refresh_jwt_tokens(bool value) {
  _internal_set_refresh_jwt_tokens(value);
  // @@protoc_insertion_point(field_set:tokenpb.RefreshTokenRequest.refresh_jwt_tokens)
}

// bool refresh_sts_tokens = 3;
inline void RefreshTokenRequest::clear_refresh_sts_tokens() {
  refresh_sts_tokens_ = false;
}
inline bool RefreshTokenRequest::_internal_refresh_sts_tokens() const {
  return refresh_sts_tokens_;
}
inline bool RefreshTokenRequest::refresh_sts_tokens() const {
  // @@protoc_insertion_point(field_get:tokenpb.RefreshTokenRequest.refresh_sts_tokens)
  return _internal_refresh_sts_tokens();
}
inline void RefreshTokenRequest::_internal_set_refresh_sts_tokens(bool value) {
  
  refresh_sts_tokens_ = value;
}
inline void RefreshTokenRequest::set_refresh_sts_tokens(bool value) {
  _internal_set_refresh_sts_tokens(value);
  // @@protoc_insertion_point(field_set:tokenpb.RefreshTokenRequest.refresh_sts_tokens)
}

// uint32 expiration_minutes = 4;
inline void RefreshTokenRequest::clear_expiration_minutes() {
  expiration_minutes_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RefreshTokenRequest::_internal_expiration_minutes() const {
  return expiration_minutes_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RefreshTokenRequest::expiration_minutes() const {
  // @@protoc_insertion_point(field_get:tokenpb.RefreshTokenRequest.expiration_minutes)
  return _internal_expiration_minutes();
}
inline void RefreshTokenRequest::_internal_set_expiration_minutes(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  expiration_minutes_ = value;
}
inline void RefreshTokenRequest::set_expiration_minutes(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_expiration_minutes(value);
  // @@protoc_insertion_point(field_set:tokenpb.RefreshTokenRequest.expiration_minutes)
}

// -------------------------------------------------------------------

// RefreshTokenResponse

// .tokenpb.TokenBundle data = 1;
inline bool RefreshTokenResponse::_internal_has_data() const {
  return this != internal_default_instance() && data_ != nullptr;
}
inline bool RefreshTokenResponse::has_data() const {
  return _internal_has_data();
}
inline void RefreshTokenResponse::clear_data() {
  if (GetArena() == nullptr && data_ != nullptr) {
    delete data_;
  }
  data_ = nullptr;
}
inline const ::tokenpb::TokenBundle& RefreshTokenResponse::_internal_data() const {
  const ::tokenpb::TokenBundle* p = data_;
  return p != nullptr ? *p : *reinterpret_cast<const ::tokenpb::TokenBundle*>(
      &::tokenpb::_TokenBundle_default_instance_);
}
inline const ::tokenpb::TokenBundle& RefreshTokenResponse::data() const {
  // @@protoc_insertion_point(field_get:tokenpb.RefreshTokenResponse.data)
  return _internal_data();
}
inline void RefreshTokenResponse::unsafe_arena_set_allocated_data(
    ::tokenpb::TokenBundle* data) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(data_);
  }
  data_ = data;
  if (data) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tokenpb.RefreshTokenResponse.data)
}
inline ::tokenpb::TokenBundle* RefreshTokenResponse::release_data() {
  auto temp = unsafe_arena_release_data();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::tokenpb::TokenBundle* RefreshTokenResponse::unsafe_arena_release_data() {
  // @@protoc_insertion_point(field_release:tokenpb.RefreshTokenResponse.data)
  
  ::tokenpb::TokenBundle* temp = data_;
  data_ = nullptr;
  return temp;
}
inline ::tokenpb::TokenBundle* RefreshTokenResponse::_internal_mutable_data() {
  
  if (data_ == nullptr) {
    auto* p = CreateMaybeMessage<::tokenpb::TokenBundle>(GetArena());
    data_ = p;
  }
  return data_;
}
inline ::tokenpb::TokenBundle* RefreshTokenResponse::mutable_data() {
  // @@protoc_insertion_point(field_mutable:tokenpb.RefreshTokenResponse.data)
  return _internal_mutable_data();
}
inline void RefreshTokenResponse::set_allocated_data(::tokenpb::TokenBundle* data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete data_;
  }
  if (data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(data);
    if (message_arena != submessage_arena) {
      data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, data, submessage_arena);
    }
    
  } else {
    
  }
  data_ = data;
  // @@protoc_insertion_point(field_set_allocated:tokenpb.RefreshTokenResponse.data)
}

// -------------------------------------------------------------------

// TokensPage

// repeated string tokens = 1;
inline int TokensPage::_internal_tokens_size() const {
  return tokens_.size();
}
inline int TokensPage::tokens_size() const {
  return _internal_tokens_size();
}
inline void TokensPage::clear_tokens() {
  tokens_.Clear();
}
inline std::string* TokensPage::add_tokens() {
  // @@protoc_insertion_point(field_add_mutable:tokenpb.TokensPage.tokens)
  return _internal_add_tokens();
}
inline const std::string& TokensPage::_internal_tokens(int index) const {
  return tokens_.Get(index);
}
inline const std::string& TokensPage::tokens(int index) const {
  // @@protoc_insertion_point(field_get:tokenpb.TokensPage.tokens)
  return _internal_tokens(index);
}
inline std::string* TokensPage::mutable_tokens(int index) {
  // @@protoc_insertion_point(field_mutable:tokenpb.TokensPage.tokens)
  return tokens_.Mutable(index);
}
inline void TokensPage::set_tokens(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:tokenpb.TokensPage.tokens)
  tokens_.Mutable(index)->assign(value);
}
inline void TokensPage::set_tokens(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:tokenpb.TokensPage.tokens)
  tokens_.Mutable(index)->assign(std::move(value));
}
inline void TokensPage::set_tokens(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  tokens_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:tokenpb.TokensPage.tokens)
}
inline void TokensPage::set_tokens(int index, const char* value, size_t size) {
  tokens_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:tokenpb.TokensPage.tokens)
}
inline std::string* TokensPage::_internal_add_tokens() {
  return tokens_.Add();
}
inline void TokensPage::add_tokens(const std::string& value) {
  tokens_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:tokenpb.TokensPage.tokens)
}
inline void TokensPage::add_tokens(std::string&& value) {
  tokens_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:tokenpb.TokensPage.tokens)
}
inline void TokensPage::add_tokens(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  tokens_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:tokenpb.TokensPage.tokens)
}
inline void TokensPage::add_tokens(const char* value, size_t size) {
  tokens_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:tokenpb.TokensPage.tokens)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
TokensPage::tokens() const {
  // @@protoc_insertion_point(field_list:tokenpb.TokensPage.tokens)
  return tokens_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
TokensPage::mutable_tokens() {
  // @@protoc_insertion_point(field_mutable_list:tokenpb.TokensPage.tokens)
  return &tokens_;
}

// string last_key = 2;
inline void TokensPage::clear_last_key() {
  last_key_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& TokensPage::last_key() const {
  // @@protoc_insertion_point(field_get:tokenpb.TokensPage.last_key)
  return _internal_last_key();
}
inline void TokensPage::set_last_key(const std::string& value) {
  _internal_set_last_key(value);
  // @@protoc_insertion_point(field_set:tokenpb.TokensPage.last_key)
}
inline std::string* TokensPage::mutable_last_key() {
  // @@protoc_insertion_point(field_mutable:tokenpb.TokensPage.last_key)
  return _internal_mutable_last_key();
}
inline const std::string& TokensPage::_internal_last_key() const {
  return last_key_.Get();
}
inline void TokensPage::_internal_set_last_key(const std::string& value) {
  
  last_key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void TokensPage::set_last_key(std::string&& value) {
  
  last_key_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:tokenpb.TokensPage.last_key)
}
inline void TokensPage::set_last_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  last_key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:tokenpb.TokensPage.last_key)
}
inline void TokensPage::set_last_key(const char* value,
    size_t size) {
  
  last_key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:tokenpb.TokensPage.last_key)
}
inline std::string* TokensPage::_internal_mutable_last_key() {
  
  return last_key_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* TokensPage::release_last_key() {
  // @@protoc_insertion_point(field_release:tokenpb.TokensPage.last_key)
  return last_key_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TokensPage::set_allocated_last_key(std::string* last_key) {
  if (last_key != nullptr) {
    
  } else {
    
  }
  last_key_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), last_key,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:tokenpb.TokensPage.last_key)
}
inline std::string* TokensPage::unsafe_arena_release_last_key() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tokenpb.TokensPage.last_key)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return last_key_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void TokensPage::unsafe_arena_set_allocated_last_key(
    std::string* last_key) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (last_key != nullptr) {
    
  } else {
    
  }
  last_key_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      last_key, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tokenpb.TokensPage.last_key)
}

// bool done = 3;
inline void TokensPage::clear_done() {
  done_ = false;
}
inline bool TokensPage::_internal_done() const {
  return done_;
}
inline bool TokensPage::done() const {
  // @@protoc_insertion_point(field_get:tokenpb.TokensPage.done)
  return _internal_done();
}
inline void TokensPage::_internal_set_done(bool value) {
  
  done_ = value;
}
inline void TokensPage::set_done(bool value) {
  _internal_set_done(value);
  // @@protoc_insertion_point(field_set:tokenpb.TokensPage.done)
}

// -------------------------------------------------------------------

// ListRevokedTokensRequest

// string previous_key = 1;
inline void ListRevokedTokensRequest::clear_previous_key() {
  previous_key_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ListRevokedTokensRequest::previous_key() const {
  // @@protoc_insertion_point(field_get:tokenpb.ListRevokedTokensRequest.previous_key)
  return _internal_previous_key();
}
inline void ListRevokedTokensRequest::set_previous_key(const std::string& value) {
  _internal_set_previous_key(value);
  // @@protoc_insertion_point(field_set:tokenpb.ListRevokedTokensRequest.previous_key)
}
inline std::string* ListRevokedTokensRequest::mutable_previous_key() {
  // @@protoc_insertion_point(field_mutable:tokenpb.ListRevokedTokensRequest.previous_key)
  return _internal_mutable_previous_key();
}
inline const std::string& ListRevokedTokensRequest::_internal_previous_key() const {
  return previous_key_.Get();
}
inline void ListRevokedTokensRequest::_internal_set_previous_key(const std::string& value) {
  
  previous_key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ListRevokedTokensRequest::set_previous_key(std::string&& value) {
  
  previous_key_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:tokenpb.ListRevokedTokensRequest.previous_key)
}
inline void ListRevokedTokensRequest::set_previous_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  previous_key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:tokenpb.ListRevokedTokensRequest.previous_key)
}
inline void ListRevokedTokensRequest::set_previous_key(const char* value,
    size_t size) {
  
  previous_key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:tokenpb.ListRevokedTokensRequest.previous_key)
}
inline std::string* ListRevokedTokensRequest::_internal_mutable_previous_key() {
  
  return previous_key_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ListRevokedTokensRequest::release_previous_key() {
  // @@protoc_insertion_point(field_release:tokenpb.ListRevokedTokensRequest.previous_key)
  return previous_key_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ListRevokedTokensRequest::set_allocated_previous_key(std::string* previous_key) {
  if (previous_key != nullptr) {
    
  } else {
    
  }
  previous_key_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), previous_key,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:tokenpb.ListRevokedTokensRequest.previous_key)
}
inline std::string* ListRevokedTokensRequest::unsafe_arena_release_previous_key() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tokenpb.ListRevokedTokensRequest.previous_key)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return previous_key_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ListRevokedTokensRequest::unsafe_arena_set_allocated_previous_key(
    std::string* previous_key) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (previous_key != nullptr) {
    
  } else {
    
  }
  previous_key_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      previous_key, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tokenpb.ListRevokedTokensRequest.previous_key)
}

// -------------------------------------------------------------------

// ListRevokedTokensResponse

// .tokenpb.TokensPage data = 1;
inline bool ListRevokedTokensResponse::_internal_has_data() const {
  return this != internal_default_instance() && data_ != nullptr;
}
inline bool ListRevokedTokensResponse::has_data() const {
  return _internal_has_data();
}
inline void ListRevokedTokensResponse::clear_data() {
  if (GetArena() == nullptr && data_ != nullptr) {
    delete data_;
  }
  data_ = nullptr;
}
inline const ::tokenpb::TokensPage& ListRevokedTokensResponse::_internal_data() const {
  const ::tokenpb::TokensPage* p = data_;
  return p != nullptr ? *p : *reinterpret_cast<const ::tokenpb::TokensPage*>(
      &::tokenpb::_TokensPage_default_instance_);
}
inline const ::tokenpb::TokensPage& ListRevokedTokensResponse::data() const {
  // @@protoc_insertion_point(field_get:tokenpb.ListRevokedTokensResponse.data)
  return _internal_data();
}
inline void ListRevokedTokensResponse::unsafe_arena_set_allocated_data(
    ::tokenpb::TokensPage* data) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(data_);
  }
  data_ = data;
  if (data) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tokenpb.ListRevokedTokensResponse.data)
}
inline ::tokenpb::TokensPage* ListRevokedTokensResponse::release_data() {
  auto temp = unsafe_arena_release_data();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::tokenpb::TokensPage* ListRevokedTokensResponse::unsafe_arena_release_data() {
  // @@protoc_insertion_point(field_release:tokenpb.ListRevokedTokensResponse.data)
  
  ::tokenpb::TokensPage* temp = data_;
  data_ = nullptr;
  return temp;
}
inline ::tokenpb::TokensPage* ListRevokedTokensResponse::_internal_mutable_data() {
  
  if (data_ == nullptr) {
    auto* p = CreateMaybeMessage<::tokenpb::TokensPage>(GetArena());
    data_ = p;
  }
  return data_;
}
inline ::tokenpb::TokensPage* ListRevokedTokensResponse::mutable_data() {
  // @@protoc_insertion_point(field_mutable:tokenpb.ListRevokedTokensResponse.data)
  return _internal_mutable_data();
}
inline void ListRevokedTokensResponse::set_allocated_data(::tokenpb::TokensPage* data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete data_;
  }
  if (data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(data);
    if (message_arena != submessage_arena) {
      data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, data, submessage_arena);
    }
    
  } else {
    
  }
  data_ = data;
  // @@protoc_insertion_point(field_set_allocated:tokenpb.ListRevokedTokensResponse.data)
}

// -------------------------------------------------------------------

// RevokeFactoryCertificateRequest

// string certificate_id = 1;
inline void RevokeFactoryCertificateRequest::clear_certificate_id() {
  certificate_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& RevokeFactoryCertificateRequest::certificate_id() const {
  // @@protoc_insertion_point(field_get:tokenpb.RevokeFactoryCertificateRequest.certificate_id)
  return _internal_certificate_id();
}
inline void RevokeFactoryCertificateRequest::set_certificate_id(const std::string& value) {
  _internal_set_certificate_id(value);
  // @@protoc_insertion_point(field_set:tokenpb.RevokeFactoryCertificateRequest.certificate_id)
}
inline std::string* RevokeFactoryCertificateRequest::mutable_certificate_id() {
  // @@protoc_insertion_point(field_mutable:tokenpb.RevokeFactoryCertificateRequest.certificate_id)
  return _internal_mutable_certificate_id();
}
inline const std::string& RevokeFactoryCertificateRequest::_internal_certificate_id() const {
  return certificate_id_.Get();
}
inline void RevokeFactoryCertificateRequest::_internal_set_certificate_id(const std::string& value) {
  
  certificate_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void RevokeFactoryCertificateRequest::set_certificate_id(std::string&& value) {
  
  certificate_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:tokenpb.RevokeFactoryCertificateRequest.certificate_id)
}
inline void RevokeFactoryCertificateRequest::set_certificate_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  certificate_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:tokenpb.RevokeFactoryCertificateRequest.certificate_id)
}
inline void RevokeFactoryCertificateRequest::set_certificate_id(const char* value,
    size_t size) {
  
  certificate_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:tokenpb.RevokeFactoryCertificateRequest.certificate_id)
}
inline std::string* RevokeFactoryCertificateRequest::_internal_mutable_certificate_id() {
  
  return certificate_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* RevokeFactoryCertificateRequest::release_certificate_id() {
  // @@protoc_insertion_point(field_release:tokenpb.RevokeFactoryCertificateRequest.certificate_id)
  return certificate_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RevokeFactoryCertificateRequest::set_allocated_certificate_id(std::string* certificate_id) {
  if (certificate_id != nullptr) {
    
  } else {
    
  }
  certificate_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), certificate_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:tokenpb.RevokeFactoryCertificateRequest.certificate_id)
}
inline std::string* RevokeFactoryCertificateRequest::unsafe_arena_release_certificate_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tokenpb.RevokeFactoryCertificateRequest.certificate_id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return certificate_id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void RevokeFactoryCertificateRequest::unsafe_arena_set_allocated_certificate_id(
    std::string* certificate_id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (certificate_id != nullptr) {
    
  } else {
    
  }
  certificate_id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      certificate_id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tokenpb.RevokeFactoryCertificateRequest.certificate_id)
}

// -------------------------------------------------------------------

// RevokeFactoryCertificateResponse

// -------------------------------------------------------------------

// RevokeTokensRequest

// string search_by_index = 1;
inline void RevokeTokensRequest::clear_search_by_index() {
  search_by_index_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& RevokeTokensRequest::search_by_index() const {
  // @@protoc_insertion_point(field_get:tokenpb.RevokeTokensRequest.search_by_index)
  return _internal_search_by_index();
}
inline void RevokeTokensRequest::set_search_by_index(const std::string& value) {
  _internal_set_search_by_index(value);
  // @@protoc_insertion_point(field_set:tokenpb.RevokeTokensRequest.search_by_index)
}
inline std::string* RevokeTokensRequest::mutable_search_by_index() {
  // @@protoc_insertion_point(field_mutable:tokenpb.RevokeTokensRequest.search_by_index)
  return _internal_mutable_search_by_index();
}
inline const std::string& RevokeTokensRequest::_internal_search_by_index() const {
  return search_by_index_.Get();
}
inline void RevokeTokensRequest::_internal_set_search_by_index(const std::string& value) {
  
  search_by_index_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void RevokeTokensRequest::set_search_by_index(std::string&& value) {
  
  search_by_index_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:tokenpb.RevokeTokensRequest.search_by_index)
}
inline void RevokeTokensRequest::set_search_by_index(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  search_by_index_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:tokenpb.RevokeTokensRequest.search_by_index)
}
inline void RevokeTokensRequest::set_search_by_index(const char* value,
    size_t size) {
  
  search_by_index_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:tokenpb.RevokeTokensRequest.search_by_index)
}
inline std::string* RevokeTokensRequest::_internal_mutable_search_by_index() {
  
  return search_by_index_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* RevokeTokensRequest::release_search_by_index() {
  // @@protoc_insertion_point(field_release:tokenpb.RevokeTokensRequest.search_by_index)
  return search_by_index_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RevokeTokensRequest::set_allocated_search_by_index(std::string* search_by_index) {
  if (search_by_index != nullptr) {
    
  } else {
    
  }
  search_by_index_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), search_by_index,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:tokenpb.RevokeTokensRequest.search_by_index)
}
inline std::string* RevokeTokensRequest::unsafe_arena_release_search_by_index() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tokenpb.RevokeTokensRequest.search_by_index)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return search_by_index_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void RevokeTokensRequest::unsafe_arena_set_allocated_search_by_index(
    std::string* search_by_index) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (search_by_index != nullptr) {
    
  } else {
    
  }
  search_by_index_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      search_by_index, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tokenpb.RevokeTokensRequest.search_by_index)
}

// string key = 2;
inline void RevokeTokensRequest::clear_key() {
  key_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& RevokeTokensRequest::key() const {
  // @@protoc_insertion_point(field_get:tokenpb.RevokeTokensRequest.key)
  return _internal_key();
}
inline void RevokeTokensRequest::set_key(const std::string& value) {
  _internal_set_key(value);
  // @@protoc_insertion_point(field_set:tokenpb.RevokeTokensRequest.key)
}
inline std::string* RevokeTokensRequest::mutable_key() {
  // @@protoc_insertion_point(field_mutable:tokenpb.RevokeTokensRequest.key)
  return _internal_mutable_key();
}
inline const std::string& RevokeTokensRequest::_internal_key() const {
  return key_.Get();
}
inline void RevokeTokensRequest::_internal_set_key(const std::string& value) {
  
  key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void RevokeTokensRequest::set_key(std::string&& value) {
  
  key_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:tokenpb.RevokeTokensRequest.key)
}
inline void RevokeTokensRequest::set_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:tokenpb.RevokeTokensRequest.key)
}
inline void RevokeTokensRequest::set_key(const char* value,
    size_t size) {
  
  key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:tokenpb.RevokeTokensRequest.key)
}
inline std::string* RevokeTokensRequest::_internal_mutable_key() {
  
  return key_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* RevokeTokensRequest::release_key() {
  // @@protoc_insertion_point(field_release:tokenpb.RevokeTokensRequest.key)
  return key_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RevokeTokensRequest::set_allocated_key(std::string* key) {
  if (key != nullptr) {
    
  } else {
    
  }
  key_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), key,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:tokenpb.RevokeTokensRequest.key)
}
inline std::string* RevokeTokensRequest::unsafe_arena_release_key() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tokenpb.RevokeTokensRequest.key)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return key_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void RevokeTokensRequest::unsafe_arena_set_allocated_key(
    std::string* key) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (key != nullptr) {
    
  } else {
    
  }
  key_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      key, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tokenpb.RevokeTokensRequest.key)
}

// -------------------------------------------------------------------

// RevokeTokensResponse

// uint32 tokens_revoked = 1;
inline void RevokeTokensResponse::clear_tokens_revoked() {
  tokens_revoked_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RevokeTokensResponse::_internal_tokens_revoked() const {
  return tokens_revoked_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RevokeTokensResponse::tokens_revoked() const {
  // @@protoc_insertion_point(field_get:tokenpb.RevokeTokensResponse.tokens_revoked)
  return _internal_tokens_revoked();
}
inline void RevokeTokensResponse::_internal_set_tokens_revoked(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  tokens_revoked_ = value;
}
inline void RevokeTokensResponse::set_tokens_revoked(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_tokens_revoked(value);
  // @@protoc_insertion_point(field_set:tokenpb.RevokeTokensResponse.tokens_revoked)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace tokenpb

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_token_2eproto
