// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: chipperpb.proto

#include "chipperpb.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_chipperpb_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_IntentResult_chipperpb_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_chipperpb_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_IntentResult_ParametersEntry_DoNotUse_chipperpb_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_chipperpb_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_KnowledgeGraphResponse_chipperpb_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_chipperpb_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SpeechResult_chipperpb_2eproto;
namespace chippergrpc2 {
class TextRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TextRequest> _instance;
} _TextRequest_default_instance_;
class StreamingIntentRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<StreamingIntentRequest> _instance;
} _StreamingIntentRequest_default_instance_;
class StreamingKnowledgeGraphRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<StreamingKnowledgeGraphRequest> _instance;
} _StreamingKnowledgeGraphRequest_default_instance_;
class StreamingConnectionCheckRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<StreamingConnectionCheckRequest> _instance;
} _StreamingConnectionCheckRequest_default_instance_;
class IntentResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<IntentResponse> _instance;
} _IntentResponse_default_instance_;
class SpeechResultDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SpeechResult> _instance;
} _SpeechResult_default_instance_;
class IntentResult_ParametersEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<IntentResult_ParametersEntry_DoNotUse> _instance;
} _IntentResult_ParametersEntry_DoNotUse_default_instance_;
class IntentResultDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<IntentResult> _instance;
} _IntentResult_default_instance_;
class KnowledgeGraphResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<KnowledgeGraphResponse> _instance;
} _KnowledgeGraphResponse_default_instance_;
class ConnectionCheckResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ConnectionCheckResponse> _instance;
} _ConnectionCheckResponse_default_instance_;
class WeatherLocationDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<WeatherLocation> _instance;
} _WeatherLocation_default_instance_;
}  // namespace chippergrpc2
static void InitDefaultsscc_info_ConnectionCheckResponse_chipperpb_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::chippergrpc2::_ConnectionCheckResponse_default_instance_;
    new (ptr) ::chippergrpc2::ConnectionCheckResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::chippergrpc2::ConnectionCheckResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ConnectionCheckResponse_chipperpb_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ConnectionCheckResponse_chipperpb_2eproto}, {}};

static void InitDefaultsscc_info_IntentResponse_chipperpb_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::chippergrpc2::_IntentResponse_default_instance_;
    new (ptr) ::chippergrpc2::IntentResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::chippergrpc2::IntentResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_IntentResponse_chipperpb_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_IntentResponse_chipperpb_2eproto}, {
      &scc_info_IntentResult_chipperpb_2eproto.base,
      &scc_info_SpeechResult_chipperpb_2eproto.base,}};

static void InitDefaultsscc_info_IntentResult_chipperpb_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::chippergrpc2::_IntentResult_default_instance_;
    new (ptr) ::chippergrpc2::IntentResult();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::chippergrpc2::IntentResult::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_IntentResult_chipperpb_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_IntentResult_chipperpb_2eproto}, {
      &scc_info_IntentResult_ParametersEntry_DoNotUse_chipperpb_2eproto.base,
      &scc_info_KnowledgeGraphResponse_chipperpb_2eproto.base,}};

static void InitDefaultsscc_info_IntentResult_ParametersEntry_DoNotUse_chipperpb_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::chippergrpc2::_IntentResult_ParametersEntry_DoNotUse_default_instance_;
    new (ptr) ::chippergrpc2::IntentResult_ParametersEntry_DoNotUse();
  }
  ::chippergrpc2::IntentResult_ParametersEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_IntentResult_ParametersEntry_DoNotUse_chipperpb_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_IntentResult_ParametersEntry_DoNotUse_chipperpb_2eproto}, {}};

static void InitDefaultsscc_info_KnowledgeGraphResponse_chipperpb_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::chippergrpc2::_KnowledgeGraphResponse_default_instance_;
    new (ptr) ::chippergrpc2::KnowledgeGraphResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::chippergrpc2::KnowledgeGraphResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_KnowledgeGraphResponse_chipperpb_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_KnowledgeGraphResponse_chipperpb_2eproto}, {}};

static void InitDefaultsscc_info_SpeechResult_chipperpb_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::chippergrpc2::_SpeechResult_default_instance_;
    new (ptr) ::chippergrpc2::SpeechResult();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::chippergrpc2::SpeechResult::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SpeechResult_chipperpb_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SpeechResult_chipperpb_2eproto}, {}};

static void InitDefaultsscc_info_StreamingConnectionCheckRequest_chipperpb_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::chippergrpc2::_StreamingConnectionCheckRequest_default_instance_;
    new (ptr) ::chippergrpc2::StreamingConnectionCheckRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::chippergrpc2::StreamingConnectionCheckRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_StreamingConnectionCheckRequest_chipperpb_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_StreamingConnectionCheckRequest_chipperpb_2eproto}, {}};

static void InitDefaultsscc_info_StreamingIntentRequest_chipperpb_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::chippergrpc2::_StreamingIntentRequest_default_instance_;
    new (ptr) ::chippergrpc2::StreamingIntentRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::chippergrpc2::StreamingIntentRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_StreamingIntentRequest_chipperpb_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_StreamingIntentRequest_chipperpb_2eproto}, {}};

static void InitDefaultsscc_info_StreamingKnowledgeGraphRequest_chipperpb_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::chippergrpc2::_StreamingKnowledgeGraphRequest_default_instance_;
    new (ptr) ::chippergrpc2::StreamingKnowledgeGraphRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::chippergrpc2::StreamingKnowledgeGraphRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_StreamingKnowledgeGraphRequest_chipperpb_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_StreamingKnowledgeGraphRequest_chipperpb_2eproto}, {}};

static void InitDefaultsscc_info_TextRequest_chipperpb_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::chippergrpc2::_TextRequest_default_instance_;
    new (ptr) ::chippergrpc2::TextRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::chippergrpc2::TextRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TextRequest_chipperpb_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TextRequest_chipperpb_2eproto}, {}};

static void InitDefaultsscc_info_WeatherLocation_chipperpb_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::chippergrpc2::_WeatherLocation_default_instance_;
    new (ptr) ::chippergrpc2::WeatherLocation();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::chippergrpc2::WeatherLocation::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_WeatherLocation_chipperpb_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_WeatherLocation_chipperpb_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_chipperpb_2eproto[11];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_chipperpb_2eproto[4];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_chipperpb_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_chipperpb_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::chippergrpc2::TextRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::chippergrpc2::TextRequest, session_),
  PROTOBUF_FIELD_OFFSET(::chippergrpc2::TextRequest, device_id_),
  PROTOBUF_FIELD_OFFSET(::chippergrpc2::TextRequest, text_input_),
  PROTOBUF_FIELD_OFFSET(::chippergrpc2::TextRequest, language_code_),
  PROTOBUF_FIELD_OFFSET(::chippergrpc2::TextRequest, intent_service_),
  PROTOBUF_FIELD_OFFSET(::chippergrpc2::TextRequest, firmware_version_),
  PROTOBUF_FIELD_OFFSET(::chippergrpc2::TextRequest, mode_),
  PROTOBUF_FIELD_OFFSET(::chippergrpc2::TextRequest, skip_das_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::chippergrpc2::StreamingIntentRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::chippergrpc2::StreamingIntentRequest, session_),
  PROTOBUF_FIELD_OFFSET(::chippergrpc2::StreamingIntentRequest, device_id_),
  PROTOBUF_FIELD_OFFSET(::chippergrpc2::StreamingIntentRequest, input_audio_),
  PROTOBUF_FIELD_OFFSET(::chippergrpc2::StreamingIntentRequest, language_code_),
  PROTOBUF_FIELD_OFFSET(::chippergrpc2::StreamingIntentRequest, speech_only_),
  PROTOBUF_FIELD_OFFSET(::chippergrpc2::StreamingIntentRequest, firmware_version_),
  PROTOBUF_FIELD_OFFSET(::chippergrpc2::StreamingIntentRequest, mode_),
  PROTOBUF_FIELD_OFFSET(::chippergrpc2::StreamingIntentRequest, boot_id_),
  PROTOBUF_FIELD_OFFSET(::chippergrpc2::StreamingIntentRequest, skip_das_),
  PROTOBUF_FIELD_OFFSET(::chippergrpc2::StreamingIntentRequest, audio_encoding_),
  PROTOBUF_FIELD_OFFSET(::chippergrpc2::StreamingIntentRequest, single_utterance_),
  PROTOBUF_FIELD_OFFSET(::chippergrpc2::StreamingIntentRequest, intent_service_),
  PROTOBUF_FIELD_OFFSET(::chippergrpc2::StreamingIntentRequest, app_key_),
  PROTOBUF_FIELD_OFFSET(::chippergrpc2::StreamingIntentRequest, save_audio_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::chippergrpc2::StreamingKnowledgeGraphRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::chippergrpc2::StreamingKnowledgeGraphRequest, session_),
  PROTOBUF_FIELD_OFFSET(::chippergrpc2::StreamingKnowledgeGraphRequest, device_id_),
  PROTOBUF_FIELD_OFFSET(::chippergrpc2::StreamingKnowledgeGraphRequest, input_audio_),
  PROTOBUF_FIELD_OFFSET(::chippergrpc2::StreamingKnowledgeGraphRequest, language_code_),
  PROTOBUF_FIELD_OFFSET(::chippergrpc2::StreamingKnowledgeGraphRequest, firmware_version_),
  PROTOBUF_FIELD_OFFSET(::chippergrpc2::StreamingKnowledgeGraphRequest, audio_encoding_),
  PROTOBUF_FIELD_OFFSET(::chippergrpc2::StreamingKnowledgeGraphRequest, app_key_),
  PROTOBUF_FIELD_OFFSET(::chippergrpc2::StreamingKnowledgeGraphRequest, save_audio_),
  PROTOBUF_FIELD_OFFSET(::chippergrpc2::StreamingKnowledgeGraphRequest, boot_id_),
  PROTOBUF_FIELD_OFFSET(::chippergrpc2::StreamingKnowledgeGraphRequest, skip_das_),
  PROTOBUF_FIELD_OFFSET(::chippergrpc2::StreamingKnowledgeGraphRequest, timezone_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::chippergrpc2::StreamingConnectionCheckRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::chippergrpc2::StreamingConnectionCheckRequest, session_),
  PROTOBUF_FIELD_OFFSET(::chippergrpc2::StreamingConnectionCheckRequest, device_id_),
  PROTOBUF_FIELD_OFFSET(::chippergrpc2::StreamingConnectionCheckRequest, input_audio_),
  PROTOBUF_FIELD_OFFSET(::chippergrpc2::StreamingConnectionCheckRequest, firmware_version_),
  PROTOBUF_FIELD_OFFSET(::chippergrpc2::StreamingConnectionCheckRequest, app_key_),
  PROTOBUF_FIELD_OFFSET(::chippergrpc2::StreamingConnectionCheckRequest, total_audio_ms_),
  PROTOBUF_FIELD_OFFSET(::chippergrpc2::StreamingConnectionCheckRequest, audio_per_request_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::chippergrpc2::IntentResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::chippergrpc2::IntentResponse, session_),
  PROTOBUF_FIELD_OFFSET(::chippergrpc2::IntentResponse, device_id_),
  PROTOBUF_FIELD_OFFSET(::chippergrpc2::IntentResponse, is_final_),
  PROTOBUF_FIELD_OFFSET(::chippergrpc2::IntentResponse, intent_result_),
  PROTOBUF_FIELD_OFFSET(::chippergrpc2::IntentResponse, speech_result_),
  PROTOBUF_FIELD_OFFSET(::chippergrpc2::IntentResponse, mode_),
  PROTOBUF_FIELD_OFFSET(::chippergrpc2::IntentResponse, audio_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::chippergrpc2::SpeechResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::chippergrpc2::SpeechResult, transcript_),
  PROTOBUF_FIELD_OFFSET(::chippergrpc2::SpeechResult, is_final_),
  PROTOBUF_FIELD_OFFSET(::chippergrpc2::IntentResult_ParametersEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::chippergrpc2::IntentResult_ParametersEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::chippergrpc2::IntentResult_ParametersEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::chippergrpc2::IntentResult_ParametersEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::chippergrpc2::IntentResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::chippergrpc2::IntentResult, query_text_),
  PROTOBUF_FIELD_OFFSET(::chippergrpc2::IntentResult, action_),
  PROTOBUF_FIELD_OFFSET(::chippergrpc2::IntentResult, intent_confidence_),
  PROTOBUF_FIELD_OFFSET(::chippergrpc2::IntentResult, speech_confidence_),
  PROTOBUF_FIELD_OFFSET(::chippergrpc2::IntentResult, parameters_),
  PROTOBUF_FIELD_OFFSET(::chippergrpc2::IntentResult, all_parameters_present_),
  PROTOBUF_FIELD_OFFSET(::chippergrpc2::IntentResult, has_context_),
  PROTOBUF_FIELD_OFFSET(::chippergrpc2::IntentResult, service_),
  PROTOBUF_FIELD_OFFSET(::chippergrpc2::IntentResult, kgresponse_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::chippergrpc2::KnowledgeGraphResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::chippergrpc2::KnowledgeGraphResponse, session_),
  PROTOBUF_FIELD_OFFSET(::chippergrpc2::KnowledgeGraphResponse, device_id_),
  PROTOBUF_FIELD_OFFSET(::chippergrpc2::KnowledgeGraphResponse, query_text_),
  PROTOBUF_FIELD_OFFSET(::chippergrpc2::KnowledgeGraphResponse, spoken_text_),
  PROTOBUF_FIELD_OFFSET(::chippergrpc2::KnowledgeGraphResponse, command_type_),
  PROTOBUF_FIELD_OFFSET(::chippergrpc2::KnowledgeGraphResponse, domains_used_),
  PROTOBUF_FIELD_OFFSET(::chippergrpc2::KnowledgeGraphResponse, audio_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::chippergrpc2::ConnectionCheckResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::chippergrpc2::ConnectionCheckResponse, status_),
  PROTOBUF_FIELD_OFFSET(::chippergrpc2::ConnectionCheckResponse, frames_received_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::chippergrpc2::WeatherLocation, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::chippergrpc2::WeatherLocation, city_),
  PROTOBUF_FIELD_OFFSET(::chippergrpc2::WeatherLocation, state_),
  PROTOBUF_FIELD_OFFSET(::chippergrpc2::WeatherLocation, country_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::chippergrpc2::TextRequest)},
  { 13, -1, sizeof(::chippergrpc2::StreamingIntentRequest)},
  { 32, -1, sizeof(::chippergrpc2::StreamingKnowledgeGraphRequest)},
  { 48, -1, sizeof(::chippergrpc2::StreamingConnectionCheckRequest)},
  { 60, -1, sizeof(::chippergrpc2::IntentResponse)},
  { 72, -1, sizeof(::chippergrpc2::SpeechResult)},
  { 79, 86, sizeof(::chippergrpc2::IntentResult_ParametersEntry_DoNotUse)},
  { 88, -1, sizeof(::chippergrpc2::IntentResult)},
  { 102, -1, sizeof(::chippergrpc2::KnowledgeGraphResponse)},
  { 114, -1, sizeof(::chippergrpc2::ConnectionCheckResponse)},
  { 121, -1, sizeof(::chippergrpc2::WeatherLocation)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::chippergrpc2::_TextRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::chippergrpc2::_StreamingIntentRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::chippergrpc2::_StreamingKnowledgeGraphRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::chippergrpc2::_StreamingConnectionCheckRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::chippergrpc2::_IntentResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::chippergrpc2::_SpeechResult_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::chippergrpc2::_IntentResult_ParametersEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::chippergrpc2::_IntentResult_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::chippergrpc2::_KnowledgeGraphResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::chippergrpc2::_ConnectionCheckResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::chippergrpc2::_WeatherLocation_default_instance_),
};

const char descriptor_table_protodef_chipperpb_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\017chipperpb.proto\022\014chippergrpc2\"\200\002\n\013Text"
  "Request\022\017\n\007session\030\001 \001(\t\022\021\n\tdevice_id\030\002 "
  "\001(\t\022\022\n\ntext_input\030\003 \001(\t\0221\n\rlanguage_code"
  "\030\004 \001(\0162\032.chippergrpc2.LanguageCode\0223\n\016in"
  "tent_service\030\005 \001(\0162\033.chippergrpc2.Intent"
  "Service\022\030\n\020firmware_version\030\006 \001(\t\022%\n\004mod"
  "e\030\007 \001(\0162\027.chippergrpc2.RobotMode\022\020\n\010skip"
  "_das\030\010 \001(\010\"\246\003\n\026StreamingIntentRequest\022\017\n"
  "\007session\030\001 \001(\t\022\021\n\tdevice_id\030\002 \001(\t\022\023\n\013inp"
  "ut_audio\030\003 \001(\014\0221\n\rlanguage_code\030\004 \001(\0162\032."
  "chippergrpc2.LanguageCode\022\023\n\013speech_only"
  "\030\005 \001(\010\022\030\n\020firmware_version\030\006 \001(\t\022%\n\004mode"
  "\030\007 \001(\0162\027.chippergrpc2.RobotMode\022\017\n\007boot_"
  "id\030\010 \001(\t\022\020\n\010skip_das\030\t \001(\010\0223\n\016audio_enco"
  "ding\030\r \001(\0162\033.chippergrpc2.AudioEncoding\022"
  "\030\n\020single_utterance\030\016 \001(\010\0223\n\016intent_serv"
  "ice\030\017 \001(\0162\033.chippergrpc2.IntentService\022\017"
  "\n\007app_key\030\020 \001(\t\022\022\n\nsave_audio\030\021 \001(\010\"\265\002\n\036"
  "StreamingKnowledgeGraphRequest\022\017\n\007sessio"
  "n\030\001 \001(\t\022\021\n\tdevice_id\030\002 \001(\t\022\023\n\013input_audi"
  "o\030\003 \001(\014\0221\n\rlanguage_code\030\004 \001(\0162\032.chipper"
  "grpc2.LanguageCode\022\030\n\020firmware_version\030\005"
  " \001(\t\0223\n\016audio_encoding\030\006 \001(\0162\033.chippergr"
  "pc2.AudioEncoding\022\017\n\007app_key\030\007 \001(\t\022\022\n\nsa"
  "ve_audio\030\010 \001(\010\022\017\n\007boot_id\030\t \001(\t\022\020\n\010skip_"
  "das\030\n \001(\010\022\020\n\010timezone\030\013 \001(\t\"\270\001\n\037Streamin"
  "gConnectionCheckRequest\022\017\n\007session\030\001 \001(\t"
  "\022\021\n\tdevice_id\030\002 \001(\t\022\023\n\013input_audio\030\003 \001(\014"
  "\022\030\n\020firmware_version\030\004 \001(\t\022\017\n\007app_key\030\005 "
  "\001(\t\022\026\n\016total_audio_ms\030\006 \001(\r\022\031\n\021audio_per"
  "_request\030\007 \001(\r\"\345\001\n\016IntentResponse\022\017\n\007ses"
  "sion\030\001 \001(\t\022\021\n\tdevice_id\030\002 \001(\t\022\020\n\010is_fina"
  "l\030\003 \001(\010\0221\n\rintent_result\030\004 \001(\0132\032.chipper"
  "grpc2.IntentResult\0221\n\rspeech_result\030\005 \001("
  "\0132\032.chippergrpc2.SpeechResult\022%\n\004mode\030\006 "
  "\001(\0162\027.chippergrpc2.RobotMode\022\020\n\010audio_id"
  "\030\020 \001(\t\"4\n\014SpeechResult\022\022\n\ntranscript\030\001 \001"
  "(\t\022\020\n\010is_final\030\002 \001(\010\"\370\002\n\014IntentResult\022\022\n"
  "\nquery_text\030\001 \001(\t\022\016\n\006action\030\002 \001(\t\022\031\n\021int"
  "ent_confidence\030\003 \001(\002\022\031\n\021speech_confidenc"
  "e\030\004 \001(\002\022>\n\nparameters\030\005 \003(\0132*.chippergrp"
  "c2.IntentResult.ParametersEntry\022\036\n\026all_p"
  "arameters_present\030\006 \001(\010\022\023\n\013has_context\030\007"
  " \001(\010\022,\n\007service\030\010 \001(\0162\033.chippergrpc2.Int"
  "entService\0228\n\nkgresponse\030\t \001(\0132$.chipper"
  "grpc2.KnowledgeGraphResponse\0321\n\017Paramete"
  "rsEntry\022\013\n\003key\030\001 \001(\t\022\r\n\005value\030\002 \001(\t:\0028\001\""
  "\243\001\n\026KnowledgeGraphResponse\022\017\n\007session\030\001 "
  "\001(\t\022\021\n\tdevice_id\030\002 \001(\t\022\022\n\nquery_text\030\003 \001"
  "(\t\022\023\n\013spoken_text\030\004 \001(\t\022\024\n\014command_type\030"
  "\005 \001(\t\022\024\n\014domains_used\030\006 \003(\t\022\020\n\010audio_id\030"
  "\007 \001(\t\"B\n\027ConnectionCheckResponse\022\016\n\006stat"
  "us\030\001 \001(\t\022\027\n\017frames_received\030\002 \001(\r\"\?\n\017Wea"
  "therLocation\022\014\n\004city\030\001 \001(\t\022\r\n\005state\030\002 \001("
  "\t\022\017\n\007country\030\003 \001(\t*V\n\014LanguageCode\022\016\n\nEN"
  "GLISH_US\020\000\022\016\n\nENGLISH_UK\020\001\022\016\n\nENGLISH_AU"
  "\020\002\022\n\n\006GERMAN\020\003\022\n\n\006FRENCH\020\004*R\n\rIntentServ"
  "ice\022\013\n\007DEFAULT\020\000\022\016\n\nDIALOGFLOW\020\001\022\r\n\tBING"
  "_LUIS\020\002\022\007\n\003LEX\020\003\022\014\n\010HOUNDIFY\020\004*-\n\rAudioE"
  "ncoding\022\016\n\nLINEAR_PCM\020\000\022\014\n\010OGG_OPUS\020\001*(\n"
  "\tRobotMode\022\021\n\rVOICE_COMMAND\020\000\022\010\n\004GAME\020\0012"
  "\232\003\n\013ChipperGrpc\022G\n\nTextIntent\022\031.chipperg"
  "rpc2.TextRequest\032\034.chippergrpc2.IntentRe"
  "sponse\"\000\022Y\n\017StreamingIntent\022$.chippergrp"
  "c2.StreamingIntentRequest\032\034.chippergrpc2"
  ".IntentResponse(\0010\001\022q\n\027StreamingKnowledg"
  "eGraph\022,.chippergrpc2.StreamingKnowledge"
  "GraphRequest\032$.chippergrpc2.KnowledgeGra"
  "phResponse(\0010\001\022t\n\030StreamingConnectionChe"
  "ck\022-.chippergrpc2.StreamingConnectionChe"
  "ckRequest\032%.chippergrpc2.ConnectionCheck"
  "Response(\0010\001B3Z1github.com/digital-dream"
  "-labs/api/go/chippergrpc2b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_chipperpb_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_chipperpb_2eproto_sccs[11] = {
  &scc_info_ConnectionCheckResponse_chipperpb_2eproto.base,
  &scc_info_IntentResponse_chipperpb_2eproto.base,
  &scc_info_IntentResult_chipperpb_2eproto.base,
  &scc_info_IntentResult_ParametersEntry_DoNotUse_chipperpb_2eproto.base,
  &scc_info_KnowledgeGraphResponse_chipperpb_2eproto.base,
  &scc_info_SpeechResult_chipperpb_2eproto.base,
  &scc_info_StreamingConnectionCheckRequest_chipperpb_2eproto.base,
  &scc_info_StreamingIntentRequest_chipperpb_2eproto.base,
  &scc_info_StreamingKnowledgeGraphRequest_chipperpb_2eproto.base,
  &scc_info_TextRequest_chipperpb_2eproto.base,
  &scc_info_WeatherLocation_chipperpb_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_chipperpb_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_chipperpb_2eproto = {
  false, false, descriptor_table_protodef_chipperpb_2eproto, "chipperpb.proto", 2913,
  &descriptor_table_chipperpb_2eproto_once, descriptor_table_chipperpb_2eproto_sccs, descriptor_table_chipperpb_2eproto_deps, 11, 0,
  schemas, file_default_instances, TableStruct_chipperpb_2eproto::offsets,
  file_level_metadata_chipperpb_2eproto, 11, file_level_enum_descriptors_chipperpb_2eproto, file_level_service_descriptors_chipperpb_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_chipperpb_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_chipperpb_2eproto)), true);
namespace chippergrpc2 {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* LanguageCode_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_chipperpb_2eproto);
  return file_level_enum_descriptors_chipperpb_2eproto[0];
}
bool LanguageCode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* IntentService_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_chipperpb_2eproto);
  return file_level_enum_descriptors_chipperpb_2eproto[1];
}
bool IntentService_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* AudioEncoding_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_chipperpb_2eproto);
  return file_level_enum_descriptors_chipperpb_2eproto[2];
}
bool AudioEncoding_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* RobotMode_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_chipperpb_2eproto);
  return file_level_enum_descriptors_chipperpb_2eproto[3];
}
bool RobotMode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void TextRequest::InitAsDefaultInstance() {
}
class TextRequest::_Internal {
 public:
};

TextRequest::TextRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:chippergrpc2.TextRequest)
}
TextRequest::TextRequest(const TextRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  session_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_session().empty()) {
    session_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_session(),
      GetArena());
  }
  device_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_device_id().empty()) {
    device_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_device_id(),
      GetArena());
  }
  text_input_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_text_input().empty()) {
    text_input_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_text_input(),
      GetArena());
  }
  firmware_version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_firmware_version().empty()) {
    firmware_version_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_firmware_version(),
      GetArena());
  }
  ::memcpy(&language_code_, &from.language_code_,
    static_cast<size_t>(reinterpret_cast<char*>(&skip_das_) -
    reinterpret_cast<char*>(&language_code_)) + sizeof(skip_das_));
  // @@protoc_insertion_point(copy_constructor:chippergrpc2.TextRequest)
}

void TextRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TextRequest_chipperpb_2eproto.base);
  session_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  device_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  text_input_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  firmware_version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&language_code_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&skip_das_) -
      reinterpret_cast<char*>(&language_code_)) + sizeof(skip_das_));
}

TextRequest::~TextRequest() {
  // @@protoc_insertion_point(destructor:chippergrpc2.TextRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TextRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  session_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  device_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  text_input_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  firmware_version_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void TextRequest::ArenaDtor(void* object) {
  TextRequest* _this = reinterpret_cast< TextRequest* >(object);
  (void)_this;
}
void TextRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TextRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TextRequest& TextRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TextRequest_chipperpb_2eproto.base);
  return *internal_default_instance();
}


void TextRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:chippergrpc2.TextRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  session_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  device_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  text_input_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  firmware_version_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&language_code_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&skip_das_) -
      reinterpret_cast<char*>(&language_code_)) + sizeof(skip_das_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TextRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string session = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_session();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "chippergrpc2.TextRequest.session"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string device_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_device_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "chippergrpc2.TextRequest.device_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string text_input = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_text_input();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "chippergrpc2.TextRequest.text_input"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .chippergrpc2.LanguageCode language_code = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_language_code(static_cast<::chippergrpc2::LanguageCode>(val));
        } else goto handle_unusual;
        continue;
      // .chippergrpc2.IntentService intent_service = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_intent_service(static_cast<::chippergrpc2::IntentService>(val));
        } else goto handle_unusual;
        continue;
      // string firmware_version = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_firmware_version();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "chippergrpc2.TextRequest.firmware_version"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .chippergrpc2.RobotMode mode = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_mode(static_cast<::chippergrpc2::RobotMode>(val));
        } else goto handle_unusual;
        continue;
      // bool skip_das = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          skip_das_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TextRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:chippergrpc2.TextRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string session = 1;
  if (this->session().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_session().data(), static_cast<int>(this->_internal_session().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "chippergrpc2.TextRequest.session");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_session(), target);
  }

  // string device_id = 2;
  if (this->device_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_device_id().data(), static_cast<int>(this->_internal_device_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "chippergrpc2.TextRequest.device_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_device_id(), target);
  }

  // string text_input = 3;
  if (this->text_input().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_text_input().data(), static_cast<int>(this->_internal_text_input().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "chippergrpc2.TextRequest.text_input");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_text_input(), target);
  }

  // .chippergrpc2.LanguageCode language_code = 4;
  if (this->language_code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->_internal_language_code(), target);
  }

  // .chippergrpc2.IntentService intent_service = 5;
  if (this->intent_service() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      5, this->_internal_intent_service(), target);
  }

  // string firmware_version = 6;
  if (this->firmware_version().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_firmware_version().data(), static_cast<int>(this->_internal_firmware_version().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "chippergrpc2.TextRequest.firmware_version");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_firmware_version(), target);
  }

  // .chippergrpc2.RobotMode mode = 7;
  if (this->mode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      7, this->_internal_mode(), target);
  }

  // bool skip_das = 8;
  if (this->skip_das() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(8, this->_internal_skip_das(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:chippergrpc2.TextRequest)
  return target;
}

size_t TextRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:chippergrpc2.TextRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string session = 1;
  if (this->session().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_session());
  }

  // string device_id = 2;
  if (this->device_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_device_id());
  }

  // string text_input = 3;
  if (this->text_input().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_text_input());
  }

  // string firmware_version = 6;
  if (this->firmware_version().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_firmware_version());
  }

  // .chippergrpc2.LanguageCode language_code = 4;
  if (this->language_code() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_language_code());
  }

  // .chippergrpc2.IntentService intent_service = 5;
  if (this->intent_service() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_intent_service());
  }

  // .chippergrpc2.RobotMode mode = 7;
  if (this->mode() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_mode());
  }

  // bool skip_das = 8;
  if (this->skip_das() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TextRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:chippergrpc2.TextRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const TextRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TextRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:chippergrpc2.TextRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:chippergrpc2.TextRequest)
    MergeFrom(*source);
  }
}

void TextRequest::MergeFrom(const TextRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:chippergrpc2.TextRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.session().size() > 0) {
    _internal_set_session(from._internal_session());
  }
  if (from.device_id().size() > 0) {
    _internal_set_device_id(from._internal_device_id());
  }
  if (from.text_input().size() > 0) {
    _internal_set_text_input(from._internal_text_input());
  }
  if (from.firmware_version().size() > 0) {
    _internal_set_firmware_version(from._internal_firmware_version());
  }
  if (from.language_code() != 0) {
    _internal_set_language_code(from._internal_language_code());
  }
  if (from.intent_service() != 0) {
    _internal_set_intent_service(from._internal_intent_service());
  }
  if (from.mode() != 0) {
    _internal_set_mode(from._internal_mode());
  }
  if (from.skip_das() != 0) {
    _internal_set_skip_das(from._internal_skip_das());
  }
}

void TextRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:chippergrpc2.TextRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TextRequest::CopyFrom(const TextRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:chippergrpc2.TextRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TextRequest::IsInitialized() const {
  return true;
}

void TextRequest::InternalSwap(TextRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  session_.Swap(&other->session_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  device_id_.Swap(&other->device_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  text_input_.Swap(&other->text_input_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  firmware_version_.Swap(&other->firmware_version_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TextRequest, skip_das_)
      + sizeof(TextRequest::skip_das_)
      - PROTOBUF_FIELD_OFFSET(TextRequest, language_code_)>(
          reinterpret_cast<char*>(&language_code_),
          reinterpret_cast<char*>(&other->language_code_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TextRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void StreamingIntentRequest::InitAsDefaultInstance() {
}
class StreamingIntentRequest::_Internal {
 public:
};

StreamingIntentRequest::StreamingIntentRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:chippergrpc2.StreamingIntentRequest)
}
StreamingIntentRequest::StreamingIntentRequest(const StreamingIntentRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  session_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_session().empty()) {
    session_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_session(),
      GetArena());
  }
  device_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_device_id().empty()) {
    device_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_device_id(),
      GetArena());
  }
  input_audio_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_input_audio().empty()) {
    input_audio_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_input_audio(),
      GetArena());
  }
  firmware_version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_firmware_version().empty()) {
    firmware_version_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_firmware_version(),
      GetArena());
  }
  boot_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_boot_id().empty()) {
    boot_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_boot_id(),
      GetArena());
  }
  app_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_app_key().empty()) {
    app_key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_app_key(),
      GetArena());
  }
  ::memcpy(&language_code_, &from.language_code_,
    static_cast<size_t>(reinterpret_cast<char*>(&intent_service_) -
    reinterpret_cast<char*>(&language_code_)) + sizeof(intent_service_));
  // @@protoc_insertion_point(copy_constructor:chippergrpc2.StreamingIntentRequest)
}

void StreamingIntentRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_StreamingIntentRequest_chipperpb_2eproto.base);
  session_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  device_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  input_audio_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  firmware_version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  boot_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  app_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&language_code_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&intent_service_) -
      reinterpret_cast<char*>(&language_code_)) + sizeof(intent_service_));
}

StreamingIntentRequest::~StreamingIntentRequest() {
  // @@protoc_insertion_point(destructor:chippergrpc2.StreamingIntentRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void StreamingIntentRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  session_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  device_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  input_audio_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  firmware_version_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  boot_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  app_key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void StreamingIntentRequest::ArenaDtor(void* object) {
  StreamingIntentRequest* _this = reinterpret_cast< StreamingIntentRequest* >(object);
  (void)_this;
}
void StreamingIntentRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void StreamingIntentRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const StreamingIntentRequest& StreamingIntentRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_StreamingIntentRequest_chipperpb_2eproto.base);
  return *internal_default_instance();
}


void StreamingIntentRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:chippergrpc2.StreamingIntentRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  session_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  device_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  input_audio_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  firmware_version_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  boot_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  app_key_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&language_code_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&intent_service_) -
      reinterpret_cast<char*>(&language_code_)) + sizeof(intent_service_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StreamingIntentRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string session = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_session();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "chippergrpc2.StreamingIntentRequest.session"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string device_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_device_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "chippergrpc2.StreamingIntentRequest.device_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes input_audio = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_input_audio();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .chippergrpc2.LanguageCode language_code = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_language_code(static_cast<::chippergrpc2::LanguageCode>(val));
        } else goto handle_unusual;
        continue;
      // bool speech_only = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          speech_only_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string firmware_version = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_firmware_version();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "chippergrpc2.StreamingIntentRequest.firmware_version"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .chippergrpc2.RobotMode mode = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_mode(static_cast<::chippergrpc2::RobotMode>(val));
        } else goto handle_unusual;
        continue;
      // string boot_id = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_boot_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "chippergrpc2.StreamingIntentRequest.boot_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool skip_das = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          skip_das_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .chippergrpc2.AudioEncoding audio_encoding = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_audio_encoding(static_cast<::chippergrpc2::AudioEncoding>(val));
        } else goto handle_unusual;
        continue;
      // bool single_utterance = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          single_utterance_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .chippergrpc2.IntentService intent_service = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_intent_service(static_cast<::chippergrpc2::IntentService>(val));
        } else goto handle_unusual;
        continue;
      // string app_key = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          auto str = _internal_mutable_app_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "chippergrpc2.StreamingIntentRequest.app_key"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool save_audio = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 136)) {
          save_audio_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* StreamingIntentRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:chippergrpc2.StreamingIntentRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string session = 1;
  if (this->session().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_session().data(), static_cast<int>(this->_internal_session().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "chippergrpc2.StreamingIntentRequest.session");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_session(), target);
  }

  // string device_id = 2;
  if (this->device_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_device_id().data(), static_cast<int>(this->_internal_device_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "chippergrpc2.StreamingIntentRequest.device_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_device_id(), target);
  }

  // bytes input_audio = 3;
  if (this->input_audio().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_input_audio(), target);
  }

  // .chippergrpc2.LanguageCode language_code = 4;
  if (this->language_code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->_internal_language_code(), target);
  }

  // bool speech_only = 5;
  if (this->speech_only() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_speech_only(), target);
  }

  // string firmware_version = 6;
  if (this->firmware_version().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_firmware_version().data(), static_cast<int>(this->_internal_firmware_version().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "chippergrpc2.StreamingIntentRequest.firmware_version");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_firmware_version(), target);
  }

  // .chippergrpc2.RobotMode mode = 7;
  if (this->mode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      7, this->_internal_mode(), target);
  }

  // string boot_id = 8;
  if (this->boot_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_boot_id().data(), static_cast<int>(this->_internal_boot_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "chippergrpc2.StreamingIntentRequest.boot_id");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_boot_id(), target);
  }

  // bool skip_das = 9;
  if (this->skip_das() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(9, this->_internal_skip_das(), target);
  }

  // .chippergrpc2.AudioEncoding audio_encoding = 13;
  if (this->audio_encoding() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      13, this->_internal_audio_encoding(), target);
  }

  // bool single_utterance = 14;
  if (this->single_utterance() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(14, this->_internal_single_utterance(), target);
  }

  // .chippergrpc2.IntentService intent_service = 15;
  if (this->intent_service() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      15, this->_internal_intent_service(), target);
  }

  // string app_key = 16;
  if (this->app_key().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_app_key().data(), static_cast<int>(this->_internal_app_key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "chippergrpc2.StreamingIntentRequest.app_key");
    target = stream->WriteStringMaybeAliased(
        16, this->_internal_app_key(), target);
  }

  // bool save_audio = 17;
  if (this->save_audio() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(17, this->_internal_save_audio(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:chippergrpc2.StreamingIntentRequest)
  return target;
}

size_t StreamingIntentRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:chippergrpc2.StreamingIntentRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string session = 1;
  if (this->session().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_session());
  }

  // string device_id = 2;
  if (this->device_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_device_id());
  }

  // bytes input_audio = 3;
  if (this->input_audio().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_input_audio());
  }

  // string firmware_version = 6;
  if (this->firmware_version().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_firmware_version());
  }

  // string boot_id = 8;
  if (this->boot_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_boot_id());
  }

  // string app_key = 16;
  if (this->app_key().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_app_key());
  }

  // .chippergrpc2.LanguageCode language_code = 4;
  if (this->language_code() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_language_code());
  }

  // .chippergrpc2.RobotMode mode = 7;
  if (this->mode() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_mode());
  }

  // bool speech_only = 5;
  if (this->speech_only() != 0) {
    total_size += 1 + 1;
  }

  // bool skip_das = 9;
  if (this->skip_das() != 0) {
    total_size += 1 + 1;
  }

  // bool single_utterance = 14;
  if (this->single_utterance() != 0) {
    total_size += 1 + 1;
  }

  // bool save_audio = 17;
  if (this->save_audio() != 0) {
    total_size += 2 + 1;
  }

  // .chippergrpc2.AudioEncoding audio_encoding = 13;
  if (this->audio_encoding() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_audio_encoding());
  }

  // .chippergrpc2.IntentService intent_service = 15;
  if (this->intent_service() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_intent_service());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StreamingIntentRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:chippergrpc2.StreamingIntentRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const StreamingIntentRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<StreamingIntentRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:chippergrpc2.StreamingIntentRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:chippergrpc2.StreamingIntentRequest)
    MergeFrom(*source);
  }
}

void StreamingIntentRequest::MergeFrom(const StreamingIntentRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:chippergrpc2.StreamingIntentRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.session().size() > 0) {
    _internal_set_session(from._internal_session());
  }
  if (from.device_id().size() > 0) {
    _internal_set_device_id(from._internal_device_id());
  }
  if (from.input_audio().size() > 0) {
    _internal_set_input_audio(from._internal_input_audio());
  }
  if (from.firmware_version().size() > 0) {
    _internal_set_firmware_version(from._internal_firmware_version());
  }
  if (from.boot_id().size() > 0) {
    _internal_set_boot_id(from._internal_boot_id());
  }
  if (from.app_key().size() > 0) {
    _internal_set_app_key(from._internal_app_key());
  }
  if (from.language_code() != 0) {
    _internal_set_language_code(from._internal_language_code());
  }
  if (from.mode() != 0) {
    _internal_set_mode(from._internal_mode());
  }
  if (from.speech_only() != 0) {
    _internal_set_speech_only(from._internal_speech_only());
  }
  if (from.skip_das() != 0) {
    _internal_set_skip_das(from._internal_skip_das());
  }
  if (from.single_utterance() != 0) {
    _internal_set_single_utterance(from._internal_single_utterance());
  }
  if (from.save_audio() != 0) {
    _internal_set_save_audio(from._internal_save_audio());
  }
  if (from.audio_encoding() != 0) {
    _internal_set_audio_encoding(from._internal_audio_encoding());
  }
  if (from.intent_service() != 0) {
    _internal_set_intent_service(from._internal_intent_service());
  }
}

void StreamingIntentRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:chippergrpc2.StreamingIntentRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StreamingIntentRequest::CopyFrom(const StreamingIntentRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:chippergrpc2.StreamingIntentRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StreamingIntentRequest::IsInitialized() const {
  return true;
}

void StreamingIntentRequest::InternalSwap(StreamingIntentRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  session_.Swap(&other->session_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  device_id_.Swap(&other->device_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  input_audio_.Swap(&other->input_audio_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  firmware_version_.Swap(&other->firmware_version_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  boot_id_.Swap(&other->boot_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  app_key_.Swap(&other->app_key_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(StreamingIntentRequest, intent_service_)
      + sizeof(StreamingIntentRequest::intent_service_)
      - PROTOBUF_FIELD_OFFSET(StreamingIntentRequest, language_code_)>(
          reinterpret_cast<char*>(&language_code_),
          reinterpret_cast<char*>(&other->language_code_));
}

::PROTOBUF_NAMESPACE_ID::Metadata StreamingIntentRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void StreamingKnowledgeGraphRequest::InitAsDefaultInstance() {
}
class StreamingKnowledgeGraphRequest::_Internal {
 public:
};

StreamingKnowledgeGraphRequest::StreamingKnowledgeGraphRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:chippergrpc2.StreamingKnowledgeGraphRequest)
}
StreamingKnowledgeGraphRequest::StreamingKnowledgeGraphRequest(const StreamingKnowledgeGraphRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  session_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_session().empty()) {
    session_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_session(),
      GetArena());
  }
  device_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_device_id().empty()) {
    device_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_device_id(),
      GetArena());
  }
  input_audio_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_input_audio().empty()) {
    input_audio_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_input_audio(),
      GetArena());
  }
  firmware_version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_firmware_version().empty()) {
    firmware_version_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_firmware_version(),
      GetArena());
  }
  app_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_app_key().empty()) {
    app_key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_app_key(),
      GetArena());
  }
  boot_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_boot_id().empty()) {
    boot_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_boot_id(),
      GetArena());
  }
  timezone_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_timezone().empty()) {
    timezone_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_timezone(),
      GetArena());
  }
  ::memcpy(&language_code_, &from.language_code_,
    static_cast<size_t>(reinterpret_cast<char*>(&skip_das_) -
    reinterpret_cast<char*>(&language_code_)) + sizeof(skip_das_));
  // @@protoc_insertion_point(copy_constructor:chippergrpc2.StreamingKnowledgeGraphRequest)
}

void StreamingKnowledgeGraphRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_StreamingKnowledgeGraphRequest_chipperpb_2eproto.base);
  session_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  device_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  input_audio_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  firmware_version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  app_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  boot_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  timezone_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&language_code_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&skip_das_) -
      reinterpret_cast<char*>(&language_code_)) + sizeof(skip_das_));
}

StreamingKnowledgeGraphRequest::~StreamingKnowledgeGraphRequest() {
  // @@protoc_insertion_point(destructor:chippergrpc2.StreamingKnowledgeGraphRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void StreamingKnowledgeGraphRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  session_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  device_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  input_audio_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  firmware_version_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  app_key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  boot_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  timezone_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void StreamingKnowledgeGraphRequest::ArenaDtor(void* object) {
  StreamingKnowledgeGraphRequest* _this = reinterpret_cast< StreamingKnowledgeGraphRequest* >(object);
  (void)_this;
}
void StreamingKnowledgeGraphRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void StreamingKnowledgeGraphRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const StreamingKnowledgeGraphRequest& StreamingKnowledgeGraphRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_StreamingKnowledgeGraphRequest_chipperpb_2eproto.base);
  return *internal_default_instance();
}


void StreamingKnowledgeGraphRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:chippergrpc2.StreamingKnowledgeGraphRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  session_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  device_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  input_audio_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  firmware_version_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  app_key_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  boot_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  timezone_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&language_code_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&skip_das_) -
      reinterpret_cast<char*>(&language_code_)) + sizeof(skip_das_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StreamingKnowledgeGraphRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string session = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_session();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "chippergrpc2.StreamingKnowledgeGraphRequest.session"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string device_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_device_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "chippergrpc2.StreamingKnowledgeGraphRequest.device_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes input_audio = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_input_audio();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .chippergrpc2.LanguageCode language_code = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_language_code(static_cast<::chippergrpc2::LanguageCode>(val));
        } else goto handle_unusual;
        continue;
      // string firmware_version = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_firmware_version();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "chippergrpc2.StreamingKnowledgeGraphRequest.firmware_version"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .chippergrpc2.AudioEncoding audio_encoding = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_audio_encoding(static_cast<::chippergrpc2::AudioEncoding>(val));
        } else goto handle_unusual;
        continue;
      // string app_key = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_app_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "chippergrpc2.StreamingKnowledgeGraphRequest.app_key"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool save_audio = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          save_audio_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string boot_id = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          auto str = _internal_mutable_boot_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "chippergrpc2.StreamingKnowledgeGraphRequest.boot_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool skip_das = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          skip_das_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string timezone = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          auto str = _internal_mutable_timezone();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "chippergrpc2.StreamingKnowledgeGraphRequest.timezone"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* StreamingKnowledgeGraphRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:chippergrpc2.StreamingKnowledgeGraphRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string session = 1;
  if (this->session().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_session().data(), static_cast<int>(this->_internal_session().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "chippergrpc2.StreamingKnowledgeGraphRequest.session");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_session(), target);
  }

  // string device_id = 2;
  if (this->device_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_device_id().data(), static_cast<int>(this->_internal_device_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "chippergrpc2.StreamingKnowledgeGraphRequest.device_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_device_id(), target);
  }

  // bytes input_audio = 3;
  if (this->input_audio().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_input_audio(), target);
  }

  // .chippergrpc2.LanguageCode language_code = 4;
  if (this->language_code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->_internal_language_code(), target);
  }

  // string firmware_version = 5;
  if (this->firmware_version().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_firmware_version().data(), static_cast<int>(this->_internal_firmware_version().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "chippergrpc2.StreamingKnowledgeGraphRequest.firmware_version");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_firmware_version(), target);
  }

  // .chippergrpc2.AudioEncoding audio_encoding = 6;
  if (this->audio_encoding() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      6, this->_internal_audio_encoding(), target);
  }

  // string app_key = 7;
  if (this->app_key().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_app_key().data(), static_cast<int>(this->_internal_app_key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "chippergrpc2.StreamingKnowledgeGraphRequest.app_key");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_app_key(), target);
  }

  // bool save_audio = 8;
  if (this->save_audio() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(8, this->_internal_save_audio(), target);
  }

  // string boot_id = 9;
  if (this->boot_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_boot_id().data(), static_cast<int>(this->_internal_boot_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "chippergrpc2.StreamingKnowledgeGraphRequest.boot_id");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_boot_id(), target);
  }

  // bool skip_das = 10;
  if (this->skip_das() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(10, this->_internal_skip_das(), target);
  }

  // string timezone = 11;
  if (this->timezone().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_timezone().data(), static_cast<int>(this->_internal_timezone().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "chippergrpc2.StreamingKnowledgeGraphRequest.timezone");
    target = stream->WriteStringMaybeAliased(
        11, this->_internal_timezone(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:chippergrpc2.StreamingKnowledgeGraphRequest)
  return target;
}

size_t StreamingKnowledgeGraphRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:chippergrpc2.StreamingKnowledgeGraphRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string session = 1;
  if (this->session().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_session());
  }

  // string device_id = 2;
  if (this->device_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_device_id());
  }

  // bytes input_audio = 3;
  if (this->input_audio().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_input_audio());
  }

  // string firmware_version = 5;
  if (this->firmware_version().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_firmware_version());
  }

  // string app_key = 7;
  if (this->app_key().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_app_key());
  }

  // string boot_id = 9;
  if (this->boot_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_boot_id());
  }

  // string timezone = 11;
  if (this->timezone().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_timezone());
  }

  // .chippergrpc2.LanguageCode language_code = 4;
  if (this->language_code() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_language_code());
  }

  // .chippergrpc2.AudioEncoding audio_encoding = 6;
  if (this->audio_encoding() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_audio_encoding());
  }

  // bool save_audio = 8;
  if (this->save_audio() != 0) {
    total_size += 1 + 1;
  }

  // bool skip_das = 10;
  if (this->skip_das() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StreamingKnowledgeGraphRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:chippergrpc2.StreamingKnowledgeGraphRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const StreamingKnowledgeGraphRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<StreamingKnowledgeGraphRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:chippergrpc2.StreamingKnowledgeGraphRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:chippergrpc2.StreamingKnowledgeGraphRequest)
    MergeFrom(*source);
  }
}

void StreamingKnowledgeGraphRequest::MergeFrom(const StreamingKnowledgeGraphRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:chippergrpc2.StreamingKnowledgeGraphRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.session().size() > 0) {
    _internal_set_session(from._internal_session());
  }
  if (from.device_id().size() > 0) {
    _internal_set_device_id(from._internal_device_id());
  }
  if (from.input_audio().size() > 0) {
    _internal_set_input_audio(from._internal_input_audio());
  }
  if (from.firmware_version().size() > 0) {
    _internal_set_firmware_version(from._internal_firmware_version());
  }
  if (from.app_key().size() > 0) {
    _internal_set_app_key(from._internal_app_key());
  }
  if (from.boot_id().size() > 0) {
    _internal_set_boot_id(from._internal_boot_id());
  }
  if (from.timezone().size() > 0) {
    _internal_set_timezone(from._internal_timezone());
  }
  if (from.language_code() != 0) {
    _internal_set_language_code(from._internal_language_code());
  }
  if (from.audio_encoding() != 0) {
    _internal_set_audio_encoding(from._internal_audio_encoding());
  }
  if (from.save_audio() != 0) {
    _internal_set_save_audio(from._internal_save_audio());
  }
  if (from.skip_das() != 0) {
    _internal_set_skip_das(from._internal_skip_das());
  }
}

void StreamingKnowledgeGraphRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:chippergrpc2.StreamingKnowledgeGraphRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StreamingKnowledgeGraphRequest::CopyFrom(const StreamingKnowledgeGraphRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:chippergrpc2.StreamingKnowledgeGraphRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StreamingKnowledgeGraphRequest::IsInitialized() const {
  return true;
}

void StreamingKnowledgeGraphRequest::InternalSwap(StreamingKnowledgeGraphRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  session_.Swap(&other->session_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  device_id_.Swap(&other->device_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  input_audio_.Swap(&other->input_audio_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  firmware_version_.Swap(&other->firmware_version_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  app_key_.Swap(&other->app_key_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  boot_id_.Swap(&other->boot_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  timezone_.Swap(&other->timezone_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(StreamingKnowledgeGraphRequest, skip_das_)
      + sizeof(StreamingKnowledgeGraphRequest::skip_das_)
      - PROTOBUF_FIELD_OFFSET(StreamingKnowledgeGraphRequest, language_code_)>(
          reinterpret_cast<char*>(&language_code_),
          reinterpret_cast<char*>(&other->language_code_));
}

::PROTOBUF_NAMESPACE_ID::Metadata StreamingKnowledgeGraphRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void StreamingConnectionCheckRequest::InitAsDefaultInstance() {
}
class StreamingConnectionCheckRequest::_Internal {
 public:
};

StreamingConnectionCheckRequest::StreamingConnectionCheckRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:chippergrpc2.StreamingConnectionCheckRequest)
}
StreamingConnectionCheckRequest::StreamingConnectionCheckRequest(const StreamingConnectionCheckRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  session_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_session().empty()) {
    session_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_session(),
      GetArena());
  }
  device_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_device_id().empty()) {
    device_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_device_id(),
      GetArena());
  }
  input_audio_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_input_audio().empty()) {
    input_audio_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_input_audio(),
      GetArena());
  }
  firmware_version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_firmware_version().empty()) {
    firmware_version_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_firmware_version(),
      GetArena());
  }
  app_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_app_key().empty()) {
    app_key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_app_key(),
      GetArena());
  }
  ::memcpy(&total_audio_ms_, &from.total_audio_ms_,
    static_cast<size_t>(reinterpret_cast<char*>(&audio_per_request_) -
    reinterpret_cast<char*>(&total_audio_ms_)) + sizeof(audio_per_request_));
  // @@protoc_insertion_point(copy_constructor:chippergrpc2.StreamingConnectionCheckRequest)
}

void StreamingConnectionCheckRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_StreamingConnectionCheckRequest_chipperpb_2eproto.base);
  session_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  device_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  input_audio_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  firmware_version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  app_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&total_audio_ms_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&audio_per_request_) -
      reinterpret_cast<char*>(&total_audio_ms_)) + sizeof(audio_per_request_));
}

StreamingConnectionCheckRequest::~StreamingConnectionCheckRequest() {
  // @@protoc_insertion_point(destructor:chippergrpc2.StreamingConnectionCheckRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void StreamingConnectionCheckRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  session_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  device_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  input_audio_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  firmware_version_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  app_key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void StreamingConnectionCheckRequest::ArenaDtor(void* object) {
  StreamingConnectionCheckRequest* _this = reinterpret_cast< StreamingConnectionCheckRequest* >(object);
  (void)_this;
}
void StreamingConnectionCheckRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void StreamingConnectionCheckRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const StreamingConnectionCheckRequest& StreamingConnectionCheckRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_StreamingConnectionCheckRequest_chipperpb_2eproto.base);
  return *internal_default_instance();
}


void StreamingConnectionCheckRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:chippergrpc2.StreamingConnectionCheckRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  session_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  device_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  input_audio_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  firmware_version_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  app_key_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&total_audio_ms_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&audio_per_request_) -
      reinterpret_cast<char*>(&total_audio_ms_)) + sizeof(audio_per_request_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StreamingConnectionCheckRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string session = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_session();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "chippergrpc2.StreamingConnectionCheckRequest.session"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string device_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_device_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "chippergrpc2.StreamingConnectionCheckRequest.device_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes input_audio = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_input_audio();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string firmware_version = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_firmware_version();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "chippergrpc2.StreamingConnectionCheckRequest.firmware_version"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string app_key = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_app_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "chippergrpc2.StreamingConnectionCheckRequest.app_key"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 total_audio_ms = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          total_audio_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 audio_per_request = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          audio_per_request_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* StreamingConnectionCheckRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:chippergrpc2.StreamingConnectionCheckRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string session = 1;
  if (this->session().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_session().data(), static_cast<int>(this->_internal_session().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "chippergrpc2.StreamingConnectionCheckRequest.session");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_session(), target);
  }

  // string device_id = 2;
  if (this->device_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_device_id().data(), static_cast<int>(this->_internal_device_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "chippergrpc2.StreamingConnectionCheckRequest.device_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_device_id(), target);
  }

  // bytes input_audio = 3;
  if (this->input_audio().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_input_audio(), target);
  }

  // string firmware_version = 4;
  if (this->firmware_version().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_firmware_version().data(), static_cast<int>(this->_internal_firmware_version().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "chippergrpc2.StreamingConnectionCheckRequest.firmware_version");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_firmware_version(), target);
  }

  // string app_key = 5;
  if (this->app_key().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_app_key().data(), static_cast<int>(this->_internal_app_key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "chippergrpc2.StreamingConnectionCheckRequest.app_key");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_app_key(), target);
  }

  // uint32 total_audio_ms = 6;
  if (this->total_audio_ms() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_total_audio_ms(), target);
  }

  // uint32 audio_per_request = 7;
  if (this->audio_per_request() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_audio_per_request(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:chippergrpc2.StreamingConnectionCheckRequest)
  return target;
}

size_t StreamingConnectionCheckRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:chippergrpc2.StreamingConnectionCheckRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string session = 1;
  if (this->session().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_session());
  }

  // string device_id = 2;
  if (this->device_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_device_id());
  }

  // bytes input_audio = 3;
  if (this->input_audio().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_input_audio());
  }

  // string firmware_version = 4;
  if (this->firmware_version().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_firmware_version());
  }

  // string app_key = 5;
  if (this->app_key().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_app_key());
  }

  // uint32 total_audio_ms = 6;
  if (this->total_audio_ms() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_total_audio_ms());
  }

  // uint32 audio_per_request = 7;
  if (this->audio_per_request() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_audio_per_request());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StreamingConnectionCheckRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:chippergrpc2.StreamingConnectionCheckRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const StreamingConnectionCheckRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<StreamingConnectionCheckRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:chippergrpc2.StreamingConnectionCheckRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:chippergrpc2.StreamingConnectionCheckRequest)
    MergeFrom(*source);
  }
}

void StreamingConnectionCheckRequest::MergeFrom(const StreamingConnectionCheckRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:chippergrpc2.StreamingConnectionCheckRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.session().size() > 0) {
    _internal_set_session(from._internal_session());
  }
  if (from.device_id().size() > 0) {
    _internal_set_device_id(from._internal_device_id());
  }
  if (from.input_audio().size() > 0) {
    _internal_set_input_audio(from._internal_input_audio());
  }
  if (from.firmware_version().size() > 0) {
    _internal_set_firmware_version(from._internal_firmware_version());
  }
  if (from.app_key().size() > 0) {
    _internal_set_app_key(from._internal_app_key());
  }
  if (from.total_audio_ms() != 0) {
    _internal_set_total_audio_ms(from._internal_total_audio_ms());
  }
  if (from.audio_per_request() != 0) {
    _internal_set_audio_per_request(from._internal_audio_per_request());
  }
}

void StreamingConnectionCheckRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:chippergrpc2.StreamingConnectionCheckRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StreamingConnectionCheckRequest::CopyFrom(const StreamingConnectionCheckRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:chippergrpc2.StreamingConnectionCheckRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StreamingConnectionCheckRequest::IsInitialized() const {
  return true;
}

void StreamingConnectionCheckRequest::InternalSwap(StreamingConnectionCheckRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  session_.Swap(&other->session_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  device_id_.Swap(&other->device_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  input_audio_.Swap(&other->input_audio_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  firmware_version_.Swap(&other->firmware_version_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  app_key_.Swap(&other->app_key_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(StreamingConnectionCheckRequest, audio_per_request_)
      + sizeof(StreamingConnectionCheckRequest::audio_per_request_)
      - PROTOBUF_FIELD_OFFSET(StreamingConnectionCheckRequest, total_audio_ms_)>(
          reinterpret_cast<char*>(&total_audio_ms_),
          reinterpret_cast<char*>(&other->total_audio_ms_));
}

::PROTOBUF_NAMESPACE_ID::Metadata StreamingConnectionCheckRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void IntentResponse::InitAsDefaultInstance() {
  ::chippergrpc2::_IntentResponse_default_instance_._instance.get_mutable()->intent_result_ = const_cast< ::chippergrpc2::IntentResult*>(
      ::chippergrpc2::IntentResult::internal_default_instance());
  ::chippergrpc2::_IntentResponse_default_instance_._instance.get_mutable()->speech_result_ = const_cast< ::chippergrpc2::SpeechResult*>(
      ::chippergrpc2::SpeechResult::internal_default_instance());
}
class IntentResponse::_Internal {
 public:
  static const ::chippergrpc2::IntentResult& intent_result(const IntentResponse* msg);
  static const ::chippergrpc2::SpeechResult& speech_result(const IntentResponse* msg);
};

const ::chippergrpc2::IntentResult&
IntentResponse::_Internal::intent_result(const IntentResponse* msg) {
  return *msg->intent_result_;
}
const ::chippergrpc2::SpeechResult&
IntentResponse::_Internal::speech_result(const IntentResponse* msg) {
  return *msg->speech_result_;
}
IntentResponse::IntentResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:chippergrpc2.IntentResponse)
}
IntentResponse::IntentResponse(const IntentResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  session_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_session().empty()) {
    session_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_session(),
      GetArena());
  }
  device_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_device_id().empty()) {
    device_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_device_id(),
      GetArena());
  }
  audio_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_audio_id().empty()) {
    audio_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_audio_id(),
      GetArena());
  }
  if (from._internal_has_intent_result()) {
    intent_result_ = new ::chippergrpc2::IntentResult(*from.intent_result_);
  } else {
    intent_result_ = nullptr;
  }
  if (from._internal_has_speech_result()) {
    speech_result_ = new ::chippergrpc2::SpeechResult(*from.speech_result_);
  } else {
    speech_result_ = nullptr;
  }
  ::memcpy(&is_final_, &from.is_final_,
    static_cast<size_t>(reinterpret_cast<char*>(&mode_) -
    reinterpret_cast<char*>(&is_final_)) + sizeof(mode_));
  // @@protoc_insertion_point(copy_constructor:chippergrpc2.IntentResponse)
}

void IntentResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_IntentResponse_chipperpb_2eproto.base);
  session_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  device_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  audio_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&intent_result_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&mode_) -
      reinterpret_cast<char*>(&intent_result_)) + sizeof(mode_));
}

IntentResponse::~IntentResponse() {
  // @@protoc_insertion_point(destructor:chippergrpc2.IntentResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void IntentResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  session_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  device_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  audio_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete intent_result_;
  if (this != internal_default_instance()) delete speech_result_;
}

void IntentResponse::ArenaDtor(void* object) {
  IntentResponse* _this = reinterpret_cast< IntentResponse* >(object);
  (void)_this;
}
void IntentResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void IntentResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const IntentResponse& IntentResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_IntentResponse_chipperpb_2eproto.base);
  return *internal_default_instance();
}


void IntentResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:chippergrpc2.IntentResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  session_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  device_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  audio_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && intent_result_ != nullptr) {
    delete intent_result_;
  }
  intent_result_ = nullptr;
  if (GetArena() == nullptr && speech_result_ != nullptr) {
    delete speech_result_;
  }
  speech_result_ = nullptr;
  ::memset(&is_final_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&mode_) -
      reinterpret_cast<char*>(&is_final_)) + sizeof(mode_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* IntentResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string session = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_session();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "chippergrpc2.IntentResponse.session"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string device_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_device_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "chippergrpc2.IntentResponse.device_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool is_final = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          is_final_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .chippergrpc2.IntentResult intent_result = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_intent_result(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .chippergrpc2.SpeechResult speech_result = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_speech_result(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .chippergrpc2.RobotMode mode = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_mode(static_cast<::chippergrpc2::RobotMode>(val));
        } else goto handle_unusual;
        continue;
      // string audio_id = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          auto str = _internal_mutable_audio_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "chippergrpc2.IntentResponse.audio_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* IntentResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:chippergrpc2.IntentResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string session = 1;
  if (this->session().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_session().data(), static_cast<int>(this->_internal_session().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "chippergrpc2.IntentResponse.session");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_session(), target);
  }

  // string device_id = 2;
  if (this->device_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_device_id().data(), static_cast<int>(this->_internal_device_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "chippergrpc2.IntentResponse.device_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_device_id(), target);
  }

  // bool is_final = 3;
  if (this->is_final() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_is_final(), target);
  }

  // .chippergrpc2.IntentResult intent_result = 4;
  if (this->has_intent_result()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::intent_result(this), target, stream);
  }

  // .chippergrpc2.SpeechResult speech_result = 5;
  if (this->has_speech_result()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::speech_result(this), target, stream);
  }

  // .chippergrpc2.RobotMode mode = 6;
  if (this->mode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      6, this->_internal_mode(), target);
  }

  // string audio_id = 16;
  if (this->audio_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_audio_id().data(), static_cast<int>(this->_internal_audio_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "chippergrpc2.IntentResponse.audio_id");
    target = stream->WriteStringMaybeAliased(
        16, this->_internal_audio_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:chippergrpc2.IntentResponse)
  return target;
}

size_t IntentResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:chippergrpc2.IntentResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string session = 1;
  if (this->session().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_session());
  }

  // string device_id = 2;
  if (this->device_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_device_id());
  }

  // string audio_id = 16;
  if (this->audio_id().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_audio_id());
  }

  // .chippergrpc2.IntentResult intent_result = 4;
  if (this->has_intent_result()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *intent_result_);
  }

  // .chippergrpc2.SpeechResult speech_result = 5;
  if (this->has_speech_result()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *speech_result_);
  }

  // bool is_final = 3;
  if (this->is_final() != 0) {
    total_size += 1 + 1;
  }

  // .chippergrpc2.RobotMode mode = 6;
  if (this->mode() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_mode());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void IntentResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:chippergrpc2.IntentResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const IntentResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<IntentResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:chippergrpc2.IntentResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:chippergrpc2.IntentResponse)
    MergeFrom(*source);
  }
}

void IntentResponse::MergeFrom(const IntentResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:chippergrpc2.IntentResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.session().size() > 0) {
    _internal_set_session(from._internal_session());
  }
  if (from.device_id().size() > 0) {
    _internal_set_device_id(from._internal_device_id());
  }
  if (from.audio_id().size() > 0) {
    _internal_set_audio_id(from._internal_audio_id());
  }
  if (from.has_intent_result()) {
    _internal_mutable_intent_result()->::chippergrpc2::IntentResult::MergeFrom(from._internal_intent_result());
  }
  if (from.has_speech_result()) {
    _internal_mutable_speech_result()->::chippergrpc2::SpeechResult::MergeFrom(from._internal_speech_result());
  }
  if (from.is_final() != 0) {
    _internal_set_is_final(from._internal_is_final());
  }
  if (from.mode() != 0) {
    _internal_set_mode(from._internal_mode());
  }
}

void IntentResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:chippergrpc2.IntentResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IntentResponse::CopyFrom(const IntentResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:chippergrpc2.IntentResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IntentResponse::IsInitialized() const {
  return true;
}

void IntentResponse::InternalSwap(IntentResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  session_.Swap(&other->session_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  device_id_.Swap(&other->device_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  audio_id_.Swap(&other->audio_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(IntentResponse, mode_)
      + sizeof(IntentResponse::mode_)
      - PROTOBUF_FIELD_OFFSET(IntentResponse, intent_result_)>(
          reinterpret_cast<char*>(&intent_result_),
          reinterpret_cast<char*>(&other->intent_result_));
}

::PROTOBUF_NAMESPACE_ID::Metadata IntentResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SpeechResult::InitAsDefaultInstance() {
}
class SpeechResult::_Internal {
 public:
};

SpeechResult::SpeechResult(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:chippergrpc2.SpeechResult)
}
SpeechResult::SpeechResult(const SpeechResult& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  transcript_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_transcript().empty()) {
    transcript_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_transcript(),
      GetArena());
  }
  is_final_ = from.is_final_;
  // @@protoc_insertion_point(copy_constructor:chippergrpc2.SpeechResult)
}

void SpeechResult::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SpeechResult_chipperpb_2eproto.base);
  transcript_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  is_final_ = false;
}

SpeechResult::~SpeechResult() {
  // @@protoc_insertion_point(destructor:chippergrpc2.SpeechResult)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SpeechResult::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  transcript_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SpeechResult::ArenaDtor(void* object) {
  SpeechResult* _this = reinterpret_cast< SpeechResult* >(object);
  (void)_this;
}
void SpeechResult::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SpeechResult::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SpeechResult& SpeechResult::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SpeechResult_chipperpb_2eproto.base);
  return *internal_default_instance();
}


void SpeechResult::Clear() {
// @@protoc_insertion_point(message_clear_start:chippergrpc2.SpeechResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  transcript_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  is_final_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SpeechResult::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string transcript = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_transcript();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "chippergrpc2.SpeechResult.transcript"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool is_final = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          is_final_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SpeechResult::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:chippergrpc2.SpeechResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string transcript = 1;
  if (this->transcript().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_transcript().data(), static_cast<int>(this->_internal_transcript().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "chippergrpc2.SpeechResult.transcript");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_transcript(), target);
  }

  // bool is_final = 2;
  if (this->is_final() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_is_final(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:chippergrpc2.SpeechResult)
  return target;
}

size_t SpeechResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:chippergrpc2.SpeechResult)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string transcript = 1;
  if (this->transcript().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_transcript());
  }

  // bool is_final = 2;
  if (this->is_final() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SpeechResult::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:chippergrpc2.SpeechResult)
  GOOGLE_DCHECK_NE(&from, this);
  const SpeechResult* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SpeechResult>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:chippergrpc2.SpeechResult)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:chippergrpc2.SpeechResult)
    MergeFrom(*source);
  }
}

void SpeechResult::MergeFrom(const SpeechResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:chippergrpc2.SpeechResult)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.transcript().size() > 0) {
    _internal_set_transcript(from._internal_transcript());
  }
  if (from.is_final() != 0) {
    _internal_set_is_final(from._internal_is_final());
  }
}

void SpeechResult::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:chippergrpc2.SpeechResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SpeechResult::CopyFrom(const SpeechResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:chippergrpc2.SpeechResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SpeechResult::IsInitialized() const {
  return true;
}

void SpeechResult::InternalSwap(SpeechResult* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  transcript_.Swap(&other->transcript_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(is_final_, other->is_final_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SpeechResult::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

IntentResult_ParametersEntry_DoNotUse::IntentResult_ParametersEntry_DoNotUse() {}
IntentResult_ParametersEntry_DoNotUse::IntentResult_ParametersEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void IntentResult_ParametersEntry_DoNotUse::MergeFrom(const IntentResult_ParametersEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata IntentResult_ParametersEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void IntentResult_ParametersEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

void IntentResult::InitAsDefaultInstance() {
  ::chippergrpc2::_IntentResult_default_instance_._instance.get_mutable()->kgresponse_ = const_cast< ::chippergrpc2::KnowledgeGraphResponse*>(
      ::chippergrpc2::KnowledgeGraphResponse::internal_default_instance());
}
class IntentResult::_Internal {
 public:
  static const ::chippergrpc2::KnowledgeGraphResponse& kgresponse(const IntentResult* msg);
};

const ::chippergrpc2::KnowledgeGraphResponse&
IntentResult::_Internal::kgresponse(const IntentResult* msg) {
  return *msg->kgresponse_;
}
IntentResult::IntentResult(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  parameters_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:chippergrpc2.IntentResult)
}
IntentResult::IntentResult(const IntentResult& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  parameters_.MergeFrom(from.parameters_);
  query_text_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_query_text().empty()) {
    query_text_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_query_text(),
      GetArena());
  }
  action_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_action().empty()) {
    action_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_action(),
      GetArena());
  }
  if (from._internal_has_kgresponse()) {
    kgresponse_ = new ::chippergrpc2::KnowledgeGraphResponse(*from.kgresponse_);
  } else {
    kgresponse_ = nullptr;
  }
  ::memcpy(&intent_confidence_, &from.intent_confidence_,
    static_cast<size_t>(reinterpret_cast<char*>(&service_) -
    reinterpret_cast<char*>(&intent_confidence_)) + sizeof(service_));
  // @@protoc_insertion_point(copy_constructor:chippergrpc2.IntentResult)
}

void IntentResult::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_IntentResult_chipperpb_2eproto.base);
  query_text_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  action_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&kgresponse_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&service_) -
      reinterpret_cast<char*>(&kgresponse_)) + sizeof(service_));
}

IntentResult::~IntentResult() {
  // @@protoc_insertion_point(destructor:chippergrpc2.IntentResult)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void IntentResult::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  query_text_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  action_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete kgresponse_;
}

void IntentResult::ArenaDtor(void* object) {
  IntentResult* _this = reinterpret_cast< IntentResult* >(object);
  (void)_this;
}
void IntentResult::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void IntentResult::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const IntentResult& IntentResult::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_IntentResult_chipperpb_2eproto.base);
  return *internal_default_instance();
}


void IntentResult::Clear() {
// @@protoc_insertion_point(message_clear_start:chippergrpc2.IntentResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  parameters_.Clear();
  query_text_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  action_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && kgresponse_ != nullptr) {
    delete kgresponse_;
  }
  kgresponse_ = nullptr;
  ::memset(&intent_confidence_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&service_) -
      reinterpret_cast<char*>(&intent_confidence_)) + sizeof(service_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* IntentResult::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string query_text = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_query_text();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "chippergrpc2.IntentResult.query_text"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string action = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_action();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "chippergrpc2.IntentResult.action"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float intent_confidence = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          intent_confidence_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float speech_confidence = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          speech_confidence_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // map<string, string> parameters = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&parameters_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      // bool all_parameters_present = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          all_parameters_present_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool has_context = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          has_context_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .chippergrpc2.IntentService service = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_service(static_cast<::chippergrpc2::IntentService>(val));
        } else goto handle_unusual;
        continue;
      // .chippergrpc2.KnowledgeGraphResponse kgresponse = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_kgresponse(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* IntentResult::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:chippergrpc2.IntentResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string query_text = 1;
  if (this->query_text().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_query_text().data(), static_cast<int>(this->_internal_query_text().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "chippergrpc2.IntentResult.query_text");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_query_text(), target);
  }

  // string action = 2;
  if (this->action().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_action().data(), static_cast<int>(this->_internal_action().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "chippergrpc2.IntentResult.action");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_action(), target);
  }

  // float intent_confidence = 3;
  if (!(this->intent_confidence() <= 0 && this->intent_confidence() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_intent_confidence(), target);
  }

  // float speech_confidence = 4;
  if (!(this->speech_confidence() <= 0 && this->speech_confidence() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_speech_confidence(), target);
  }

  // map<string, string> parameters = 5;
  if (!this->_internal_parameters().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "chippergrpc2.IntentResult.ParametersEntry.key");
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "chippergrpc2.IntentResult.ParametersEntry.value");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_parameters().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_parameters().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_parameters().begin();
          it != this->_internal_parameters().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = IntentResult_ParametersEntry_DoNotUse::Funcs::InternalSerialize(5, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_parameters().begin();
          it != this->_internal_parameters().end(); ++it) {
        target = IntentResult_ParametersEntry_DoNotUse::Funcs::InternalSerialize(5, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  // bool all_parameters_present = 6;
  if (this->all_parameters_present() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_all_parameters_present(), target);
  }

  // bool has_context = 7;
  if (this->has_context() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(7, this->_internal_has_context(), target);
  }

  // .chippergrpc2.IntentService service = 8;
  if (this->service() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      8, this->_internal_service(), target);
  }

  // .chippergrpc2.KnowledgeGraphResponse kgresponse = 9;
  if (this->has_kgresponse()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::kgresponse(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:chippergrpc2.IntentResult)
  return target;
}

size_t IntentResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:chippergrpc2.IntentResult)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, string> parameters = 5;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_parameters_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
      it = this->_internal_parameters().begin();
      it != this->_internal_parameters().end(); ++it) {
    total_size += IntentResult_ParametersEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // string query_text = 1;
  if (this->query_text().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_query_text());
  }

  // string action = 2;
  if (this->action().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_action());
  }

  // .chippergrpc2.KnowledgeGraphResponse kgresponse = 9;
  if (this->has_kgresponse()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *kgresponse_);
  }

  // float intent_confidence = 3;
  if (!(this->intent_confidence() <= 0 && this->intent_confidence() >= 0)) {
    total_size += 1 + 4;
  }

  // float speech_confidence = 4;
  if (!(this->speech_confidence() <= 0 && this->speech_confidence() >= 0)) {
    total_size += 1 + 4;
  }

  // bool all_parameters_present = 6;
  if (this->all_parameters_present() != 0) {
    total_size += 1 + 1;
  }

  // bool has_context = 7;
  if (this->has_context() != 0) {
    total_size += 1 + 1;
  }

  // .chippergrpc2.IntentService service = 8;
  if (this->service() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_service());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void IntentResult::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:chippergrpc2.IntentResult)
  GOOGLE_DCHECK_NE(&from, this);
  const IntentResult* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<IntentResult>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:chippergrpc2.IntentResult)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:chippergrpc2.IntentResult)
    MergeFrom(*source);
  }
}

void IntentResult::MergeFrom(const IntentResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:chippergrpc2.IntentResult)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  parameters_.MergeFrom(from.parameters_);
  if (from.query_text().size() > 0) {
    _internal_set_query_text(from._internal_query_text());
  }
  if (from.action().size() > 0) {
    _internal_set_action(from._internal_action());
  }
  if (from.has_kgresponse()) {
    _internal_mutable_kgresponse()->::chippergrpc2::KnowledgeGraphResponse::MergeFrom(from._internal_kgresponse());
  }
  if (!(from.intent_confidence() <= 0 && from.intent_confidence() >= 0)) {
    _internal_set_intent_confidence(from._internal_intent_confidence());
  }
  if (!(from.speech_confidence() <= 0 && from.speech_confidence() >= 0)) {
    _internal_set_speech_confidence(from._internal_speech_confidence());
  }
  if (from.all_parameters_present() != 0) {
    _internal_set_all_parameters_present(from._internal_all_parameters_present());
  }
  if (from.has_context() != 0) {
    _internal_set_has_context(from._internal_has_context());
  }
  if (from.service() != 0) {
    _internal_set_service(from._internal_service());
  }
}

void IntentResult::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:chippergrpc2.IntentResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IntentResult::CopyFrom(const IntentResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:chippergrpc2.IntentResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IntentResult::IsInitialized() const {
  return true;
}

void IntentResult::InternalSwap(IntentResult* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  parameters_.Swap(&other->parameters_);
  query_text_.Swap(&other->query_text_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  action_.Swap(&other->action_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(IntentResult, service_)
      + sizeof(IntentResult::service_)
      - PROTOBUF_FIELD_OFFSET(IntentResult, kgresponse_)>(
          reinterpret_cast<char*>(&kgresponse_),
          reinterpret_cast<char*>(&other->kgresponse_));
}

::PROTOBUF_NAMESPACE_ID::Metadata IntentResult::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void KnowledgeGraphResponse::InitAsDefaultInstance() {
}
class KnowledgeGraphResponse::_Internal {
 public:
};

KnowledgeGraphResponse::KnowledgeGraphResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  domains_used_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:chippergrpc2.KnowledgeGraphResponse)
}
KnowledgeGraphResponse::KnowledgeGraphResponse(const KnowledgeGraphResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      domains_used_(from.domains_used_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  session_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_session().empty()) {
    session_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_session(),
      GetArena());
  }
  device_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_device_id().empty()) {
    device_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_device_id(),
      GetArena());
  }
  query_text_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_query_text().empty()) {
    query_text_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_query_text(),
      GetArena());
  }
  spoken_text_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_spoken_text().empty()) {
    spoken_text_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_spoken_text(),
      GetArena());
  }
  command_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_command_type().empty()) {
    command_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_command_type(),
      GetArena());
  }
  audio_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_audio_id().empty()) {
    audio_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_audio_id(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:chippergrpc2.KnowledgeGraphResponse)
}

void KnowledgeGraphResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_KnowledgeGraphResponse_chipperpb_2eproto.base);
  session_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  device_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  query_text_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  spoken_text_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  command_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  audio_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

KnowledgeGraphResponse::~KnowledgeGraphResponse() {
  // @@protoc_insertion_point(destructor:chippergrpc2.KnowledgeGraphResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void KnowledgeGraphResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  session_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  device_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  query_text_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  spoken_text_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  command_type_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  audio_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void KnowledgeGraphResponse::ArenaDtor(void* object) {
  KnowledgeGraphResponse* _this = reinterpret_cast< KnowledgeGraphResponse* >(object);
  (void)_this;
}
void KnowledgeGraphResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void KnowledgeGraphResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const KnowledgeGraphResponse& KnowledgeGraphResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_KnowledgeGraphResponse_chipperpb_2eproto.base);
  return *internal_default_instance();
}


void KnowledgeGraphResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:chippergrpc2.KnowledgeGraphResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  domains_used_.Clear();
  session_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  device_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  query_text_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  spoken_text_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  command_type_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  audio_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* KnowledgeGraphResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string session = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_session();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "chippergrpc2.KnowledgeGraphResponse.session"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string device_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_device_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "chippergrpc2.KnowledgeGraphResponse.device_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string query_text = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_query_text();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "chippergrpc2.KnowledgeGraphResponse.query_text"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string spoken_text = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_spoken_text();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "chippergrpc2.KnowledgeGraphResponse.spoken_text"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string command_type = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_command_type();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "chippergrpc2.KnowledgeGraphResponse.command_type"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string domains_used = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_domains_used();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "chippergrpc2.KnowledgeGraphResponse.domains_used"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else goto handle_unusual;
        continue;
      // string audio_id = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_audio_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "chippergrpc2.KnowledgeGraphResponse.audio_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* KnowledgeGraphResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:chippergrpc2.KnowledgeGraphResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string session = 1;
  if (this->session().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_session().data(), static_cast<int>(this->_internal_session().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "chippergrpc2.KnowledgeGraphResponse.session");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_session(), target);
  }

  // string device_id = 2;
  if (this->device_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_device_id().data(), static_cast<int>(this->_internal_device_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "chippergrpc2.KnowledgeGraphResponse.device_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_device_id(), target);
  }

  // string query_text = 3;
  if (this->query_text().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_query_text().data(), static_cast<int>(this->_internal_query_text().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "chippergrpc2.KnowledgeGraphResponse.query_text");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_query_text(), target);
  }

  // string spoken_text = 4;
  if (this->spoken_text().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_spoken_text().data(), static_cast<int>(this->_internal_spoken_text().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "chippergrpc2.KnowledgeGraphResponse.spoken_text");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_spoken_text(), target);
  }

  // string command_type = 5;
  if (this->command_type().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_command_type().data(), static_cast<int>(this->_internal_command_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "chippergrpc2.KnowledgeGraphResponse.command_type");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_command_type(), target);
  }

  // repeated string domains_used = 6;
  for (int i = 0, n = this->_internal_domains_used_size(); i < n; i++) {
    const auto& s = this->_internal_domains_used(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "chippergrpc2.KnowledgeGraphResponse.domains_used");
    target = stream->WriteString(6, s, target);
  }

  // string audio_id = 7;
  if (this->audio_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_audio_id().data(), static_cast<int>(this->_internal_audio_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "chippergrpc2.KnowledgeGraphResponse.audio_id");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_audio_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:chippergrpc2.KnowledgeGraphResponse)
  return target;
}

size_t KnowledgeGraphResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:chippergrpc2.KnowledgeGraphResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string domains_used = 6;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(domains_used_.size());
  for (int i = 0, n = domains_used_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      domains_used_.Get(i));
  }

  // string session = 1;
  if (this->session().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_session());
  }

  // string device_id = 2;
  if (this->device_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_device_id());
  }

  // string query_text = 3;
  if (this->query_text().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_query_text());
  }

  // string spoken_text = 4;
  if (this->spoken_text().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_spoken_text());
  }

  // string command_type = 5;
  if (this->command_type().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_command_type());
  }

  // string audio_id = 7;
  if (this->audio_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_audio_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void KnowledgeGraphResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:chippergrpc2.KnowledgeGraphResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const KnowledgeGraphResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<KnowledgeGraphResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:chippergrpc2.KnowledgeGraphResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:chippergrpc2.KnowledgeGraphResponse)
    MergeFrom(*source);
  }
}

void KnowledgeGraphResponse::MergeFrom(const KnowledgeGraphResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:chippergrpc2.KnowledgeGraphResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  domains_used_.MergeFrom(from.domains_used_);
  if (from.session().size() > 0) {
    _internal_set_session(from._internal_session());
  }
  if (from.device_id().size() > 0) {
    _internal_set_device_id(from._internal_device_id());
  }
  if (from.query_text().size() > 0) {
    _internal_set_query_text(from._internal_query_text());
  }
  if (from.spoken_text().size() > 0) {
    _internal_set_spoken_text(from._internal_spoken_text());
  }
  if (from.command_type().size() > 0) {
    _internal_set_command_type(from._internal_command_type());
  }
  if (from.audio_id().size() > 0) {
    _internal_set_audio_id(from._internal_audio_id());
  }
}

void KnowledgeGraphResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:chippergrpc2.KnowledgeGraphResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void KnowledgeGraphResponse::CopyFrom(const KnowledgeGraphResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:chippergrpc2.KnowledgeGraphResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KnowledgeGraphResponse::IsInitialized() const {
  return true;
}

void KnowledgeGraphResponse::InternalSwap(KnowledgeGraphResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  domains_used_.InternalSwap(&other->domains_used_);
  session_.Swap(&other->session_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  device_id_.Swap(&other->device_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  query_text_.Swap(&other->query_text_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  spoken_text_.Swap(&other->spoken_text_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  command_type_.Swap(&other->command_type_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  audio_id_.Swap(&other->audio_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata KnowledgeGraphResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ConnectionCheckResponse::InitAsDefaultInstance() {
}
class ConnectionCheckResponse::_Internal {
 public:
};

ConnectionCheckResponse::ConnectionCheckResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:chippergrpc2.ConnectionCheckResponse)
}
ConnectionCheckResponse::ConnectionCheckResponse(const ConnectionCheckResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  status_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_status().empty()) {
    status_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_status(),
      GetArena());
  }
  frames_received_ = from.frames_received_;
  // @@protoc_insertion_point(copy_constructor:chippergrpc2.ConnectionCheckResponse)
}

void ConnectionCheckResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ConnectionCheckResponse_chipperpb_2eproto.base);
  status_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  frames_received_ = 0u;
}

ConnectionCheckResponse::~ConnectionCheckResponse() {
  // @@protoc_insertion_point(destructor:chippergrpc2.ConnectionCheckResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ConnectionCheckResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  status_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ConnectionCheckResponse::ArenaDtor(void* object) {
  ConnectionCheckResponse* _this = reinterpret_cast< ConnectionCheckResponse* >(object);
  (void)_this;
}
void ConnectionCheckResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ConnectionCheckResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ConnectionCheckResponse& ConnectionCheckResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ConnectionCheckResponse_chipperpb_2eproto.base);
  return *internal_default_instance();
}


void ConnectionCheckResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:chippergrpc2.ConnectionCheckResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  status_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  frames_received_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ConnectionCheckResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_status();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "chippergrpc2.ConnectionCheckResponse.status"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 frames_received = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          frames_received_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ConnectionCheckResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:chippergrpc2.ConnectionCheckResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string status = 1;
  if (this->status().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_status().data(), static_cast<int>(this->_internal_status().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "chippergrpc2.ConnectionCheckResponse.status");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_status(), target);
  }

  // uint32 frames_received = 2;
  if (this->frames_received() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_frames_received(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:chippergrpc2.ConnectionCheckResponse)
  return target;
}

size_t ConnectionCheckResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:chippergrpc2.ConnectionCheckResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string status = 1;
  if (this->status().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_status());
  }

  // uint32 frames_received = 2;
  if (this->frames_received() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_frames_received());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ConnectionCheckResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:chippergrpc2.ConnectionCheckResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const ConnectionCheckResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ConnectionCheckResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:chippergrpc2.ConnectionCheckResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:chippergrpc2.ConnectionCheckResponse)
    MergeFrom(*source);
  }
}

void ConnectionCheckResponse::MergeFrom(const ConnectionCheckResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:chippergrpc2.ConnectionCheckResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.status().size() > 0) {
    _internal_set_status(from._internal_status());
  }
  if (from.frames_received() != 0) {
    _internal_set_frames_received(from._internal_frames_received());
  }
}

void ConnectionCheckResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:chippergrpc2.ConnectionCheckResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConnectionCheckResponse::CopyFrom(const ConnectionCheckResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:chippergrpc2.ConnectionCheckResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConnectionCheckResponse::IsInitialized() const {
  return true;
}

void ConnectionCheckResponse::InternalSwap(ConnectionCheckResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  status_.Swap(&other->status_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(frames_received_, other->frames_received_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ConnectionCheckResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void WeatherLocation::InitAsDefaultInstance() {
}
class WeatherLocation::_Internal {
 public:
};

WeatherLocation::WeatherLocation(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:chippergrpc2.WeatherLocation)
}
WeatherLocation::WeatherLocation(const WeatherLocation& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  city_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_city().empty()) {
    city_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_city(),
      GetArena());
  }
  state_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_state().empty()) {
    state_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_state(),
      GetArena());
  }
  country_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_country().empty()) {
    country_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_country(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:chippergrpc2.WeatherLocation)
}

void WeatherLocation::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_WeatherLocation_chipperpb_2eproto.base);
  city_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  state_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  country_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

WeatherLocation::~WeatherLocation() {
  // @@protoc_insertion_point(destructor:chippergrpc2.WeatherLocation)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void WeatherLocation::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  city_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  state_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  country_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void WeatherLocation::ArenaDtor(void* object) {
  WeatherLocation* _this = reinterpret_cast< WeatherLocation* >(object);
  (void)_this;
}
void WeatherLocation::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void WeatherLocation::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const WeatherLocation& WeatherLocation::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_WeatherLocation_chipperpb_2eproto.base);
  return *internal_default_instance();
}


void WeatherLocation::Clear() {
// @@protoc_insertion_point(message_clear_start:chippergrpc2.WeatherLocation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  city_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  state_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  country_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* WeatherLocation::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string city = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_city();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "chippergrpc2.WeatherLocation.city"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string state = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_state();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "chippergrpc2.WeatherLocation.state"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string country = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_country();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "chippergrpc2.WeatherLocation.country"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* WeatherLocation::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:chippergrpc2.WeatherLocation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string city = 1;
  if (this->city().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_city().data(), static_cast<int>(this->_internal_city().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "chippergrpc2.WeatherLocation.city");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_city(), target);
  }

  // string state = 2;
  if (this->state().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_state().data(), static_cast<int>(this->_internal_state().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "chippergrpc2.WeatherLocation.state");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_state(), target);
  }

  // string country = 3;
  if (this->country().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_country().data(), static_cast<int>(this->_internal_country().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "chippergrpc2.WeatherLocation.country");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_country(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:chippergrpc2.WeatherLocation)
  return target;
}

size_t WeatherLocation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:chippergrpc2.WeatherLocation)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string city = 1;
  if (this->city().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_city());
  }

  // string state = 2;
  if (this->state().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_state());
  }

  // string country = 3;
  if (this->country().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_country());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void WeatherLocation::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:chippergrpc2.WeatherLocation)
  GOOGLE_DCHECK_NE(&from, this);
  const WeatherLocation* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<WeatherLocation>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:chippergrpc2.WeatherLocation)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:chippergrpc2.WeatherLocation)
    MergeFrom(*source);
  }
}

void WeatherLocation::MergeFrom(const WeatherLocation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:chippergrpc2.WeatherLocation)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.city().size() > 0) {
    _internal_set_city(from._internal_city());
  }
  if (from.state().size() > 0) {
    _internal_set_state(from._internal_state());
  }
  if (from.country().size() > 0) {
    _internal_set_country(from._internal_country());
  }
}

void WeatherLocation::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:chippergrpc2.WeatherLocation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WeatherLocation::CopyFrom(const WeatherLocation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:chippergrpc2.WeatherLocation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WeatherLocation::IsInitialized() const {
  return true;
}

void WeatherLocation::InternalSwap(WeatherLocation* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  city_.Swap(&other->city_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  state_.Swap(&other->state_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  country_.Swap(&other->country_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata WeatherLocation::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace chippergrpc2
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::chippergrpc2::TextRequest* Arena::CreateMaybeMessage< ::chippergrpc2::TextRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::chippergrpc2::TextRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::chippergrpc2::StreamingIntentRequest* Arena::CreateMaybeMessage< ::chippergrpc2::StreamingIntentRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::chippergrpc2::StreamingIntentRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::chippergrpc2::StreamingKnowledgeGraphRequest* Arena::CreateMaybeMessage< ::chippergrpc2::StreamingKnowledgeGraphRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::chippergrpc2::StreamingKnowledgeGraphRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::chippergrpc2::StreamingConnectionCheckRequest* Arena::CreateMaybeMessage< ::chippergrpc2::StreamingConnectionCheckRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::chippergrpc2::StreamingConnectionCheckRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::chippergrpc2::IntentResponse* Arena::CreateMaybeMessage< ::chippergrpc2::IntentResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::chippergrpc2::IntentResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::chippergrpc2::SpeechResult* Arena::CreateMaybeMessage< ::chippergrpc2::SpeechResult >(Arena* arena) {
  return Arena::CreateMessageInternal< ::chippergrpc2::SpeechResult >(arena);
}
template<> PROTOBUF_NOINLINE ::chippergrpc2::IntentResult_ParametersEntry_DoNotUse* Arena::CreateMaybeMessage< ::chippergrpc2::IntentResult_ParametersEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::chippergrpc2::IntentResult_ParametersEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::chippergrpc2::IntentResult* Arena::CreateMaybeMessage< ::chippergrpc2::IntentResult >(Arena* arena) {
  return Arena::CreateMessageInternal< ::chippergrpc2::IntentResult >(arena);
}
template<> PROTOBUF_NOINLINE ::chippergrpc2::KnowledgeGraphResponse* Arena::CreateMaybeMessage< ::chippergrpc2::KnowledgeGraphResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::chippergrpc2::KnowledgeGraphResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::chippergrpc2::ConnectionCheckResponse* Arena::CreateMaybeMessage< ::chippergrpc2::ConnectionCheckResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::chippergrpc2::ConnectionCheckResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::chippergrpc2::WeatherLocation* Arena::CreateMaybeMessage< ::chippergrpc2::WeatherLocation >(Arena* arena) {
  return Arena::CreateMessageInternal< ::chippergrpc2::WeatherLocation >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
