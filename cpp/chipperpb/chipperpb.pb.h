// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: chipperpb.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_chipperpb_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_chipperpb_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_chipperpb_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_chipperpb_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[11]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_chipperpb_2eproto;
namespace chippergrpc2 {
class ConnectionCheckResponse;
class ConnectionCheckResponseDefaultTypeInternal;
extern ConnectionCheckResponseDefaultTypeInternal _ConnectionCheckResponse_default_instance_;
class IntentResponse;
class IntentResponseDefaultTypeInternal;
extern IntentResponseDefaultTypeInternal _IntentResponse_default_instance_;
class IntentResult;
class IntentResultDefaultTypeInternal;
extern IntentResultDefaultTypeInternal _IntentResult_default_instance_;
class IntentResult_ParametersEntry_DoNotUse;
class IntentResult_ParametersEntry_DoNotUseDefaultTypeInternal;
extern IntentResult_ParametersEntry_DoNotUseDefaultTypeInternal _IntentResult_ParametersEntry_DoNotUse_default_instance_;
class KnowledgeGraphResponse;
class KnowledgeGraphResponseDefaultTypeInternal;
extern KnowledgeGraphResponseDefaultTypeInternal _KnowledgeGraphResponse_default_instance_;
class SpeechResult;
class SpeechResultDefaultTypeInternal;
extern SpeechResultDefaultTypeInternal _SpeechResult_default_instance_;
class StreamingConnectionCheckRequest;
class StreamingConnectionCheckRequestDefaultTypeInternal;
extern StreamingConnectionCheckRequestDefaultTypeInternal _StreamingConnectionCheckRequest_default_instance_;
class StreamingIntentRequest;
class StreamingIntentRequestDefaultTypeInternal;
extern StreamingIntentRequestDefaultTypeInternal _StreamingIntentRequest_default_instance_;
class StreamingKnowledgeGraphRequest;
class StreamingKnowledgeGraphRequestDefaultTypeInternal;
extern StreamingKnowledgeGraphRequestDefaultTypeInternal _StreamingKnowledgeGraphRequest_default_instance_;
class TextRequest;
class TextRequestDefaultTypeInternal;
extern TextRequestDefaultTypeInternal _TextRequest_default_instance_;
class WeatherLocation;
class WeatherLocationDefaultTypeInternal;
extern WeatherLocationDefaultTypeInternal _WeatherLocation_default_instance_;
}  // namespace chippergrpc2
PROTOBUF_NAMESPACE_OPEN
template<> ::chippergrpc2::ConnectionCheckResponse* Arena::CreateMaybeMessage<::chippergrpc2::ConnectionCheckResponse>(Arena*);
template<> ::chippergrpc2::IntentResponse* Arena::CreateMaybeMessage<::chippergrpc2::IntentResponse>(Arena*);
template<> ::chippergrpc2::IntentResult* Arena::CreateMaybeMessage<::chippergrpc2::IntentResult>(Arena*);
template<> ::chippergrpc2::IntentResult_ParametersEntry_DoNotUse* Arena::CreateMaybeMessage<::chippergrpc2::IntentResult_ParametersEntry_DoNotUse>(Arena*);
template<> ::chippergrpc2::KnowledgeGraphResponse* Arena::CreateMaybeMessage<::chippergrpc2::KnowledgeGraphResponse>(Arena*);
template<> ::chippergrpc2::SpeechResult* Arena::CreateMaybeMessage<::chippergrpc2::SpeechResult>(Arena*);
template<> ::chippergrpc2::StreamingConnectionCheckRequest* Arena::CreateMaybeMessage<::chippergrpc2::StreamingConnectionCheckRequest>(Arena*);
template<> ::chippergrpc2::StreamingIntentRequest* Arena::CreateMaybeMessage<::chippergrpc2::StreamingIntentRequest>(Arena*);
template<> ::chippergrpc2::StreamingKnowledgeGraphRequest* Arena::CreateMaybeMessage<::chippergrpc2::StreamingKnowledgeGraphRequest>(Arena*);
template<> ::chippergrpc2::TextRequest* Arena::CreateMaybeMessage<::chippergrpc2::TextRequest>(Arena*);
template<> ::chippergrpc2::WeatherLocation* Arena::CreateMaybeMessage<::chippergrpc2::WeatherLocation>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace chippergrpc2 {

enum LanguageCode : int {
  ENGLISH_US = 0,
  ENGLISH_UK = 1,
  ENGLISH_AU = 2,
  GERMAN = 3,
  FRENCH = 4,
  LanguageCode_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  LanguageCode_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool LanguageCode_IsValid(int value);
constexpr LanguageCode LanguageCode_MIN = ENGLISH_US;
constexpr LanguageCode LanguageCode_MAX = FRENCH;
constexpr int LanguageCode_ARRAYSIZE = LanguageCode_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* LanguageCode_descriptor();
template<typename T>
inline const std::string& LanguageCode_Name(T enum_t_value) {
  static_assert(::std::is_same<T, LanguageCode>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function LanguageCode_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    LanguageCode_descriptor(), enum_t_value);
}
inline bool LanguageCode_Parse(
    const std::string& name, LanguageCode* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<LanguageCode>(
    LanguageCode_descriptor(), name, value);
}
enum IntentService : int {
  DEFAULT = 0,
  DIALOGFLOW = 1,
  BING_LUIS = 2,
  LEX = 3,
  HOUNDIFY = 4,
  IntentService_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  IntentService_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool IntentService_IsValid(int value);
constexpr IntentService IntentService_MIN = DEFAULT;
constexpr IntentService IntentService_MAX = HOUNDIFY;
constexpr int IntentService_ARRAYSIZE = IntentService_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* IntentService_descriptor();
template<typename T>
inline const std::string& IntentService_Name(T enum_t_value) {
  static_assert(::std::is_same<T, IntentService>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function IntentService_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    IntentService_descriptor(), enum_t_value);
}
inline bool IntentService_Parse(
    const std::string& name, IntentService* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<IntentService>(
    IntentService_descriptor(), name, value);
}
enum AudioEncoding : int {
  LINEAR_PCM = 0,
  OGG_OPUS = 1,
  AudioEncoding_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  AudioEncoding_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool AudioEncoding_IsValid(int value);
constexpr AudioEncoding AudioEncoding_MIN = LINEAR_PCM;
constexpr AudioEncoding AudioEncoding_MAX = OGG_OPUS;
constexpr int AudioEncoding_ARRAYSIZE = AudioEncoding_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* AudioEncoding_descriptor();
template<typename T>
inline const std::string& AudioEncoding_Name(T enum_t_value) {
  static_assert(::std::is_same<T, AudioEncoding>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function AudioEncoding_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    AudioEncoding_descriptor(), enum_t_value);
}
inline bool AudioEncoding_Parse(
    const std::string& name, AudioEncoding* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<AudioEncoding>(
    AudioEncoding_descriptor(), name, value);
}
enum RobotMode : int {
  VOICE_COMMAND = 0,
  GAME = 1,
  RobotMode_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  RobotMode_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool RobotMode_IsValid(int value);
constexpr RobotMode RobotMode_MIN = VOICE_COMMAND;
constexpr RobotMode RobotMode_MAX = GAME;
constexpr int RobotMode_ARRAYSIZE = RobotMode_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* RobotMode_descriptor();
template<typename T>
inline const std::string& RobotMode_Name(T enum_t_value) {
  static_assert(::std::is_same<T, RobotMode>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function RobotMode_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    RobotMode_descriptor(), enum_t_value);
}
inline bool RobotMode_Parse(
    const std::string& name, RobotMode* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<RobotMode>(
    RobotMode_descriptor(), name, value);
}
// ===================================================================

class TextRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:chippergrpc2.TextRequest) */ {
 public:
  inline TextRequest() : TextRequest(nullptr) {};
  virtual ~TextRequest();

  TextRequest(const TextRequest& from);
  TextRequest(TextRequest&& from) noexcept
    : TextRequest() {
    *this = ::std::move(from);
  }

  inline TextRequest& operator=(const TextRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline TextRequest& operator=(TextRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TextRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TextRequest* internal_default_instance() {
    return reinterpret_cast<const TextRequest*>(
               &_TextRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(TextRequest& a, TextRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(TextRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TextRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TextRequest* New() const final {
    return CreateMaybeMessage<TextRequest>(nullptr);
  }

  TextRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TextRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TextRequest& from);
  void MergeFrom(const TextRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TextRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "chippergrpc2.TextRequest";
  }
  protected:
  explicit TextRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_chipperpb_2eproto);
    return ::descriptor_table_chipperpb_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSessionFieldNumber = 1,
    kDeviceIdFieldNumber = 2,
    kTextInputFieldNumber = 3,
    kFirmwareVersionFieldNumber = 6,
    kLanguageCodeFieldNumber = 4,
    kIntentServiceFieldNumber = 5,
    kModeFieldNumber = 7,
    kSkipDasFieldNumber = 8,
  };
  // string session = 1;
  void clear_session();
  const std::string& session() const;
  void set_session(const std::string& value);
  void set_session(std::string&& value);
  void set_session(const char* value);
  void set_session(const char* value, size_t size);
  std::string* mutable_session();
  std::string* release_session();
  void set_allocated_session(std::string* session);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_session();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_session(
      std::string* session);
  private:
  const std::string& _internal_session() const;
  void _internal_set_session(const std::string& value);
  std::string* _internal_mutable_session();
  public:

  // string device_id = 2;
  void clear_device_id();
  const std::string& device_id() const;
  void set_device_id(const std::string& value);
  void set_device_id(std::string&& value);
  void set_device_id(const char* value);
  void set_device_id(const char* value, size_t size);
  std::string* mutable_device_id();
  std::string* release_device_id();
  void set_allocated_device_id(std::string* device_id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_device_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_device_id(
      std::string* device_id);
  private:
  const std::string& _internal_device_id() const;
  void _internal_set_device_id(const std::string& value);
  std::string* _internal_mutable_device_id();
  public:

  // string text_input = 3;
  void clear_text_input();
  const std::string& text_input() const;
  void set_text_input(const std::string& value);
  void set_text_input(std::string&& value);
  void set_text_input(const char* value);
  void set_text_input(const char* value, size_t size);
  std::string* mutable_text_input();
  std::string* release_text_input();
  void set_allocated_text_input(std::string* text_input);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_text_input();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_text_input(
      std::string* text_input);
  private:
  const std::string& _internal_text_input() const;
  void _internal_set_text_input(const std::string& value);
  std::string* _internal_mutable_text_input();
  public:

  // string firmware_version = 6;
  void clear_firmware_version();
  const std::string& firmware_version() const;
  void set_firmware_version(const std::string& value);
  void set_firmware_version(std::string&& value);
  void set_firmware_version(const char* value);
  void set_firmware_version(const char* value, size_t size);
  std::string* mutable_firmware_version();
  std::string* release_firmware_version();
  void set_allocated_firmware_version(std::string* firmware_version);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_firmware_version();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_firmware_version(
      std::string* firmware_version);
  private:
  const std::string& _internal_firmware_version() const;
  void _internal_set_firmware_version(const std::string& value);
  std::string* _internal_mutable_firmware_version();
  public:

  // .chippergrpc2.LanguageCode language_code = 4;
  void clear_language_code();
  ::chippergrpc2::LanguageCode language_code() const;
  void set_language_code(::chippergrpc2::LanguageCode value);
  private:
  ::chippergrpc2::LanguageCode _internal_language_code() const;
  void _internal_set_language_code(::chippergrpc2::LanguageCode value);
  public:

  // .chippergrpc2.IntentService intent_service = 5;
  void clear_intent_service();
  ::chippergrpc2::IntentService intent_service() const;
  void set_intent_service(::chippergrpc2::IntentService value);
  private:
  ::chippergrpc2::IntentService _internal_intent_service() const;
  void _internal_set_intent_service(::chippergrpc2::IntentService value);
  public:

  // .chippergrpc2.RobotMode mode = 7;
  void clear_mode();
  ::chippergrpc2::RobotMode mode() const;
  void set_mode(::chippergrpc2::RobotMode value);
  private:
  ::chippergrpc2::RobotMode _internal_mode() const;
  void _internal_set_mode(::chippergrpc2::RobotMode value);
  public:

  // bool skip_das = 8;
  void clear_skip_das();
  bool skip_das() const;
  void set_skip_das(bool value);
  private:
  bool _internal_skip_das() const;
  void _internal_set_skip_das(bool value);
  public:

  // @@protoc_insertion_point(class_scope:chippergrpc2.TextRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr session_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr device_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr text_input_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr firmware_version_;
  int language_code_;
  int intent_service_;
  int mode_;
  bool skip_das_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_chipperpb_2eproto;
};
// -------------------------------------------------------------------

class StreamingIntentRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:chippergrpc2.StreamingIntentRequest) */ {
 public:
  inline StreamingIntentRequest() : StreamingIntentRequest(nullptr) {};
  virtual ~StreamingIntentRequest();

  StreamingIntentRequest(const StreamingIntentRequest& from);
  StreamingIntentRequest(StreamingIntentRequest&& from) noexcept
    : StreamingIntentRequest() {
    *this = ::std::move(from);
  }

  inline StreamingIntentRequest& operator=(const StreamingIntentRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline StreamingIntentRequest& operator=(StreamingIntentRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const StreamingIntentRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StreamingIntentRequest* internal_default_instance() {
    return reinterpret_cast<const StreamingIntentRequest*>(
               &_StreamingIntentRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(StreamingIntentRequest& a, StreamingIntentRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(StreamingIntentRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StreamingIntentRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StreamingIntentRequest* New() const final {
    return CreateMaybeMessage<StreamingIntentRequest>(nullptr);
  }

  StreamingIntentRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StreamingIntentRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StreamingIntentRequest& from);
  void MergeFrom(const StreamingIntentRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StreamingIntentRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "chippergrpc2.StreamingIntentRequest";
  }
  protected:
  explicit StreamingIntentRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_chipperpb_2eproto);
    return ::descriptor_table_chipperpb_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSessionFieldNumber = 1,
    kDeviceIdFieldNumber = 2,
    kInputAudioFieldNumber = 3,
    kFirmwareVersionFieldNumber = 6,
    kBootIdFieldNumber = 8,
    kAppKeyFieldNumber = 16,
    kLanguageCodeFieldNumber = 4,
    kModeFieldNumber = 7,
    kSpeechOnlyFieldNumber = 5,
    kSkipDasFieldNumber = 9,
    kSingleUtteranceFieldNumber = 14,
    kSaveAudioFieldNumber = 17,
    kAudioEncodingFieldNumber = 13,
    kIntentServiceFieldNumber = 15,
  };
  // string session = 1;
  void clear_session();
  const std::string& session() const;
  void set_session(const std::string& value);
  void set_session(std::string&& value);
  void set_session(const char* value);
  void set_session(const char* value, size_t size);
  std::string* mutable_session();
  std::string* release_session();
  void set_allocated_session(std::string* session);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_session();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_session(
      std::string* session);
  private:
  const std::string& _internal_session() const;
  void _internal_set_session(const std::string& value);
  std::string* _internal_mutable_session();
  public:

  // string device_id = 2;
  void clear_device_id();
  const std::string& device_id() const;
  void set_device_id(const std::string& value);
  void set_device_id(std::string&& value);
  void set_device_id(const char* value);
  void set_device_id(const char* value, size_t size);
  std::string* mutable_device_id();
  std::string* release_device_id();
  void set_allocated_device_id(std::string* device_id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_device_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_device_id(
      std::string* device_id);
  private:
  const std::string& _internal_device_id() const;
  void _internal_set_device_id(const std::string& value);
  std::string* _internal_mutable_device_id();
  public:

  // bytes input_audio = 3;
  void clear_input_audio();
  const std::string& input_audio() const;
  void set_input_audio(const std::string& value);
  void set_input_audio(std::string&& value);
  void set_input_audio(const char* value);
  void set_input_audio(const void* value, size_t size);
  std::string* mutable_input_audio();
  std::string* release_input_audio();
  void set_allocated_input_audio(std::string* input_audio);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_input_audio();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_input_audio(
      std::string* input_audio);
  private:
  const std::string& _internal_input_audio() const;
  void _internal_set_input_audio(const std::string& value);
  std::string* _internal_mutable_input_audio();
  public:

  // string firmware_version = 6;
  void clear_firmware_version();
  const std::string& firmware_version() const;
  void set_firmware_version(const std::string& value);
  void set_firmware_version(std::string&& value);
  void set_firmware_version(const char* value);
  void set_firmware_version(const char* value, size_t size);
  std::string* mutable_firmware_version();
  std::string* release_firmware_version();
  void set_allocated_firmware_version(std::string* firmware_version);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_firmware_version();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_firmware_version(
      std::string* firmware_version);
  private:
  const std::string& _internal_firmware_version() const;
  void _internal_set_firmware_version(const std::string& value);
  std::string* _internal_mutable_firmware_version();
  public:

  // string boot_id = 8;
  void clear_boot_id();
  const std::string& boot_id() const;
  void set_boot_id(const std::string& value);
  void set_boot_id(std::string&& value);
  void set_boot_id(const char* value);
  void set_boot_id(const char* value, size_t size);
  std::string* mutable_boot_id();
  std::string* release_boot_id();
  void set_allocated_boot_id(std::string* boot_id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_boot_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_boot_id(
      std::string* boot_id);
  private:
  const std::string& _internal_boot_id() const;
  void _internal_set_boot_id(const std::string& value);
  std::string* _internal_mutable_boot_id();
  public:

  // string app_key = 16;
  void clear_app_key();
  const std::string& app_key() const;
  void set_app_key(const std::string& value);
  void set_app_key(std::string&& value);
  void set_app_key(const char* value);
  void set_app_key(const char* value, size_t size);
  std::string* mutable_app_key();
  std::string* release_app_key();
  void set_allocated_app_key(std::string* app_key);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_app_key();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_app_key(
      std::string* app_key);
  private:
  const std::string& _internal_app_key() const;
  void _internal_set_app_key(const std::string& value);
  std::string* _internal_mutable_app_key();
  public:

  // .chippergrpc2.LanguageCode language_code = 4;
  void clear_language_code();
  ::chippergrpc2::LanguageCode language_code() const;
  void set_language_code(::chippergrpc2::LanguageCode value);
  private:
  ::chippergrpc2::LanguageCode _internal_language_code() const;
  void _internal_set_language_code(::chippergrpc2::LanguageCode value);
  public:

  // .chippergrpc2.RobotMode mode = 7;
  void clear_mode();
  ::chippergrpc2::RobotMode mode() const;
  void set_mode(::chippergrpc2::RobotMode value);
  private:
  ::chippergrpc2::RobotMode _internal_mode() const;
  void _internal_set_mode(::chippergrpc2::RobotMode value);
  public:

  // bool speech_only = 5;
  void clear_speech_only();
  bool speech_only() const;
  void set_speech_only(bool value);
  private:
  bool _internal_speech_only() const;
  void _internal_set_speech_only(bool value);
  public:

  // bool skip_das = 9;
  void clear_skip_das();
  bool skip_das() const;
  void set_skip_das(bool value);
  private:
  bool _internal_skip_das() const;
  void _internal_set_skip_das(bool value);
  public:

  // bool single_utterance = 14;
  void clear_single_utterance();
  bool single_utterance() const;
  void set_single_utterance(bool value);
  private:
  bool _internal_single_utterance() const;
  void _internal_set_single_utterance(bool value);
  public:

  // bool save_audio = 17;
  void clear_save_audio();
  bool save_audio() const;
  void set_save_audio(bool value);
  private:
  bool _internal_save_audio() const;
  void _internal_set_save_audio(bool value);
  public:

  // .chippergrpc2.AudioEncoding audio_encoding = 13;
  void clear_audio_encoding();
  ::chippergrpc2::AudioEncoding audio_encoding() const;
  void set_audio_encoding(::chippergrpc2::AudioEncoding value);
  private:
  ::chippergrpc2::AudioEncoding _internal_audio_encoding() const;
  void _internal_set_audio_encoding(::chippergrpc2::AudioEncoding value);
  public:

  // .chippergrpc2.IntentService intent_service = 15;
  void clear_intent_service();
  ::chippergrpc2::IntentService intent_service() const;
  void set_intent_service(::chippergrpc2::IntentService value);
  private:
  ::chippergrpc2::IntentService _internal_intent_service() const;
  void _internal_set_intent_service(::chippergrpc2::IntentService value);
  public:

  // @@protoc_insertion_point(class_scope:chippergrpc2.StreamingIntentRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr session_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr device_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr input_audio_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr firmware_version_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr boot_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr app_key_;
  int language_code_;
  int mode_;
  bool speech_only_;
  bool skip_das_;
  bool single_utterance_;
  bool save_audio_;
  int audio_encoding_;
  int intent_service_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_chipperpb_2eproto;
};
// -------------------------------------------------------------------

class StreamingKnowledgeGraphRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:chippergrpc2.StreamingKnowledgeGraphRequest) */ {
 public:
  inline StreamingKnowledgeGraphRequest() : StreamingKnowledgeGraphRequest(nullptr) {};
  virtual ~StreamingKnowledgeGraphRequest();

  StreamingKnowledgeGraphRequest(const StreamingKnowledgeGraphRequest& from);
  StreamingKnowledgeGraphRequest(StreamingKnowledgeGraphRequest&& from) noexcept
    : StreamingKnowledgeGraphRequest() {
    *this = ::std::move(from);
  }

  inline StreamingKnowledgeGraphRequest& operator=(const StreamingKnowledgeGraphRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline StreamingKnowledgeGraphRequest& operator=(StreamingKnowledgeGraphRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const StreamingKnowledgeGraphRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StreamingKnowledgeGraphRequest* internal_default_instance() {
    return reinterpret_cast<const StreamingKnowledgeGraphRequest*>(
               &_StreamingKnowledgeGraphRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(StreamingKnowledgeGraphRequest& a, StreamingKnowledgeGraphRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(StreamingKnowledgeGraphRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StreamingKnowledgeGraphRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StreamingKnowledgeGraphRequest* New() const final {
    return CreateMaybeMessage<StreamingKnowledgeGraphRequest>(nullptr);
  }

  StreamingKnowledgeGraphRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StreamingKnowledgeGraphRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StreamingKnowledgeGraphRequest& from);
  void MergeFrom(const StreamingKnowledgeGraphRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StreamingKnowledgeGraphRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "chippergrpc2.StreamingKnowledgeGraphRequest";
  }
  protected:
  explicit StreamingKnowledgeGraphRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_chipperpb_2eproto);
    return ::descriptor_table_chipperpb_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSessionFieldNumber = 1,
    kDeviceIdFieldNumber = 2,
    kInputAudioFieldNumber = 3,
    kFirmwareVersionFieldNumber = 5,
    kAppKeyFieldNumber = 7,
    kBootIdFieldNumber = 9,
    kTimezoneFieldNumber = 11,
    kLanguageCodeFieldNumber = 4,
    kAudioEncodingFieldNumber = 6,
    kSaveAudioFieldNumber = 8,
    kSkipDasFieldNumber = 10,
  };
  // string session = 1;
  void clear_session();
  const std::string& session() const;
  void set_session(const std::string& value);
  void set_session(std::string&& value);
  void set_session(const char* value);
  void set_session(const char* value, size_t size);
  std::string* mutable_session();
  std::string* release_session();
  void set_allocated_session(std::string* session);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_session();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_session(
      std::string* session);
  private:
  const std::string& _internal_session() const;
  void _internal_set_session(const std::string& value);
  std::string* _internal_mutable_session();
  public:

  // string device_id = 2;
  void clear_device_id();
  const std::string& device_id() const;
  void set_device_id(const std::string& value);
  void set_device_id(std::string&& value);
  void set_device_id(const char* value);
  void set_device_id(const char* value, size_t size);
  std::string* mutable_device_id();
  std::string* release_device_id();
  void set_allocated_device_id(std::string* device_id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_device_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_device_id(
      std::string* device_id);
  private:
  const std::string& _internal_device_id() const;
  void _internal_set_device_id(const std::string& value);
  std::string* _internal_mutable_device_id();
  public:

  // bytes input_audio = 3;
  void clear_input_audio();
  const std::string& input_audio() const;
  void set_input_audio(const std::string& value);
  void set_input_audio(std::string&& value);
  void set_input_audio(const char* value);
  void set_input_audio(const void* value, size_t size);
  std::string* mutable_input_audio();
  std::string* release_input_audio();
  void set_allocated_input_audio(std::string* input_audio);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_input_audio();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_input_audio(
      std::string* input_audio);
  private:
  const std::string& _internal_input_audio() const;
  void _internal_set_input_audio(const std::string& value);
  std::string* _internal_mutable_input_audio();
  public:

  // string firmware_version = 5;
  void clear_firmware_version();
  const std::string& firmware_version() const;
  void set_firmware_version(const std::string& value);
  void set_firmware_version(std::string&& value);
  void set_firmware_version(const char* value);
  void set_firmware_version(const char* value, size_t size);
  std::string* mutable_firmware_version();
  std::string* release_firmware_version();
  void set_allocated_firmware_version(std::string* firmware_version);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_firmware_version();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_firmware_version(
      std::string* firmware_version);
  private:
  const std::string& _internal_firmware_version() const;
  void _internal_set_firmware_version(const std::string& value);
  std::string* _internal_mutable_firmware_version();
  public:

  // string app_key = 7;
  void clear_app_key();
  const std::string& app_key() const;
  void set_app_key(const std::string& value);
  void set_app_key(std::string&& value);
  void set_app_key(const char* value);
  void set_app_key(const char* value, size_t size);
  std::string* mutable_app_key();
  std::string* release_app_key();
  void set_allocated_app_key(std::string* app_key);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_app_key();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_app_key(
      std::string* app_key);
  private:
  const std::string& _internal_app_key() const;
  void _internal_set_app_key(const std::string& value);
  std::string* _internal_mutable_app_key();
  public:

  // string boot_id = 9;
  void clear_boot_id();
  const std::string& boot_id() const;
  void set_boot_id(const std::string& value);
  void set_boot_id(std::string&& value);
  void set_boot_id(const char* value);
  void set_boot_id(const char* value, size_t size);
  std::string* mutable_boot_id();
  std::string* release_boot_id();
  void set_allocated_boot_id(std::string* boot_id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_boot_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_boot_id(
      std::string* boot_id);
  private:
  const std::string& _internal_boot_id() const;
  void _internal_set_boot_id(const std::string& value);
  std::string* _internal_mutable_boot_id();
  public:

  // string timezone = 11;
  void clear_timezone();
  const std::string& timezone() const;
  void set_timezone(const std::string& value);
  void set_timezone(std::string&& value);
  void set_timezone(const char* value);
  void set_timezone(const char* value, size_t size);
  std::string* mutable_timezone();
  std::string* release_timezone();
  void set_allocated_timezone(std::string* timezone);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_timezone();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_timezone(
      std::string* timezone);
  private:
  const std::string& _internal_timezone() const;
  void _internal_set_timezone(const std::string& value);
  std::string* _internal_mutable_timezone();
  public:

  // .chippergrpc2.LanguageCode language_code = 4;
  void clear_language_code();
  ::chippergrpc2::LanguageCode language_code() const;
  void set_language_code(::chippergrpc2::LanguageCode value);
  private:
  ::chippergrpc2::LanguageCode _internal_language_code() const;
  void _internal_set_language_code(::chippergrpc2::LanguageCode value);
  public:

  // .chippergrpc2.AudioEncoding audio_encoding = 6;
  void clear_audio_encoding();
  ::chippergrpc2::AudioEncoding audio_encoding() const;
  void set_audio_encoding(::chippergrpc2::AudioEncoding value);
  private:
  ::chippergrpc2::AudioEncoding _internal_audio_encoding() const;
  void _internal_set_audio_encoding(::chippergrpc2::AudioEncoding value);
  public:

  // bool save_audio = 8;
  void clear_save_audio();
  bool save_audio() const;
  void set_save_audio(bool value);
  private:
  bool _internal_save_audio() const;
  void _internal_set_save_audio(bool value);
  public:

  // bool skip_das = 10;
  void clear_skip_das();
  bool skip_das() const;
  void set_skip_das(bool value);
  private:
  bool _internal_skip_das() const;
  void _internal_set_skip_das(bool value);
  public:

  // @@protoc_insertion_point(class_scope:chippergrpc2.StreamingKnowledgeGraphRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr session_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr device_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr input_audio_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr firmware_version_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr app_key_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr boot_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr timezone_;
  int language_code_;
  int audio_encoding_;
  bool save_audio_;
  bool skip_das_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_chipperpb_2eproto;
};
// -------------------------------------------------------------------

class StreamingConnectionCheckRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:chippergrpc2.StreamingConnectionCheckRequest) */ {
 public:
  inline StreamingConnectionCheckRequest() : StreamingConnectionCheckRequest(nullptr) {};
  virtual ~StreamingConnectionCheckRequest();

  StreamingConnectionCheckRequest(const StreamingConnectionCheckRequest& from);
  StreamingConnectionCheckRequest(StreamingConnectionCheckRequest&& from) noexcept
    : StreamingConnectionCheckRequest() {
    *this = ::std::move(from);
  }

  inline StreamingConnectionCheckRequest& operator=(const StreamingConnectionCheckRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline StreamingConnectionCheckRequest& operator=(StreamingConnectionCheckRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const StreamingConnectionCheckRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StreamingConnectionCheckRequest* internal_default_instance() {
    return reinterpret_cast<const StreamingConnectionCheckRequest*>(
               &_StreamingConnectionCheckRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(StreamingConnectionCheckRequest& a, StreamingConnectionCheckRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(StreamingConnectionCheckRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StreamingConnectionCheckRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StreamingConnectionCheckRequest* New() const final {
    return CreateMaybeMessage<StreamingConnectionCheckRequest>(nullptr);
  }

  StreamingConnectionCheckRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StreamingConnectionCheckRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StreamingConnectionCheckRequest& from);
  void MergeFrom(const StreamingConnectionCheckRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StreamingConnectionCheckRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "chippergrpc2.StreamingConnectionCheckRequest";
  }
  protected:
  explicit StreamingConnectionCheckRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_chipperpb_2eproto);
    return ::descriptor_table_chipperpb_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSessionFieldNumber = 1,
    kDeviceIdFieldNumber = 2,
    kInputAudioFieldNumber = 3,
    kFirmwareVersionFieldNumber = 4,
    kAppKeyFieldNumber = 5,
    kTotalAudioMsFieldNumber = 6,
    kAudioPerRequestFieldNumber = 7,
  };
  // string session = 1;
  void clear_session();
  const std::string& session() const;
  void set_session(const std::string& value);
  void set_session(std::string&& value);
  void set_session(const char* value);
  void set_session(const char* value, size_t size);
  std::string* mutable_session();
  std::string* release_session();
  void set_allocated_session(std::string* session);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_session();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_session(
      std::string* session);
  private:
  const std::string& _internal_session() const;
  void _internal_set_session(const std::string& value);
  std::string* _internal_mutable_session();
  public:

  // string device_id = 2;
  void clear_device_id();
  const std::string& device_id() const;
  void set_device_id(const std::string& value);
  void set_device_id(std::string&& value);
  void set_device_id(const char* value);
  void set_device_id(const char* value, size_t size);
  std::string* mutable_device_id();
  std::string* release_device_id();
  void set_allocated_device_id(std::string* device_id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_device_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_device_id(
      std::string* device_id);
  private:
  const std::string& _internal_device_id() const;
  void _internal_set_device_id(const std::string& value);
  std::string* _internal_mutable_device_id();
  public:

  // bytes input_audio = 3;
  void clear_input_audio();
  const std::string& input_audio() const;
  void set_input_audio(const std::string& value);
  void set_input_audio(std::string&& value);
  void set_input_audio(const char* value);
  void set_input_audio(const void* value, size_t size);
  std::string* mutable_input_audio();
  std::string* release_input_audio();
  void set_allocated_input_audio(std::string* input_audio);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_input_audio();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_input_audio(
      std::string* input_audio);
  private:
  const std::string& _internal_input_audio() const;
  void _internal_set_input_audio(const std::string& value);
  std::string* _internal_mutable_input_audio();
  public:

  // string firmware_version = 4;
  void clear_firmware_version();
  const std::string& firmware_version() const;
  void set_firmware_version(const std::string& value);
  void set_firmware_version(std::string&& value);
  void set_firmware_version(const char* value);
  void set_firmware_version(const char* value, size_t size);
  std::string* mutable_firmware_version();
  std::string* release_firmware_version();
  void set_allocated_firmware_version(std::string* firmware_version);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_firmware_version();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_firmware_version(
      std::string* firmware_version);
  private:
  const std::string& _internal_firmware_version() const;
  void _internal_set_firmware_version(const std::string& value);
  std::string* _internal_mutable_firmware_version();
  public:

  // string app_key = 5;
  void clear_app_key();
  const std::string& app_key() const;
  void set_app_key(const std::string& value);
  void set_app_key(std::string&& value);
  void set_app_key(const char* value);
  void set_app_key(const char* value, size_t size);
  std::string* mutable_app_key();
  std::string* release_app_key();
  void set_allocated_app_key(std::string* app_key);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_app_key();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_app_key(
      std::string* app_key);
  private:
  const std::string& _internal_app_key() const;
  void _internal_set_app_key(const std::string& value);
  std::string* _internal_mutable_app_key();
  public:

  // uint32 total_audio_ms = 6;
  void clear_total_audio_ms();
  ::PROTOBUF_NAMESPACE_ID::uint32 total_audio_ms() const;
  void set_total_audio_ms(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_total_audio_ms() const;
  void _internal_set_total_audio_ms(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 audio_per_request = 7;
  void clear_audio_per_request();
  ::PROTOBUF_NAMESPACE_ID::uint32 audio_per_request() const;
  void set_audio_per_request(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_audio_per_request() const;
  void _internal_set_audio_per_request(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:chippergrpc2.StreamingConnectionCheckRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr session_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr device_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr input_audio_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr firmware_version_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr app_key_;
  ::PROTOBUF_NAMESPACE_ID::uint32 total_audio_ms_;
  ::PROTOBUF_NAMESPACE_ID::uint32 audio_per_request_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_chipperpb_2eproto;
};
// -------------------------------------------------------------------

class IntentResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:chippergrpc2.IntentResponse) */ {
 public:
  inline IntentResponse() : IntentResponse(nullptr) {};
  virtual ~IntentResponse();

  IntentResponse(const IntentResponse& from);
  IntentResponse(IntentResponse&& from) noexcept
    : IntentResponse() {
    *this = ::std::move(from);
  }

  inline IntentResponse& operator=(const IntentResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline IntentResponse& operator=(IntentResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const IntentResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const IntentResponse* internal_default_instance() {
    return reinterpret_cast<const IntentResponse*>(
               &_IntentResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(IntentResponse& a, IntentResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(IntentResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(IntentResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline IntentResponse* New() const final {
    return CreateMaybeMessage<IntentResponse>(nullptr);
  }

  IntentResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<IntentResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const IntentResponse& from);
  void MergeFrom(const IntentResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IntentResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "chippergrpc2.IntentResponse";
  }
  protected:
  explicit IntentResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_chipperpb_2eproto);
    return ::descriptor_table_chipperpb_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSessionFieldNumber = 1,
    kDeviceIdFieldNumber = 2,
    kAudioIdFieldNumber = 16,
    kIntentResultFieldNumber = 4,
    kSpeechResultFieldNumber = 5,
    kIsFinalFieldNumber = 3,
    kModeFieldNumber = 6,
  };
  // string session = 1;
  void clear_session();
  const std::string& session() const;
  void set_session(const std::string& value);
  void set_session(std::string&& value);
  void set_session(const char* value);
  void set_session(const char* value, size_t size);
  std::string* mutable_session();
  std::string* release_session();
  void set_allocated_session(std::string* session);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_session();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_session(
      std::string* session);
  private:
  const std::string& _internal_session() const;
  void _internal_set_session(const std::string& value);
  std::string* _internal_mutable_session();
  public:

  // string device_id = 2;
  void clear_device_id();
  const std::string& device_id() const;
  void set_device_id(const std::string& value);
  void set_device_id(std::string&& value);
  void set_device_id(const char* value);
  void set_device_id(const char* value, size_t size);
  std::string* mutable_device_id();
  std::string* release_device_id();
  void set_allocated_device_id(std::string* device_id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_device_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_device_id(
      std::string* device_id);
  private:
  const std::string& _internal_device_id() const;
  void _internal_set_device_id(const std::string& value);
  std::string* _internal_mutable_device_id();
  public:

  // string audio_id = 16;
  void clear_audio_id();
  const std::string& audio_id() const;
  void set_audio_id(const std::string& value);
  void set_audio_id(std::string&& value);
  void set_audio_id(const char* value);
  void set_audio_id(const char* value, size_t size);
  std::string* mutable_audio_id();
  std::string* release_audio_id();
  void set_allocated_audio_id(std::string* audio_id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_audio_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_audio_id(
      std::string* audio_id);
  private:
  const std::string& _internal_audio_id() const;
  void _internal_set_audio_id(const std::string& value);
  std::string* _internal_mutable_audio_id();
  public:

  // .chippergrpc2.IntentResult intent_result = 4;
  bool has_intent_result() const;
  private:
  bool _internal_has_intent_result() const;
  public:
  void clear_intent_result();
  const ::chippergrpc2::IntentResult& intent_result() const;
  ::chippergrpc2::IntentResult* release_intent_result();
  ::chippergrpc2::IntentResult* mutable_intent_result();
  void set_allocated_intent_result(::chippergrpc2::IntentResult* intent_result);
  private:
  const ::chippergrpc2::IntentResult& _internal_intent_result() const;
  ::chippergrpc2::IntentResult* _internal_mutable_intent_result();
  public:
  void unsafe_arena_set_allocated_intent_result(
      ::chippergrpc2::IntentResult* intent_result);
  ::chippergrpc2::IntentResult* unsafe_arena_release_intent_result();

  // .chippergrpc2.SpeechResult speech_result = 5;
  bool has_speech_result() const;
  private:
  bool _internal_has_speech_result() const;
  public:
  void clear_speech_result();
  const ::chippergrpc2::SpeechResult& speech_result() const;
  ::chippergrpc2::SpeechResult* release_speech_result();
  ::chippergrpc2::SpeechResult* mutable_speech_result();
  void set_allocated_speech_result(::chippergrpc2::SpeechResult* speech_result);
  private:
  const ::chippergrpc2::SpeechResult& _internal_speech_result() const;
  ::chippergrpc2::SpeechResult* _internal_mutable_speech_result();
  public:
  void unsafe_arena_set_allocated_speech_result(
      ::chippergrpc2::SpeechResult* speech_result);
  ::chippergrpc2::SpeechResult* unsafe_arena_release_speech_result();

  // bool is_final = 3;
  void clear_is_final();
  bool is_final() const;
  void set_is_final(bool value);
  private:
  bool _internal_is_final() const;
  void _internal_set_is_final(bool value);
  public:

  // .chippergrpc2.RobotMode mode = 6;
  void clear_mode();
  ::chippergrpc2::RobotMode mode() const;
  void set_mode(::chippergrpc2::RobotMode value);
  private:
  ::chippergrpc2::RobotMode _internal_mode() const;
  void _internal_set_mode(::chippergrpc2::RobotMode value);
  public:

  // @@protoc_insertion_point(class_scope:chippergrpc2.IntentResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr session_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr device_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr audio_id_;
  ::chippergrpc2::IntentResult* intent_result_;
  ::chippergrpc2::SpeechResult* speech_result_;
  bool is_final_;
  int mode_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_chipperpb_2eproto;
};
// -------------------------------------------------------------------

class SpeechResult PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:chippergrpc2.SpeechResult) */ {
 public:
  inline SpeechResult() : SpeechResult(nullptr) {};
  virtual ~SpeechResult();

  SpeechResult(const SpeechResult& from);
  SpeechResult(SpeechResult&& from) noexcept
    : SpeechResult() {
    *this = ::std::move(from);
  }

  inline SpeechResult& operator=(const SpeechResult& from) {
    CopyFrom(from);
    return *this;
  }
  inline SpeechResult& operator=(SpeechResult&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SpeechResult& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SpeechResult* internal_default_instance() {
    return reinterpret_cast<const SpeechResult*>(
               &_SpeechResult_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(SpeechResult& a, SpeechResult& b) {
    a.Swap(&b);
  }
  inline void Swap(SpeechResult* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SpeechResult* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SpeechResult* New() const final {
    return CreateMaybeMessage<SpeechResult>(nullptr);
  }

  SpeechResult* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SpeechResult>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SpeechResult& from);
  void MergeFrom(const SpeechResult& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SpeechResult* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "chippergrpc2.SpeechResult";
  }
  protected:
  explicit SpeechResult(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_chipperpb_2eproto);
    return ::descriptor_table_chipperpb_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTranscriptFieldNumber = 1,
    kIsFinalFieldNumber = 2,
  };
  // string transcript = 1;
  void clear_transcript();
  const std::string& transcript() const;
  void set_transcript(const std::string& value);
  void set_transcript(std::string&& value);
  void set_transcript(const char* value);
  void set_transcript(const char* value, size_t size);
  std::string* mutable_transcript();
  std::string* release_transcript();
  void set_allocated_transcript(std::string* transcript);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_transcript();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_transcript(
      std::string* transcript);
  private:
  const std::string& _internal_transcript() const;
  void _internal_set_transcript(const std::string& value);
  std::string* _internal_mutable_transcript();
  public:

  // bool is_final = 2;
  void clear_is_final();
  bool is_final() const;
  void set_is_final(bool value);
  private:
  bool _internal_is_final() const;
  void _internal_set_is_final(bool value);
  public:

  // @@protoc_insertion_point(class_scope:chippergrpc2.SpeechResult)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr transcript_;
  bool is_final_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_chipperpb_2eproto;
};
// -------------------------------------------------------------------

class IntentResult_ParametersEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<IntentResult_ParametersEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<IntentResult_ParametersEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    0 > SuperType;
  IntentResult_ParametersEntry_DoNotUse();
  IntentResult_ParametersEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const IntentResult_ParametersEntry_DoNotUse& other);
  static const IntentResult_ParametersEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const IntentResult_ParametersEntry_DoNotUse*>(&_IntentResult_ParametersEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "chippergrpc2.IntentResult.ParametersEntry.key");
 }
  static bool ValidateValue(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "chippergrpc2.IntentResult.ParametersEntry.value");
 }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_chipperpb_2eproto);
    return ::descriptor_table_chipperpb_2eproto.file_level_metadata[6];
  }

  public:
};

// -------------------------------------------------------------------

class IntentResult PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:chippergrpc2.IntentResult) */ {
 public:
  inline IntentResult() : IntentResult(nullptr) {};
  virtual ~IntentResult();

  IntentResult(const IntentResult& from);
  IntentResult(IntentResult&& from) noexcept
    : IntentResult() {
    *this = ::std::move(from);
  }

  inline IntentResult& operator=(const IntentResult& from) {
    CopyFrom(from);
    return *this;
  }
  inline IntentResult& operator=(IntentResult&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const IntentResult& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const IntentResult* internal_default_instance() {
    return reinterpret_cast<const IntentResult*>(
               &_IntentResult_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(IntentResult& a, IntentResult& b) {
    a.Swap(&b);
  }
  inline void Swap(IntentResult* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(IntentResult* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline IntentResult* New() const final {
    return CreateMaybeMessage<IntentResult>(nullptr);
  }

  IntentResult* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<IntentResult>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const IntentResult& from);
  void MergeFrom(const IntentResult& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IntentResult* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "chippergrpc2.IntentResult";
  }
  protected:
  explicit IntentResult(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_chipperpb_2eproto);
    return ::descriptor_table_chipperpb_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kParametersFieldNumber = 5,
    kQueryTextFieldNumber = 1,
    kActionFieldNumber = 2,
    kKgresponseFieldNumber = 9,
    kIntentConfidenceFieldNumber = 3,
    kSpeechConfidenceFieldNumber = 4,
    kAllParametersPresentFieldNumber = 6,
    kHasContextFieldNumber = 7,
    kServiceFieldNumber = 8,
  };
  // map<string, string> parameters = 5;
  int parameters_size() const;
  private:
  int _internal_parameters_size() const;
  public:
  void clear_parameters();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      _internal_parameters() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      _internal_mutable_parameters();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      parameters() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      mutable_parameters();

  // string query_text = 1;
  void clear_query_text();
  const std::string& query_text() const;
  void set_query_text(const std::string& value);
  void set_query_text(std::string&& value);
  void set_query_text(const char* value);
  void set_query_text(const char* value, size_t size);
  std::string* mutable_query_text();
  std::string* release_query_text();
  void set_allocated_query_text(std::string* query_text);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_query_text();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_query_text(
      std::string* query_text);
  private:
  const std::string& _internal_query_text() const;
  void _internal_set_query_text(const std::string& value);
  std::string* _internal_mutable_query_text();
  public:

  // string action = 2;
  void clear_action();
  const std::string& action() const;
  void set_action(const std::string& value);
  void set_action(std::string&& value);
  void set_action(const char* value);
  void set_action(const char* value, size_t size);
  std::string* mutable_action();
  std::string* release_action();
  void set_allocated_action(std::string* action);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_action();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_action(
      std::string* action);
  private:
  const std::string& _internal_action() const;
  void _internal_set_action(const std::string& value);
  std::string* _internal_mutable_action();
  public:

  // .chippergrpc2.KnowledgeGraphResponse kgresponse = 9;
  bool has_kgresponse() const;
  private:
  bool _internal_has_kgresponse() const;
  public:
  void clear_kgresponse();
  const ::chippergrpc2::KnowledgeGraphResponse& kgresponse() const;
  ::chippergrpc2::KnowledgeGraphResponse* release_kgresponse();
  ::chippergrpc2::KnowledgeGraphResponse* mutable_kgresponse();
  void set_allocated_kgresponse(::chippergrpc2::KnowledgeGraphResponse* kgresponse);
  private:
  const ::chippergrpc2::KnowledgeGraphResponse& _internal_kgresponse() const;
  ::chippergrpc2::KnowledgeGraphResponse* _internal_mutable_kgresponse();
  public:
  void unsafe_arena_set_allocated_kgresponse(
      ::chippergrpc2::KnowledgeGraphResponse* kgresponse);
  ::chippergrpc2::KnowledgeGraphResponse* unsafe_arena_release_kgresponse();

  // float intent_confidence = 3;
  void clear_intent_confidence();
  float intent_confidence() const;
  void set_intent_confidence(float value);
  private:
  float _internal_intent_confidence() const;
  void _internal_set_intent_confidence(float value);
  public:

  // float speech_confidence = 4;
  void clear_speech_confidence();
  float speech_confidence() const;
  void set_speech_confidence(float value);
  private:
  float _internal_speech_confidence() const;
  void _internal_set_speech_confidence(float value);
  public:

  // bool all_parameters_present = 6;
  void clear_all_parameters_present();
  bool all_parameters_present() const;
  void set_all_parameters_present(bool value);
  private:
  bool _internal_all_parameters_present() const;
  void _internal_set_all_parameters_present(bool value);
  public:

  // bool has_context = 7;
  void clear_has_context();
  bool has_context() const;
  void set_has_context(bool value);
  private:
  bool _internal_has_context() const;
  void _internal_set_has_context(bool value);
  public:

  // .chippergrpc2.IntentService service = 8;
  void clear_service();
  ::chippergrpc2::IntentService service() const;
  void set_service(::chippergrpc2::IntentService value);
  private:
  ::chippergrpc2::IntentService _internal_service() const;
  void _internal_set_service(::chippergrpc2::IntentService value);
  public:

  // @@protoc_insertion_point(class_scope:chippergrpc2.IntentResult)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      IntentResult_ParametersEntry_DoNotUse,
      std::string, std::string,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      0 > parameters_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr query_text_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr action_;
  ::chippergrpc2::KnowledgeGraphResponse* kgresponse_;
  float intent_confidence_;
  float speech_confidence_;
  bool all_parameters_present_;
  bool has_context_;
  int service_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_chipperpb_2eproto;
};
// -------------------------------------------------------------------

class KnowledgeGraphResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:chippergrpc2.KnowledgeGraphResponse) */ {
 public:
  inline KnowledgeGraphResponse() : KnowledgeGraphResponse(nullptr) {};
  virtual ~KnowledgeGraphResponse();

  KnowledgeGraphResponse(const KnowledgeGraphResponse& from);
  KnowledgeGraphResponse(KnowledgeGraphResponse&& from) noexcept
    : KnowledgeGraphResponse() {
    *this = ::std::move(from);
  }

  inline KnowledgeGraphResponse& operator=(const KnowledgeGraphResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline KnowledgeGraphResponse& operator=(KnowledgeGraphResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const KnowledgeGraphResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const KnowledgeGraphResponse* internal_default_instance() {
    return reinterpret_cast<const KnowledgeGraphResponse*>(
               &_KnowledgeGraphResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(KnowledgeGraphResponse& a, KnowledgeGraphResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(KnowledgeGraphResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(KnowledgeGraphResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline KnowledgeGraphResponse* New() const final {
    return CreateMaybeMessage<KnowledgeGraphResponse>(nullptr);
  }

  KnowledgeGraphResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<KnowledgeGraphResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const KnowledgeGraphResponse& from);
  void MergeFrom(const KnowledgeGraphResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(KnowledgeGraphResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "chippergrpc2.KnowledgeGraphResponse";
  }
  protected:
  explicit KnowledgeGraphResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_chipperpb_2eproto);
    return ::descriptor_table_chipperpb_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDomainsUsedFieldNumber = 6,
    kSessionFieldNumber = 1,
    kDeviceIdFieldNumber = 2,
    kQueryTextFieldNumber = 3,
    kSpokenTextFieldNumber = 4,
    kCommandTypeFieldNumber = 5,
    kAudioIdFieldNumber = 7,
  };
  // repeated string domains_used = 6;
  int domains_used_size() const;
  private:
  int _internal_domains_used_size() const;
  public:
  void clear_domains_used();
  const std::string& domains_used(int index) const;
  std::string* mutable_domains_used(int index);
  void set_domains_used(int index, const std::string& value);
  void set_domains_used(int index, std::string&& value);
  void set_domains_used(int index, const char* value);
  void set_domains_used(int index, const char* value, size_t size);
  std::string* add_domains_used();
  void add_domains_used(const std::string& value);
  void add_domains_used(std::string&& value);
  void add_domains_used(const char* value);
  void add_domains_used(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& domains_used() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_domains_used();
  private:
  const std::string& _internal_domains_used(int index) const;
  std::string* _internal_add_domains_used();
  public:

  // string session = 1;
  void clear_session();
  const std::string& session() const;
  void set_session(const std::string& value);
  void set_session(std::string&& value);
  void set_session(const char* value);
  void set_session(const char* value, size_t size);
  std::string* mutable_session();
  std::string* release_session();
  void set_allocated_session(std::string* session);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_session();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_session(
      std::string* session);
  private:
  const std::string& _internal_session() const;
  void _internal_set_session(const std::string& value);
  std::string* _internal_mutable_session();
  public:

  // string device_id = 2;
  void clear_device_id();
  const std::string& device_id() const;
  void set_device_id(const std::string& value);
  void set_device_id(std::string&& value);
  void set_device_id(const char* value);
  void set_device_id(const char* value, size_t size);
  std::string* mutable_device_id();
  std::string* release_device_id();
  void set_allocated_device_id(std::string* device_id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_device_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_device_id(
      std::string* device_id);
  private:
  const std::string& _internal_device_id() const;
  void _internal_set_device_id(const std::string& value);
  std::string* _internal_mutable_device_id();
  public:

  // string query_text = 3;
  void clear_query_text();
  const std::string& query_text() const;
  void set_query_text(const std::string& value);
  void set_query_text(std::string&& value);
  void set_query_text(const char* value);
  void set_query_text(const char* value, size_t size);
  std::string* mutable_query_text();
  std::string* release_query_text();
  void set_allocated_query_text(std::string* query_text);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_query_text();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_query_text(
      std::string* query_text);
  private:
  const std::string& _internal_query_text() const;
  void _internal_set_query_text(const std::string& value);
  std::string* _internal_mutable_query_text();
  public:

  // string spoken_text = 4;
  void clear_spoken_text();
  const std::string& spoken_text() const;
  void set_spoken_text(const std::string& value);
  void set_spoken_text(std::string&& value);
  void set_spoken_text(const char* value);
  void set_spoken_text(const char* value, size_t size);
  std::string* mutable_spoken_text();
  std::string* release_spoken_text();
  void set_allocated_spoken_text(std::string* spoken_text);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_spoken_text();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_spoken_text(
      std::string* spoken_text);
  private:
  const std::string& _internal_spoken_text() const;
  void _internal_set_spoken_text(const std::string& value);
  std::string* _internal_mutable_spoken_text();
  public:

  // string command_type = 5;
  void clear_command_type();
  const std::string& command_type() const;
  void set_command_type(const std::string& value);
  void set_command_type(std::string&& value);
  void set_command_type(const char* value);
  void set_command_type(const char* value, size_t size);
  std::string* mutable_command_type();
  std::string* release_command_type();
  void set_allocated_command_type(std::string* command_type);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_command_type();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_command_type(
      std::string* command_type);
  private:
  const std::string& _internal_command_type() const;
  void _internal_set_command_type(const std::string& value);
  std::string* _internal_mutable_command_type();
  public:

  // string audio_id = 7;
  void clear_audio_id();
  const std::string& audio_id() const;
  void set_audio_id(const std::string& value);
  void set_audio_id(std::string&& value);
  void set_audio_id(const char* value);
  void set_audio_id(const char* value, size_t size);
  std::string* mutable_audio_id();
  std::string* release_audio_id();
  void set_allocated_audio_id(std::string* audio_id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_audio_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_audio_id(
      std::string* audio_id);
  private:
  const std::string& _internal_audio_id() const;
  void _internal_set_audio_id(const std::string& value);
  std::string* _internal_mutable_audio_id();
  public:

  // @@protoc_insertion_point(class_scope:chippergrpc2.KnowledgeGraphResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> domains_used_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr session_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr device_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr query_text_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr spoken_text_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr command_type_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr audio_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_chipperpb_2eproto;
};
// -------------------------------------------------------------------

class ConnectionCheckResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:chippergrpc2.ConnectionCheckResponse) */ {
 public:
  inline ConnectionCheckResponse() : ConnectionCheckResponse(nullptr) {};
  virtual ~ConnectionCheckResponse();

  ConnectionCheckResponse(const ConnectionCheckResponse& from);
  ConnectionCheckResponse(ConnectionCheckResponse&& from) noexcept
    : ConnectionCheckResponse() {
    *this = ::std::move(from);
  }

  inline ConnectionCheckResponse& operator=(const ConnectionCheckResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ConnectionCheckResponse& operator=(ConnectionCheckResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ConnectionCheckResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ConnectionCheckResponse* internal_default_instance() {
    return reinterpret_cast<const ConnectionCheckResponse*>(
               &_ConnectionCheckResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(ConnectionCheckResponse& a, ConnectionCheckResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ConnectionCheckResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ConnectionCheckResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ConnectionCheckResponse* New() const final {
    return CreateMaybeMessage<ConnectionCheckResponse>(nullptr);
  }

  ConnectionCheckResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ConnectionCheckResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ConnectionCheckResponse& from);
  void MergeFrom(const ConnectionCheckResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ConnectionCheckResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "chippergrpc2.ConnectionCheckResponse";
  }
  protected:
  explicit ConnectionCheckResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_chipperpb_2eproto);
    return ::descriptor_table_chipperpb_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 1,
    kFramesReceivedFieldNumber = 2,
  };
  // string status = 1;
  void clear_status();
  const std::string& status() const;
  void set_status(const std::string& value);
  void set_status(std::string&& value);
  void set_status(const char* value);
  void set_status(const char* value, size_t size);
  std::string* mutable_status();
  std::string* release_status();
  void set_allocated_status(std::string* status);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_status();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_status(
      std::string* status);
  private:
  const std::string& _internal_status() const;
  void _internal_set_status(const std::string& value);
  std::string* _internal_mutable_status();
  public:

  // uint32 frames_received = 2;
  void clear_frames_received();
  ::PROTOBUF_NAMESPACE_ID::uint32 frames_received() const;
  void set_frames_received(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_frames_received() const;
  void _internal_set_frames_received(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:chippergrpc2.ConnectionCheckResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr status_;
  ::PROTOBUF_NAMESPACE_ID::uint32 frames_received_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_chipperpb_2eproto;
};
// -------------------------------------------------------------------

class WeatherLocation PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:chippergrpc2.WeatherLocation) */ {
 public:
  inline WeatherLocation() : WeatherLocation(nullptr) {};
  virtual ~WeatherLocation();

  WeatherLocation(const WeatherLocation& from);
  WeatherLocation(WeatherLocation&& from) noexcept
    : WeatherLocation() {
    *this = ::std::move(from);
  }

  inline WeatherLocation& operator=(const WeatherLocation& from) {
    CopyFrom(from);
    return *this;
  }
  inline WeatherLocation& operator=(WeatherLocation&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const WeatherLocation& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const WeatherLocation* internal_default_instance() {
    return reinterpret_cast<const WeatherLocation*>(
               &_WeatherLocation_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(WeatherLocation& a, WeatherLocation& b) {
    a.Swap(&b);
  }
  inline void Swap(WeatherLocation* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WeatherLocation* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline WeatherLocation* New() const final {
    return CreateMaybeMessage<WeatherLocation>(nullptr);
  }

  WeatherLocation* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<WeatherLocation>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const WeatherLocation& from);
  void MergeFrom(const WeatherLocation& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WeatherLocation* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "chippergrpc2.WeatherLocation";
  }
  protected:
  explicit WeatherLocation(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_chipperpb_2eproto);
    return ::descriptor_table_chipperpb_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCityFieldNumber = 1,
    kStateFieldNumber = 2,
    kCountryFieldNumber = 3,
  };
  // string city = 1;
  void clear_city();
  const std::string& city() const;
  void set_city(const std::string& value);
  void set_city(std::string&& value);
  void set_city(const char* value);
  void set_city(const char* value, size_t size);
  std::string* mutable_city();
  std::string* release_city();
  void set_allocated_city(std::string* city);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_city();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_city(
      std::string* city);
  private:
  const std::string& _internal_city() const;
  void _internal_set_city(const std::string& value);
  std::string* _internal_mutable_city();
  public:

  // string state = 2;
  void clear_state();
  const std::string& state() const;
  void set_state(const std::string& value);
  void set_state(std::string&& value);
  void set_state(const char* value);
  void set_state(const char* value, size_t size);
  std::string* mutable_state();
  std::string* release_state();
  void set_allocated_state(std::string* state);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_state();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_state(
      std::string* state);
  private:
  const std::string& _internal_state() const;
  void _internal_set_state(const std::string& value);
  std::string* _internal_mutable_state();
  public:

  // string country = 3;
  void clear_country();
  const std::string& country() const;
  void set_country(const std::string& value);
  void set_country(std::string&& value);
  void set_country(const char* value);
  void set_country(const char* value, size_t size);
  std::string* mutable_country();
  std::string* release_country();
  void set_allocated_country(std::string* country);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_country();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_country(
      std::string* country);
  private:
  const std::string& _internal_country() const;
  void _internal_set_country(const std::string& value);
  std::string* _internal_mutable_country();
  public:

  // @@protoc_insertion_point(class_scope:chippergrpc2.WeatherLocation)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr city_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr state_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr country_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_chipperpb_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// TextRequest

// string session = 1;
inline void TextRequest::clear_session() {
  session_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& TextRequest::session() const {
  // @@protoc_insertion_point(field_get:chippergrpc2.TextRequest.session)
  return _internal_session();
}
inline void TextRequest::set_session(const std::string& value) {
  _internal_set_session(value);
  // @@protoc_insertion_point(field_set:chippergrpc2.TextRequest.session)
}
inline std::string* TextRequest::mutable_session() {
  // @@protoc_insertion_point(field_mutable:chippergrpc2.TextRequest.session)
  return _internal_mutable_session();
}
inline const std::string& TextRequest::_internal_session() const {
  return session_.Get();
}
inline void TextRequest::_internal_set_session(const std::string& value) {
  
  session_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void TextRequest::set_session(std::string&& value) {
  
  session_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:chippergrpc2.TextRequest.session)
}
inline void TextRequest::set_session(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  session_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:chippergrpc2.TextRequest.session)
}
inline void TextRequest::set_session(const char* value,
    size_t size) {
  
  session_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:chippergrpc2.TextRequest.session)
}
inline std::string* TextRequest::_internal_mutable_session() {
  
  return session_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* TextRequest::release_session() {
  // @@protoc_insertion_point(field_release:chippergrpc2.TextRequest.session)
  return session_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TextRequest::set_allocated_session(std::string* session) {
  if (session != nullptr) {
    
  } else {
    
  }
  session_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), session,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:chippergrpc2.TextRequest.session)
}
inline std::string* TextRequest::unsafe_arena_release_session() {
  // @@protoc_insertion_point(field_unsafe_arena_release:chippergrpc2.TextRequest.session)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return session_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void TextRequest::unsafe_arena_set_allocated_session(
    std::string* session) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (session != nullptr) {
    
  } else {
    
  }
  session_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      session, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:chippergrpc2.TextRequest.session)
}

// string device_id = 2;
inline void TextRequest::clear_device_id() {
  device_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& TextRequest::device_id() const {
  // @@protoc_insertion_point(field_get:chippergrpc2.TextRequest.device_id)
  return _internal_device_id();
}
inline void TextRequest::set_device_id(const std::string& value) {
  _internal_set_device_id(value);
  // @@protoc_insertion_point(field_set:chippergrpc2.TextRequest.device_id)
}
inline std::string* TextRequest::mutable_device_id() {
  // @@protoc_insertion_point(field_mutable:chippergrpc2.TextRequest.device_id)
  return _internal_mutable_device_id();
}
inline const std::string& TextRequest::_internal_device_id() const {
  return device_id_.Get();
}
inline void TextRequest::_internal_set_device_id(const std::string& value) {
  
  device_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void TextRequest::set_device_id(std::string&& value) {
  
  device_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:chippergrpc2.TextRequest.device_id)
}
inline void TextRequest::set_device_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  device_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:chippergrpc2.TextRequest.device_id)
}
inline void TextRequest::set_device_id(const char* value,
    size_t size) {
  
  device_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:chippergrpc2.TextRequest.device_id)
}
inline std::string* TextRequest::_internal_mutable_device_id() {
  
  return device_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* TextRequest::release_device_id() {
  // @@protoc_insertion_point(field_release:chippergrpc2.TextRequest.device_id)
  return device_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TextRequest::set_allocated_device_id(std::string* device_id) {
  if (device_id != nullptr) {
    
  } else {
    
  }
  device_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), device_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:chippergrpc2.TextRequest.device_id)
}
inline std::string* TextRequest::unsafe_arena_release_device_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:chippergrpc2.TextRequest.device_id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return device_id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void TextRequest::unsafe_arena_set_allocated_device_id(
    std::string* device_id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (device_id != nullptr) {
    
  } else {
    
  }
  device_id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      device_id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:chippergrpc2.TextRequest.device_id)
}

// string text_input = 3;
inline void TextRequest::clear_text_input() {
  text_input_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& TextRequest::text_input() const {
  // @@protoc_insertion_point(field_get:chippergrpc2.TextRequest.text_input)
  return _internal_text_input();
}
inline void TextRequest::set_text_input(const std::string& value) {
  _internal_set_text_input(value);
  // @@protoc_insertion_point(field_set:chippergrpc2.TextRequest.text_input)
}
inline std::string* TextRequest::mutable_text_input() {
  // @@protoc_insertion_point(field_mutable:chippergrpc2.TextRequest.text_input)
  return _internal_mutable_text_input();
}
inline const std::string& TextRequest::_internal_text_input() const {
  return text_input_.Get();
}
inline void TextRequest::_internal_set_text_input(const std::string& value) {
  
  text_input_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void TextRequest::set_text_input(std::string&& value) {
  
  text_input_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:chippergrpc2.TextRequest.text_input)
}
inline void TextRequest::set_text_input(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  text_input_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:chippergrpc2.TextRequest.text_input)
}
inline void TextRequest::set_text_input(const char* value,
    size_t size) {
  
  text_input_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:chippergrpc2.TextRequest.text_input)
}
inline std::string* TextRequest::_internal_mutable_text_input() {
  
  return text_input_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* TextRequest::release_text_input() {
  // @@protoc_insertion_point(field_release:chippergrpc2.TextRequest.text_input)
  return text_input_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TextRequest::set_allocated_text_input(std::string* text_input) {
  if (text_input != nullptr) {
    
  } else {
    
  }
  text_input_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), text_input,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:chippergrpc2.TextRequest.text_input)
}
inline std::string* TextRequest::unsafe_arena_release_text_input() {
  // @@protoc_insertion_point(field_unsafe_arena_release:chippergrpc2.TextRequest.text_input)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return text_input_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void TextRequest::unsafe_arena_set_allocated_text_input(
    std::string* text_input) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (text_input != nullptr) {
    
  } else {
    
  }
  text_input_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      text_input, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:chippergrpc2.TextRequest.text_input)
}

// .chippergrpc2.LanguageCode language_code = 4;
inline void TextRequest::clear_language_code() {
  language_code_ = 0;
}
inline ::chippergrpc2::LanguageCode TextRequest::_internal_language_code() const {
  return static_cast< ::chippergrpc2::LanguageCode >(language_code_);
}
inline ::chippergrpc2::LanguageCode TextRequest::language_code() const {
  // @@protoc_insertion_point(field_get:chippergrpc2.TextRequest.language_code)
  return _internal_language_code();
}
inline void TextRequest::_internal_set_language_code(::chippergrpc2::LanguageCode value) {
  
  language_code_ = value;
}
inline void TextRequest::set_language_code(::chippergrpc2::LanguageCode value) {
  _internal_set_language_code(value);
  // @@protoc_insertion_point(field_set:chippergrpc2.TextRequest.language_code)
}

// .chippergrpc2.IntentService intent_service = 5;
inline void TextRequest::clear_intent_service() {
  intent_service_ = 0;
}
inline ::chippergrpc2::IntentService TextRequest::_internal_intent_service() const {
  return static_cast< ::chippergrpc2::IntentService >(intent_service_);
}
inline ::chippergrpc2::IntentService TextRequest::intent_service() const {
  // @@protoc_insertion_point(field_get:chippergrpc2.TextRequest.intent_service)
  return _internal_intent_service();
}
inline void TextRequest::_internal_set_intent_service(::chippergrpc2::IntentService value) {
  
  intent_service_ = value;
}
inline void TextRequest::set_intent_service(::chippergrpc2::IntentService value) {
  _internal_set_intent_service(value);
  // @@protoc_insertion_point(field_set:chippergrpc2.TextRequest.intent_service)
}

// string firmware_version = 6;
inline void TextRequest::clear_firmware_version() {
  firmware_version_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& TextRequest::firmware_version() const {
  // @@protoc_insertion_point(field_get:chippergrpc2.TextRequest.firmware_version)
  return _internal_firmware_version();
}
inline void TextRequest::set_firmware_version(const std::string& value) {
  _internal_set_firmware_version(value);
  // @@protoc_insertion_point(field_set:chippergrpc2.TextRequest.firmware_version)
}
inline std::string* TextRequest::mutable_firmware_version() {
  // @@protoc_insertion_point(field_mutable:chippergrpc2.TextRequest.firmware_version)
  return _internal_mutable_firmware_version();
}
inline const std::string& TextRequest::_internal_firmware_version() const {
  return firmware_version_.Get();
}
inline void TextRequest::_internal_set_firmware_version(const std::string& value) {
  
  firmware_version_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void TextRequest::set_firmware_version(std::string&& value) {
  
  firmware_version_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:chippergrpc2.TextRequest.firmware_version)
}
inline void TextRequest::set_firmware_version(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  firmware_version_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:chippergrpc2.TextRequest.firmware_version)
}
inline void TextRequest::set_firmware_version(const char* value,
    size_t size) {
  
  firmware_version_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:chippergrpc2.TextRequest.firmware_version)
}
inline std::string* TextRequest::_internal_mutable_firmware_version() {
  
  return firmware_version_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* TextRequest::release_firmware_version() {
  // @@protoc_insertion_point(field_release:chippergrpc2.TextRequest.firmware_version)
  return firmware_version_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TextRequest::set_allocated_firmware_version(std::string* firmware_version) {
  if (firmware_version != nullptr) {
    
  } else {
    
  }
  firmware_version_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), firmware_version,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:chippergrpc2.TextRequest.firmware_version)
}
inline std::string* TextRequest::unsafe_arena_release_firmware_version() {
  // @@protoc_insertion_point(field_unsafe_arena_release:chippergrpc2.TextRequest.firmware_version)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return firmware_version_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void TextRequest::unsafe_arena_set_allocated_firmware_version(
    std::string* firmware_version) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (firmware_version != nullptr) {
    
  } else {
    
  }
  firmware_version_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      firmware_version, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:chippergrpc2.TextRequest.firmware_version)
}

// .chippergrpc2.RobotMode mode = 7;
inline void TextRequest::clear_mode() {
  mode_ = 0;
}
inline ::chippergrpc2::RobotMode TextRequest::_internal_mode() const {
  return static_cast< ::chippergrpc2::RobotMode >(mode_);
}
inline ::chippergrpc2::RobotMode TextRequest::mode() const {
  // @@protoc_insertion_point(field_get:chippergrpc2.TextRequest.mode)
  return _internal_mode();
}
inline void TextRequest::_internal_set_mode(::chippergrpc2::RobotMode value) {
  
  mode_ = value;
}
inline void TextRequest::set_mode(::chippergrpc2::RobotMode value) {
  _internal_set_mode(value);
  // @@protoc_insertion_point(field_set:chippergrpc2.TextRequest.mode)
}

// bool skip_das = 8;
inline void TextRequest::clear_skip_das() {
  skip_das_ = false;
}
inline bool TextRequest::_internal_skip_das() const {
  return skip_das_;
}
inline bool TextRequest::skip_das() const {
  // @@protoc_insertion_point(field_get:chippergrpc2.TextRequest.skip_das)
  return _internal_skip_das();
}
inline void TextRequest::_internal_set_skip_das(bool value) {
  
  skip_das_ = value;
}
inline void TextRequest::set_skip_das(bool value) {
  _internal_set_skip_das(value);
  // @@protoc_insertion_point(field_set:chippergrpc2.TextRequest.skip_das)
}

// -------------------------------------------------------------------

// StreamingIntentRequest

// string session = 1;
inline void StreamingIntentRequest::clear_session() {
  session_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& StreamingIntentRequest::session() const {
  // @@protoc_insertion_point(field_get:chippergrpc2.StreamingIntentRequest.session)
  return _internal_session();
}
inline void StreamingIntentRequest::set_session(const std::string& value) {
  _internal_set_session(value);
  // @@protoc_insertion_point(field_set:chippergrpc2.StreamingIntentRequest.session)
}
inline std::string* StreamingIntentRequest::mutable_session() {
  // @@protoc_insertion_point(field_mutable:chippergrpc2.StreamingIntentRequest.session)
  return _internal_mutable_session();
}
inline const std::string& StreamingIntentRequest::_internal_session() const {
  return session_.Get();
}
inline void StreamingIntentRequest::_internal_set_session(const std::string& value) {
  
  session_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void StreamingIntentRequest::set_session(std::string&& value) {
  
  session_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:chippergrpc2.StreamingIntentRequest.session)
}
inline void StreamingIntentRequest::set_session(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  session_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:chippergrpc2.StreamingIntentRequest.session)
}
inline void StreamingIntentRequest::set_session(const char* value,
    size_t size) {
  
  session_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:chippergrpc2.StreamingIntentRequest.session)
}
inline std::string* StreamingIntentRequest::_internal_mutable_session() {
  
  return session_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* StreamingIntentRequest::release_session() {
  // @@protoc_insertion_point(field_release:chippergrpc2.StreamingIntentRequest.session)
  return session_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void StreamingIntentRequest::set_allocated_session(std::string* session) {
  if (session != nullptr) {
    
  } else {
    
  }
  session_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), session,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:chippergrpc2.StreamingIntentRequest.session)
}
inline std::string* StreamingIntentRequest::unsafe_arena_release_session() {
  // @@protoc_insertion_point(field_unsafe_arena_release:chippergrpc2.StreamingIntentRequest.session)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return session_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void StreamingIntentRequest::unsafe_arena_set_allocated_session(
    std::string* session) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (session != nullptr) {
    
  } else {
    
  }
  session_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      session, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:chippergrpc2.StreamingIntentRequest.session)
}

// string device_id = 2;
inline void StreamingIntentRequest::clear_device_id() {
  device_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& StreamingIntentRequest::device_id() const {
  // @@protoc_insertion_point(field_get:chippergrpc2.StreamingIntentRequest.device_id)
  return _internal_device_id();
}
inline void StreamingIntentRequest::set_device_id(const std::string& value) {
  _internal_set_device_id(value);
  // @@protoc_insertion_point(field_set:chippergrpc2.StreamingIntentRequest.device_id)
}
inline std::string* StreamingIntentRequest::mutable_device_id() {
  // @@protoc_insertion_point(field_mutable:chippergrpc2.StreamingIntentRequest.device_id)
  return _internal_mutable_device_id();
}
inline const std::string& StreamingIntentRequest::_internal_device_id() const {
  return device_id_.Get();
}
inline void StreamingIntentRequest::_internal_set_device_id(const std::string& value) {
  
  device_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void StreamingIntentRequest::set_device_id(std::string&& value) {
  
  device_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:chippergrpc2.StreamingIntentRequest.device_id)
}
inline void StreamingIntentRequest::set_device_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  device_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:chippergrpc2.StreamingIntentRequest.device_id)
}
inline void StreamingIntentRequest::set_device_id(const char* value,
    size_t size) {
  
  device_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:chippergrpc2.StreamingIntentRequest.device_id)
}
inline std::string* StreamingIntentRequest::_internal_mutable_device_id() {
  
  return device_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* StreamingIntentRequest::release_device_id() {
  // @@protoc_insertion_point(field_release:chippergrpc2.StreamingIntentRequest.device_id)
  return device_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void StreamingIntentRequest::set_allocated_device_id(std::string* device_id) {
  if (device_id != nullptr) {
    
  } else {
    
  }
  device_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), device_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:chippergrpc2.StreamingIntentRequest.device_id)
}
inline std::string* StreamingIntentRequest::unsafe_arena_release_device_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:chippergrpc2.StreamingIntentRequest.device_id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return device_id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void StreamingIntentRequest::unsafe_arena_set_allocated_device_id(
    std::string* device_id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (device_id != nullptr) {
    
  } else {
    
  }
  device_id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      device_id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:chippergrpc2.StreamingIntentRequest.device_id)
}

// bytes input_audio = 3;
inline void StreamingIntentRequest::clear_input_audio() {
  input_audio_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& StreamingIntentRequest::input_audio() const {
  // @@protoc_insertion_point(field_get:chippergrpc2.StreamingIntentRequest.input_audio)
  return _internal_input_audio();
}
inline void StreamingIntentRequest::set_input_audio(const std::string& value) {
  _internal_set_input_audio(value);
  // @@protoc_insertion_point(field_set:chippergrpc2.StreamingIntentRequest.input_audio)
}
inline std::string* StreamingIntentRequest::mutable_input_audio() {
  // @@protoc_insertion_point(field_mutable:chippergrpc2.StreamingIntentRequest.input_audio)
  return _internal_mutable_input_audio();
}
inline const std::string& StreamingIntentRequest::_internal_input_audio() const {
  return input_audio_.Get();
}
inline void StreamingIntentRequest::_internal_set_input_audio(const std::string& value) {
  
  input_audio_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void StreamingIntentRequest::set_input_audio(std::string&& value) {
  
  input_audio_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:chippergrpc2.StreamingIntentRequest.input_audio)
}
inline void StreamingIntentRequest::set_input_audio(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  input_audio_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:chippergrpc2.StreamingIntentRequest.input_audio)
}
inline void StreamingIntentRequest::set_input_audio(const void* value,
    size_t size) {
  
  input_audio_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:chippergrpc2.StreamingIntentRequest.input_audio)
}
inline std::string* StreamingIntentRequest::_internal_mutable_input_audio() {
  
  return input_audio_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* StreamingIntentRequest::release_input_audio() {
  // @@protoc_insertion_point(field_release:chippergrpc2.StreamingIntentRequest.input_audio)
  return input_audio_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void StreamingIntentRequest::set_allocated_input_audio(std::string* input_audio) {
  if (input_audio != nullptr) {
    
  } else {
    
  }
  input_audio_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), input_audio,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:chippergrpc2.StreamingIntentRequest.input_audio)
}
inline std::string* StreamingIntentRequest::unsafe_arena_release_input_audio() {
  // @@protoc_insertion_point(field_unsafe_arena_release:chippergrpc2.StreamingIntentRequest.input_audio)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return input_audio_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void StreamingIntentRequest::unsafe_arena_set_allocated_input_audio(
    std::string* input_audio) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (input_audio != nullptr) {
    
  } else {
    
  }
  input_audio_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      input_audio, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:chippergrpc2.StreamingIntentRequest.input_audio)
}

// .chippergrpc2.LanguageCode language_code = 4;
inline void StreamingIntentRequest::clear_language_code() {
  language_code_ = 0;
}
inline ::chippergrpc2::LanguageCode StreamingIntentRequest::_internal_language_code() const {
  return static_cast< ::chippergrpc2::LanguageCode >(language_code_);
}
inline ::chippergrpc2::LanguageCode StreamingIntentRequest::language_code() const {
  // @@protoc_insertion_point(field_get:chippergrpc2.StreamingIntentRequest.language_code)
  return _internal_language_code();
}
inline void StreamingIntentRequest::_internal_set_language_code(::chippergrpc2::LanguageCode value) {
  
  language_code_ = value;
}
inline void StreamingIntentRequest::set_language_code(::chippergrpc2::LanguageCode value) {
  _internal_set_language_code(value);
  // @@protoc_insertion_point(field_set:chippergrpc2.StreamingIntentRequest.language_code)
}

// bool speech_only = 5;
inline void StreamingIntentRequest::clear_speech_only() {
  speech_only_ = false;
}
inline bool StreamingIntentRequest::_internal_speech_only() const {
  return speech_only_;
}
inline bool StreamingIntentRequest::speech_only() const {
  // @@protoc_insertion_point(field_get:chippergrpc2.StreamingIntentRequest.speech_only)
  return _internal_speech_only();
}
inline void StreamingIntentRequest::_internal_set_speech_only(bool value) {
  
  speech_only_ = value;
}
inline void StreamingIntentRequest::set_speech_only(bool value) {
  _internal_set_speech_only(value);
  // @@protoc_insertion_point(field_set:chippergrpc2.StreamingIntentRequest.speech_only)
}

// string firmware_version = 6;
inline void StreamingIntentRequest::clear_firmware_version() {
  firmware_version_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& StreamingIntentRequest::firmware_version() const {
  // @@protoc_insertion_point(field_get:chippergrpc2.StreamingIntentRequest.firmware_version)
  return _internal_firmware_version();
}
inline void StreamingIntentRequest::set_firmware_version(const std::string& value) {
  _internal_set_firmware_version(value);
  // @@protoc_insertion_point(field_set:chippergrpc2.StreamingIntentRequest.firmware_version)
}
inline std::string* StreamingIntentRequest::mutable_firmware_version() {
  // @@protoc_insertion_point(field_mutable:chippergrpc2.StreamingIntentRequest.firmware_version)
  return _internal_mutable_firmware_version();
}
inline const std::string& StreamingIntentRequest::_internal_firmware_version() const {
  return firmware_version_.Get();
}
inline void StreamingIntentRequest::_internal_set_firmware_version(const std::string& value) {
  
  firmware_version_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void StreamingIntentRequest::set_firmware_version(std::string&& value) {
  
  firmware_version_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:chippergrpc2.StreamingIntentRequest.firmware_version)
}
inline void StreamingIntentRequest::set_firmware_version(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  firmware_version_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:chippergrpc2.StreamingIntentRequest.firmware_version)
}
inline void StreamingIntentRequest::set_firmware_version(const char* value,
    size_t size) {
  
  firmware_version_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:chippergrpc2.StreamingIntentRequest.firmware_version)
}
inline std::string* StreamingIntentRequest::_internal_mutable_firmware_version() {
  
  return firmware_version_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* StreamingIntentRequest::release_firmware_version() {
  // @@protoc_insertion_point(field_release:chippergrpc2.StreamingIntentRequest.firmware_version)
  return firmware_version_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void StreamingIntentRequest::set_allocated_firmware_version(std::string* firmware_version) {
  if (firmware_version != nullptr) {
    
  } else {
    
  }
  firmware_version_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), firmware_version,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:chippergrpc2.StreamingIntentRequest.firmware_version)
}
inline std::string* StreamingIntentRequest::unsafe_arena_release_firmware_version() {
  // @@protoc_insertion_point(field_unsafe_arena_release:chippergrpc2.StreamingIntentRequest.firmware_version)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return firmware_version_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void StreamingIntentRequest::unsafe_arena_set_allocated_firmware_version(
    std::string* firmware_version) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (firmware_version != nullptr) {
    
  } else {
    
  }
  firmware_version_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      firmware_version, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:chippergrpc2.StreamingIntentRequest.firmware_version)
}

// .chippergrpc2.RobotMode mode = 7;
inline void StreamingIntentRequest::clear_mode() {
  mode_ = 0;
}
inline ::chippergrpc2::RobotMode StreamingIntentRequest::_internal_mode() const {
  return static_cast< ::chippergrpc2::RobotMode >(mode_);
}
inline ::chippergrpc2::RobotMode StreamingIntentRequest::mode() const {
  // @@protoc_insertion_point(field_get:chippergrpc2.StreamingIntentRequest.mode)
  return _internal_mode();
}
inline void StreamingIntentRequest::_internal_set_mode(::chippergrpc2::RobotMode value) {
  
  mode_ = value;
}
inline void StreamingIntentRequest::set_mode(::chippergrpc2::RobotMode value) {
  _internal_set_mode(value);
  // @@protoc_insertion_point(field_set:chippergrpc2.StreamingIntentRequest.mode)
}

// string boot_id = 8;
inline void StreamingIntentRequest::clear_boot_id() {
  boot_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& StreamingIntentRequest::boot_id() const {
  // @@protoc_insertion_point(field_get:chippergrpc2.StreamingIntentRequest.boot_id)
  return _internal_boot_id();
}
inline void StreamingIntentRequest::set_boot_id(const std::string& value) {
  _internal_set_boot_id(value);
  // @@protoc_insertion_point(field_set:chippergrpc2.StreamingIntentRequest.boot_id)
}
inline std::string* StreamingIntentRequest::mutable_boot_id() {
  // @@protoc_insertion_point(field_mutable:chippergrpc2.StreamingIntentRequest.boot_id)
  return _internal_mutable_boot_id();
}
inline const std::string& StreamingIntentRequest::_internal_boot_id() const {
  return boot_id_.Get();
}
inline void StreamingIntentRequest::_internal_set_boot_id(const std::string& value) {
  
  boot_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void StreamingIntentRequest::set_boot_id(std::string&& value) {
  
  boot_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:chippergrpc2.StreamingIntentRequest.boot_id)
}
inline void StreamingIntentRequest::set_boot_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  boot_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:chippergrpc2.StreamingIntentRequest.boot_id)
}
inline void StreamingIntentRequest::set_boot_id(const char* value,
    size_t size) {
  
  boot_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:chippergrpc2.StreamingIntentRequest.boot_id)
}
inline std::string* StreamingIntentRequest::_internal_mutable_boot_id() {
  
  return boot_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* StreamingIntentRequest::release_boot_id() {
  // @@protoc_insertion_point(field_release:chippergrpc2.StreamingIntentRequest.boot_id)
  return boot_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void StreamingIntentRequest::set_allocated_boot_id(std::string* boot_id) {
  if (boot_id != nullptr) {
    
  } else {
    
  }
  boot_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), boot_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:chippergrpc2.StreamingIntentRequest.boot_id)
}
inline std::string* StreamingIntentRequest::unsafe_arena_release_boot_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:chippergrpc2.StreamingIntentRequest.boot_id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return boot_id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void StreamingIntentRequest::unsafe_arena_set_allocated_boot_id(
    std::string* boot_id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (boot_id != nullptr) {
    
  } else {
    
  }
  boot_id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      boot_id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:chippergrpc2.StreamingIntentRequest.boot_id)
}

// bool skip_das = 9;
inline void StreamingIntentRequest::clear_skip_das() {
  skip_das_ = false;
}
inline bool StreamingIntentRequest::_internal_skip_das() const {
  return skip_das_;
}
inline bool StreamingIntentRequest::skip_das() const {
  // @@protoc_insertion_point(field_get:chippergrpc2.StreamingIntentRequest.skip_das)
  return _internal_skip_das();
}
inline void StreamingIntentRequest::_internal_set_skip_das(bool value) {
  
  skip_das_ = value;
}
inline void StreamingIntentRequest::set_skip_das(bool value) {
  _internal_set_skip_das(value);
  // @@protoc_insertion_point(field_set:chippergrpc2.StreamingIntentRequest.skip_das)
}

// .chippergrpc2.AudioEncoding audio_encoding = 13;
inline void StreamingIntentRequest::clear_audio_encoding() {
  audio_encoding_ = 0;
}
inline ::chippergrpc2::AudioEncoding StreamingIntentRequest::_internal_audio_encoding() const {
  return static_cast< ::chippergrpc2::AudioEncoding >(audio_encoding_);
}
inline ::chippergrpc2::AudioEncoding StreamingIntentRequest::audio_encoding() const {
  // @@protoc_insertion_point(field_get:chippergrpc2.StreamingIntentRequest.audio_encoding)
  return _internal_audio_encoding();
}
inline void StreamingIntentRequest::_internal_set_audio_encoding(::chippergrpc2::AudioEncoding value) {
  
  audio_encoding_ = value;
}
inline void StreamingIntentRequest::set_audio_encoding(::chippergrpc2::AudioEncoding value) {
  _internal_set_audio_encoding(value);
  // @@protoc_insertion_point(field_set:chippergrpc2.StreamingIntentRequest.audio_encoding)
}

// bool single_utterance = 14;
inline void StreamingIntentRequest::clear_single_utterance() {
  single_utterance_ = false;
}
inline bool StreamingIntentRequest::_internal_single_utterance() const {
  return single_utterance_;
}
inline bool StreamingIntentRequest::single_utterance() const {
  // @@protoc_insertion_point(field_get:chippergrpc2.StreamingIntentRequest.single_utterance)
  return _internal_single_utterance();
}
inline void StreamingIntentRequest::_internal_set_single_utterance(bool value) {
  
  single_utterance_ = value;
}
inline void StreamingIntentRequest::set_single_utterance(bool value) {
  _internal_set_single_utterance(value);
  // @@protoc_insertion_point(field_set:chippergrpc2.StreamingIntentRequest.single_utterance)
}

// .chippergrpc2.IntentService intent_service = 15;
inline void StreamingIntentRequest::clear_intent_service() {
  intent_service_ = 0;
}
inline ::chippergrpc2::IntentService StreamingIntentRequest::_internal_intent_service() const {
  return static_cast< ::chippergrpc2::IntentService >(intent_service_);
}
inline ::chippergrpc2::IntentService StreamingIntentRequest::intent_service() const {
  // @@protoc_insertion_point(field_get:chippergrpc2.StreamingIntentRequest.intent_service)
  return _internal_intent_service();
}
inline void StreamingIntentRequest::_internal_set_intent_service(::chippergrpc2::IntentService value) {
  
  intent_service_ = value;
}
inline void StreamingIntentRequest::set_intent_service(::chippergrpc2::IntentService value) {
  _internal_set_intent_service(value);
  // @@protoc_insertion_point(field_set:chippergrpc2.StreamingIntentRequest.intent_service)
}

// string app_key = 16;
inline void StreamingIntentRequest::clear_app_key() {
  app_key_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& StreamingIntentRequest::app_key() const {
  // @@protoc_insertion_point(field_get:chippergrpc2.StreamingIntentRequest.app_key)
  return _internal_app_key();
}
inline void StreamingIntentRequest::set_app_key(const std::string& value) {
  _internal_set_app_key(value);
  // @@protoc_insertion_point(field_set:chippergrpc2.StreamingIntentRequest.app_key)
}
inline std::string* StreamingIntentRequest::mutable_app_key() {
  // @@protoc_insertion_point(field_mutable:chippergrpc2.StreamingIntentRequest.app_key)
  return _internal_mutable_app_key();
}
inline const std::string& StreamingIntentRequest::_internal_app_key() const {
  return app_key_.Get();
}
inline void StreamingIntentRequest::_internal_set_app_key(const std::string& value) {
  
  app_key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void StreamingIntentRequest::set_app_key(std::string&& value) {
  
  app_key_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:chippergrpc2.StreamingIntentRequest.app_key)
}
inline void StreamingIntentRequest::set_app_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  app_key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:chippergrpc2.StreamingIntentRequest.app_key)
}
inline void StreamingIntentRequest::set_app_key(const char* value,
    size_t size) {
  
  app_key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:chippergrpc2.StreamingIntentRequest.app_key)
}
inline std::string* StreamingIntentRequest::_internal_mutable_app_key() {
  
  return app_key_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* StreamingIntentRequest::release_app_key() {
  // @@protoc_insertion_point(field_release:chippergrpc2.StreamingIntentRequest.app_key)
  return app_key_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void StreamingIntentRequest::set_allocated_app_key(std::string* app_key) {
  if (app_key != nullptr) {
    
  } else {
    
  }
  app_key_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), app_key,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:chippergrpc2.StreamingIntentRequest.app_key)
}
inline std::string* StreamingIntentRequest::unsafe_arena_release_app_key() {
  // @@protoc_insertion_point(field_unsafe_arena_release:chippergrpc2.StreamingIntentRequest.app_key)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return app_key_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void StreamingIntentRequest::unsafe_arena_set_allocated_app_key(
    std::string* app_key) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (app_key != nullptr) {
    
  } else {
    
  }
  app_key_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      app_key, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:chippergrpc2.StreamingIntentRequest.app_key)
}

// bool save_audio = 17;
inline void StreamingIntentRequest::clear_save_audio() {
  save_audio_ = false;
}
inline bool StreamingIntentRequest::_internal_save_audio() const {
  return save_audio_;
}
inline bool StreamingIntentRequest::save_audio() const {
  // @@protoc_insertion_point(field_get:chippergrpc2.StreamingIntentRequest.save_audio)
  return _internal_save_audio();
}
inline void StreamingIntentRequest::_internal_set_save_audio(bool value) {
  
  save_audio_ = value;
}
inline void StreamingIntentRequest::set_save_audio(bool value) {
  _internal_set_save_audio(value);
  // @@protoc_insertion_point(field_set:chippergrpc2.StreamingIntentRequest.save_audio)
}

// -------------------------------------------------------------------

// StreamingKnowledgeGraphRequest

// string session = 1;
inline void StreamingKnowledgeGraphRequest::clear_session() {
  session_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& StreamingKnowledgeGraphRequest::session() const {
  // @@protoc_insertion_point(field_get:chippergrpc2.StreamingKnowledgeGraphRequest.session)
  return _internal_session();
}
inline void StreamingKnowledgeGraphRequest::set_session(const std::string& value) {
  _internal_set_session(value);
  // @@protoc_insertion_point(field_set:chippergrpc2.StreamingKnowledgeGraphRequest.session)
}
inline std::string* StreamingKnowledgeGraphRequest::mutable_session() {
  // @@protoc_insertion_point(field_mutable:chippergrpc2.StreamingKnowledgeGraphRequest.session)
  return _internal_mutable_session();
}
inline const std::string& StreamingKnowledgeGraphRequest::_internal_session() const {
  return session_.Get();
}
inline void StreamingKnowledgeGraphRequest::_internal_set_session(const std::string& value) {
  
  session_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void StreamingKnowledgeGraphRequest::set_session(std::string&& value) {
  
  session_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:chippergrpc2.StreamingKnowledgeGraphRequest.session)
}
inline void StreamingKnowledgeGraphRequest::set_session(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  session_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:chippergrpc2.StreamingKnowledgeGraphRequest.session)
}
inline void StreamingKnowledgeGraphRequest::set_session(const char* value,
    size_t size) {
  
  session_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:chippergrpc2.StreamingKnowledgeGraphRequest.session)
}
inline std::string* StreamingKnowledgeGraphRequest::_internal_mutable_session() {
  
  return session_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* StreamingKnowledgeGraphRequest::release_session() {
  // @@protoc_insertion_point(field_release:chippergrpc2.StreamingKnowledgeGraphRequest.session)
  return session_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void StreamingKnowledgeGraphRequest::set_allocated_session(std::string* session) {
  if (session != nullptr) {
    
  } else {
    
  }
  session_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), session,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:chippergrpc2.StreamingKnowledgeGraphRequest.session)
}
inline std::string* StreamingKnowledgeGraphRequest::unsafe_arena_release_session() {
  // @@protoc_insertion_point(field_unsafe_arena_release:chippergrpc2.StreamingKnowledgeGraphRequest.session)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return session_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void StreamingKnowledgeGraphRequest::unsafe_arena_set_allocated_session(
    std::string* session) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (session != nullptr) {
    
  } else {
    
  }
  session_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      session, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:chippergrpc2.StreamingKnowledgeGraphRequest.session)
}

// string device_id = 2;
inline void StreamingKnowledgeGraphRequest::clear_device_id() {
  device_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& StreamingKnowledgeGraphRequest::device_id() const {
  // @@protoc_insertion_point(field_get:chippergrpc2.StreamingKnowledgeGraphRequest.device_id)
  return _internal_device_id();
}
inline void StreamingKnowledgeGraphRequest::set_device_id(const std::string& value) {
  _internal_set_device_id(value);
  // @@protoc_insertion_point(field_set:chippergrpc2.StreamingKnowledgeGraphRequest.device_id)
}
inline std::string* StreamingKnowledgeGraphRequest::mutable_device_id() {
  // @@protoc_insertion_point(field_mutable:chippergrpc2.StreamingKnowledgeGraphRequest.device_id)
  return _internal_mutable_device_id();
}
inline const std::string& StreamingKnowledgeGraphRequest::_internal_device_id() const {
  return device_id_.Get();
}
inline void StreamingKnowledgeGraphRequest::_internal_set_device_id(const std::string& value) {
  
  device_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void StreamingKnowledgeGraphRequest::set_device_id(std::string&& value) {
  
  device_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:chippergrpc2.StreamingKnowledgeGraphRequest.device_id)
}
inline void StreamingKnowledgeGraphRequest::set_device_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  device_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:chippergrpc2.StreamingKnowledgeGraphRequest.device_id)
}
inline void StreamingKnowledgeGraphRequest::set_device_id(const char* value,
    size_t size) {
  
  device_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:chippergrpc2.StreamingKnowledgeGraphRequest.device_id)
}
inline std::string* StreamingKnowledgeGraphRequest::_internal_mutable_device_id() {
  
  return device_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* StreamingKnowledgeGraphRequest::release_device_id() {
  // @@protoc_insertion_point(field_release:chippergrpc2.StreamingKnowledgeGraphRequest.device_id)
  return device_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void StreamingKnowledgeGraphRequest::set_allocated_device_id(std::string* device_id) {
  if (device_id != nullptr) {
    
  } else {
    
  }
  device_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), device_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:chippergrpc2.StreamingKnowledgeGraphRequest.device_id)
}
inline std::string* StreamingKnowledgeGraphRequest::unsafe_arena_release_device_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:chippergrpc2.StreamingKnowledgeGraphRequest.device_id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return device_id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void StreamingKnowledgeGraphRequest::unsafe_arena_set_allocated_device_id(
    std::string* device_id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (device_id != nullptr) {
    
  } else {
    
  }
  device_id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      device_id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:chippergrpc2.StreamingKnowledgeGraphRequest.device_id)
}

// bytes input_audio = 3;
inline void StreamingKnowledgeGraphRequest::clear_input_audio() {
  input_audio_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& StreamingKnowledgeGraphRequest::input_audio() const {
  // @@protoc_insertion_point(field_get:chippergrpc2.StreamingKnowledgeGraphRequest.input_audio)
  return _internal_input_audio();
}
inline void StreamingKnowledgeGraphRequest::set_input_audio(const std::string& value) {
  _internal_set_input_audio(value);
  // @@protoc_insertion_point(field_set:chippergrpc2.StreamingKnowledgeGraphRequest.input_audio)
}
inline std::string* StreamingKnowledgeGraphRequest::mutable_input_audio() {
  // @@protoc_insertion_point(field_mutable:chippergrpc2.StreamingKnowledgeGraphRequest.input_audio)
  return _internal_mutable_input_audio();
}
inline const std::string& StreamingKnowledgeGraphRequest::_internal_input_audio() const {
  return input_audio_.Get();
}
inline void StreamingKnowledgeGraphRequest::_internal_set_input_audio(const std::string& value) {
  
  input_audio_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void StreamingKnowledgeGraphRequest::set_input_audio(std::string&& value) {
  
  input_audio_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:chippergrpc2.StreamingKnowledgeGraphRequest.input_audio)
}
inline void StreamingKnowledgeGraphRequest::set_input_audio(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  input_audio_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:chippergrpc2.StreamingKnowledgeGraphRequest.input_audio)
}
inline void StreamingKnowledgeGraphRequest::set_input_audio(const void* value,
    size_t size) {
  
  input_audio_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:chippergrpc2.StreamingKnowledgeGraphRequest.input_audio)
}
inline std::string* StreamingKnowledgeGraphRequest::_internal_mutable_input_audio() {
  
  return input_audio_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* StreamingKnowledgeGraphRequest::release_input_audio() {
  // @@protoc_insertion_point(field_release:chippergrpc2.StreamingKnowledgeGraphRequest.input_audio)
  return input_audio_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void StreamingKnowledgeGraphRequest::set_allocated_input_audio(std::string* input_audio) {
  if (input_audio != nullptr) {
    
  } else {
    
  }
  input_audio_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), input_audio,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:chippergrpc2.StreamingKnowledgeGraphRequest.input_audio)
}
inline std::string* StreamingKnowledgeGraphRequest::unsafe_arena_release_input_audio() {
  // @@protoc_insertion_point(field_unsafe_arena_release:chippergrpc2.StreamingKnowledgeGraphRequest.input_audio)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return input_audio_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void StreamingKnowledgeGraphRequest::unsafe_arena_set_allocated_input_audio(
    std::string* input_audio) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (input_audio != nullptr) {
    
  } else {
    
  }
  input_audio_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      input_audio, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:chippergrpc2.StreamingKnowledgeGraphRequest.input_audio)
}

// .chippergrpc2.LanguageCode language_code = 4;
inline void StreamingKnowledgeGraphRequest::clear_language_code() {
  language_code_ = 0;
}
inline ::chippergrpc2::LanguageCode StreamingKnowledgeGraphRequest::_internal_language_code() const {
  return static_cast< ::chippergrpc2::LanguageCode >(language_code_);
}
inline ::chippergrpc2::LanguageCode StreamingKnowledgeGraphRequest::language_code() const {
  // @@protoc_insertion_point(field_get:chippergrpc2.StreamingKnowledgeGraphRequest.language_code)
  return _internal_language_code();
}
inline void StreamingKnowledgeGraphRequest::_internal_set_language_code(::chippergrpc2::LanguageCode value) {
  
  language_code_ = value;
}
inline void StreamingKnowledgeGraphRequest::set_language_code(::chippergrpc2::LanguageCode value) {
  _internal_set_language_code(value);
  // @@protoc_insertion_point(field_set:chippergrpc2.StreamingKnowledgeGraphRequest.language_code)
}

// string firmware_version = 5;
inline void StreamingKnowledgeGraphRequest::clear_firmware_version() {
  firmware_version_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& StreamingKnowledgeGraphRequest::firmware_version() const {
  // @@protoc_insertion_point(field_get:chippergrpc2.StreamingKnowledgeGraphRequest.firmware_version)
  return _internal_firmware_version();
}
inline void StreamingKnowledgeGraphRequest::set_firmware_version(const std::string& value) {
  _internal_set_firmware_version(value);
  // @@protoc_insertion_point(field_set:chippergrpc2.StreamingKnowledgeGraphRequest.firmware_version)
}
inline std::string* StreamingKnowledgeGraphRequest::mutable_firmware_version() {
  // @@protoc_insertion_point(field_mutable:chippergrpc2.StreamingKnowledgeGraphRequest.firmware_version)
  return _internal_mutable_firmware_version();
}
inline const std::string& StreamingKnowledgeGraphRequest::_internal_firmware_version() const {
  return firmware_version_.Get();
}
inline void StreamingKnowledgeGraphRequest::_internal_set_firmware_version(const std::string& value) {
  
  firmware_version_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void StreamingKnowledgeGraphRequest::set_firmware_version(std::string&& value) {
  
  firmware_version_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:chippergrpc2.StreamingKnowledgeGraphRequest.firmware_version)
}
inline void StreamingKnowledgeGraphRequest::set_firmware_version(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  firmware_version_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:chippergrpc2.StreamingKnowledgeGraphRequest.firmware_version)
}
inline void StreamingKnowledgeGraphRequest::set_firmware_version(const char* value,
    size_t size) {
  
  firmware_version_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:chippergrpc2.StreamingKnowledgeGraphRequest.firmware_version)
}
inline std::string* StreamingKnowledgeGraphRequest::_internal_mutable_firmware_version() {
  
  return firmware_version_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* StreamingKnowledgeGraphRequest::release_firmware_version() {
  // @@protoc_insertion_point(field_release:chippergrpc2.StreamingKnowledgeGraphRequest.firmware_version)
  return firmware_version_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void StreamingKnowledgeGraphRequest::set_allocated_firmware_version(std::string* firmware_version) {
  if (firmware_version != nullptr) {
    
  } else {
    
  }
  firmware_version_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), firmware_version,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:chippergrpc2.StreamingKnowledgeGraphRequest.firmware_version)
}
inline std::string* StreamingKnowledgeGraphRequest::unsafe_arena_release_firmware_version() {
  // @@protoc_insertion_point(field_unsafe_arena_release:chippergrpc2.StreamingKnowledgeGraphRequest.firmware_version)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return firmware_version_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void StreamingKnowledgeGraphRequest::unsafe_arena_set_allocated_firmware_version(
    std::string* firmware_version) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (firmware_version != nullptr) {
    
  } else {
    
  }
  firmware_version_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      firmware_version, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:chippergrpc2.StreamingKnowledgeGraphRequest.firmware_version)
}

// .chippergrpc2.AudioEncoding audio_encoding = 6;
inline void StreamingKnowledgeGraphRequest::clear_audio_encoding() {
  audio_encoding_ = 0;
}
inline ::chippergrpc2::AudioEncoding StreamingKnowledgeGraphRequest::_internal_audio_encoding() const {
  return static_cast< ::chippergrpc2::AudioEncoding >(audio_encoding_);
}
inline ::chippergrpc2::AudioEncoding StreamingKnowledgeGraphRequest::audio_encoding() const {
  // @@protoc_insertion_point(field_get:chippergrpc2.StreamingKnowledgeGraphRequest.audio_encoding)
  return _internal_audio_encoding();
}
inline void StreamingKnowledgeGraphRequest::_internal_set_audio_encoding(::chippergrpc2::AudioEncoding value) {
  
  audio_encoding_ = value;
}
inline void StreamingKnowledgeGraphRequest::set_audio_encoding(::chippergrpc2::AudioEncoding value) {
  _internal_set_audio_encoding(value);
  // @@protoc_insertion_point(field_set:chippergrpc2.StreamingKnowledgeGraphRequest.audio_encoding)
}

// string app_key = 7;
inline void StreamingKnowledgeGraphRequest::clear_app_key() {
  app_key_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& StreamingKnowledgeGraphRequest::app_key() const {
  // @@protoc_insertion_point(field_get:chippergrpc2.StreamingKnowledgeGraphRequest.app_key)
  return _internal_app_key();
}
inline void StreamingKnowledgeGraphRequest::set_app_key(const std::string& value) {
  _internal_set_app_key(value);
  // @@protoc_insertion_point(field_set:chippergrpc2.StreamingKnowledgeGraphRequest.app_key)
}
inline std::string* StreamingKnowledgeGraphRequest::mutable_app_key() {
  // @@protoc_insertion_point(field_mutable:chippergrpc2.StreamingKnowledgeGraphRequest.app_key)
  return _internal_mutable_app_key();
}
inline const std::string& StreamingKnowledgeGraphRequest::_internal_app_key() const {
  return app_key_.Get();
}
inline void StreamingKnowledgeGraphRequest::_internal_set_app_key(const std::string& value) {
  
  app_key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void StreamingKnowledgeGraphRequest::set_app_key(std::string&& value) {
  
  app_key_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:chippergrpc2.StreamingKnowledgeGraphRequest.app_key)
}
inline void StreamingKnowledgeGraphRequest::set_app_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  app_key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:chippergrpc2.StreamingKnowledgeGraphRequest.app_key)
}
inline void StreamingKnowledgeGraphRequest::set_app_key(const char* value,
    size_t size) {
  
  app_key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:chippergrpc2.StreamingKnowledgeGraphRequest.app_key)
}
inline std::string* StreamingKnowledgeGraphRequest::_internal_mutable_app_key() {
  
  return app_key_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* StreamingKnowledgeGraphRequest::release_app_key() {
  // @@protoc_insertion_point(field_release:chippergrpc2.StreamingKnowledgeGraphRequest.app_key)
  return app_key_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void StreamingKnowledgeGraphRequest::set_allocated_app_key(std::string* app_key) {
  if (app_key != nullptr) {
    
  } else {
    
  }
  app_key_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), app_key,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:chippergrpc2.StreamingKnowledgeGraphRequest.app_key)
}
inline std::string* StreamingKnowledgeGraphRequest::unsafe_arena_release_app_key() {
  // @@protoc_insertion_point(field_unsafe_arena_release:chippergrpc2.StreamingKnowledgeGraphRequest.app_key)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return app_key_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void StreamingKnowledgeGraphRequest::unsafe_arena_set_allocated_app_key(
    std::string* app_key) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (app_key != nullptr) {
    
  } else {
    
  }
  app_key_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      app_key, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:chippergrpc2.StreamingKnowledgeGraphRequest.app_key)
}

// bool save_audio = 8;
inline void StreamingKnowledgeGraphRequest::clear_save_audio() {
  save_audio_ = false;
}
inline bool StreamingKnowledgeGraphRequest::_internal_save_audio() const {
  return save_audio_;
}
inline bool StreamingKnowledgeGraphRequest::save_audio() const {
  // @@protoc_insertion_point(field_get:chippergrpc2.StreamingKnowledgeGraphRequest.save_audio)
  return _internal_save_audio();
}
inline void StreamingKnowledgeGraphRequest::_internal_set_save_audio(bool value) {
  
  save_audio_ = value;
}
inline void StreamingKnowledgeGraphRequest::set_save_audio(bool value) {
  _internal_set_save_audio(value);
  // @@protoc_insertion_point(field_set:chippergrpc2.StreamingKnowledgeGraphRequest.save_audio)
}

// string boot_id = 9;
inline void StreamingKnowledgeGraphRequest::clear_boot_id() {
  boot_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& StreamingKnowledgeGraphRequest::boot_id() const {
  // @@protoc_insertion_point(field_get:chippergrpc2.StreamingKnowledgeGraphRequest.boot_id)
  return _internal_boot_id();
}
inline void StreamingKnowledgeGraphRequest::set_boot_id(const std::string& value) {
  _internal_set_boot_id(value);
  // @@protoc_insertion_point(field_set:chippergrpc2.StreamingKnowledgeGraphRequest.boot_id)
}
inline std::string* StreamingKnowledgeGraphRequest::mutable_boot_id() {
  // @@protoc_insertion_point(field_mutable:chippergrpc2.StreamingKnowledgeGraphRequest.boot_id)
  return _internal_mutable_boot_id();
}
inline const std::string& StreamingKnowledgeGraphRequest::_internal_boot_id() const {
  return boot_id_.Get();
}
inline void StreamingKnowledgeGraphRequest::_internal_set_boot_id(const std::string& value) {
  
  boot_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void StreamingKnowledgeGraphRequest::set_boot_id(std::string&& value) {
  
  boot_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:chippergrpc2.StreamingKnowledgeGraphRequest.boot_id)
}
inline void StreamingKnowledgeGraphRequest::set_boot_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  boot_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:chippergrpc2.StreamingKnowledgeGraphRequest.boot_id)
}
inline void StreamingKnowledgeGraphRequest::set_boot_id(const char* value,
    size_t size) {
  
  boot_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:chippergrpc2.StreamingKnowledgeGraphRequest.boot_id)
}
inline std::string* StreamingKnowledgeGraphRequest::_internal_mutable_boot_id() {
  
  return boot_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* StreamingKnowledgeGraphRequest::release_boot_id() {
  // @@protoc_insertion_point(field_release:chippergrpc2.StreamingKnowledgeGraphRequest.boot_id)
  return boot_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void StreamingKnowledgeGraphRequest::set_allocated_boot_id(std::string* boot_id) {
  if (boot_id != nullptr) {
    
  } else {
    
  }
  boot_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), boot_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:chippergrpc2.StreamingKnowledgeGraphRequest.boot_id)
}
inline std::string* StreamingKnowledgeGraphRequest::unsafe_arena_release_boot_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:chippergrpc2.StreamingKnowledgeGraphRequest.boot_id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return boot_id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void StreamingKnowledgeGraphRequest::unsafe_arena_set_allocated_boot_id(
    std::string* boot_id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (boot_id != nullptr) {
    
  } else {
    
  }
  boot_id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      boot_id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:chippergrpc2.StreamingKnowledgeGraphRequest.boot_id)
}

// bool skip_das = 10;
inline void StreamingKnowledgeGraphRequest::clear_skip_das() {
  skip_das_ = false;
}
inline bool StreamingKnowledgeGraphRequest::_internal_skip_das() const {
  return skip_das_;
}
inline bool StreamingKnowledgeGraphRequest::skip_das() const {
  // @@protoc_insertion_point(field_get:chippergrpc2.StreamingKnowledgeGraphRequest.skip_das)
  return _internal_skip_das();
}
inline void StreamingKnowledgeGraphRequest::_internal_set_skip_das(bool value) {
  
  skip_das_ = value;
}
inline void StreamingKnowledgeGraphRequest::set_skip_das(bool value) {
  _internal_set_skip_das(value);
  // @@protoc_insertion_point(field_set:chippergrpc2.StreamingKnowledgeGraphRequest.skip_das)
}

// string timezone = 11;
inline void StreamingKnowledgeGraphRequest::clear_timezone() {
  timezone_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& StreamingKnowledgeGraphRequest::timezone() const {
  // @@protoc_insertion_point(field_get:chippergrpc2.StreamingKnowledgeGraphRequest.timezone)
  return _internal_timezone();
}
inline void StreamingKnowledgeGraphRequest::set_timezone(const std::string& value) {
  _internal_set_timezone(value);
  // @@protoc_insertion_point(field_set:chippergrpc2.StreamingKnowledgeGraphRequest.timezone)
}
inline std::string* StreamingKnowledgeGraphRequest::mutable_timezone() {
  // @@protoc_insertion_point(field_mutable:chippergrpc2.StreamingKnowledgeGraphRequest.timezone)
  return _internal_mutable_timezone();
}
inline const std::string& StreamingKnowledgeGraphRequest::_internal_timezone() const {
  return timezone_.Get();
}
inline void StreamingKnowledgeGraphRequest::_internal_set_timezone(const std::string& value) {
  
  timezone_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void StreamingKnowledgeGraphRequest::set_timezone(std::string&& value) {
  
  timezone_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:chippergrpc2.StreamingKnowledgeGraphRequest.timezone)
}
inline void StreamingKnowledgeGraphRequest::set_timezone(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  timezone_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:chippergrpc2.StreamingKnowledgeGraphRequest.timezone)
}
inline void StreamingKnowledgeGraphRequest::set_timezone(const char* value,
    size_t size) {
  
  timezone_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:chippergrpc2.StreamingKnowledgeGraphRequest.timezone)
}
inline std::string* StreamingKnowledgeGraphRequest::_internal_mutable_timezone() {
  
  return timezone_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* StreamingKnowledgeGraphRequest::release_timezone() {
  // @@protoc_insertion_point(field_release:chippergrpc2.StreamingKnowledgeGraphRequest.timezone)
  return timezone_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void StreamingKnowledgeGraphRequest::set_allocated_timezone(std::string* timezone) {
  if (timezone != nullptr) {
    
  } else {
    
  }
  timezone_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), timezone,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:chippergrpc2.StreamingKnowledgeGraphRequest.timezone)
}
inline std::string* StreamingKnowledgeGraphRequest::unsafe_arena_release_timezone() {
  // @@protoc_insertion_point(field_unsafe_arena_release:chippergrpc2.StreamingKnowledgeGraphRequest.timezone)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return timezone_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void StreamingKnowledgeGraphRequest::unsafe_arena_set_allocated_timezone(
    std::string* timezone) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (timezone != nullptr) {
    
  } else {
    
  }
  timezone_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      timezone, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:chippergrpc2.StreamingKnowledgeGraphRequest.timezone)
}

// -------------------------------------------------------------------

// StreamingConnectionCheckRequest

// string session = 1;
inline void StreamingConnectionCheckRequest::clear_session() {
  session_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& StreamingConnectionCheckRequest::session() const {
  // @@protoc_insertion_point(field_get:chippergrpc2.StreamingConnectionCheckRequest.session)
  return _internal_session();
}
inline void StreamingConnectionCheckRequest::set_session(const std::string& value) {
  _internal_set_session(value);
  // @@protoc_insertion_point(field_set:chippergrpc2.StreamingConnectionCheckRequest.session)
}
inline std::string* StreamingConnectionCheckRequest::mutable_session() {
  // @@protoc_insertion_point(field_mutable:chippergrpc2.StreamingConnectionCheckRequest.session)
  return _internal_mutable_session();
}
inline const std::string& StreamingConnectionCheckRequest::_internal_session() const {
  return session_.Get();
}
inline void StreamingConnectionCheckRequest::_internal_set_session(const std::string& value) {
  
  session_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void StreamingConnectionCheckRequest::set_session(std::string&& value) {
  
  session_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:chippergrpc2.StreamingConnectionCheckRequest.session)
}
inline void StreamingConnectionCheckRequest::set_session(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  session_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:chippergrpc2.StreamingConnectionCheckRequest.session)
}
inline void StreamingConnectionCheckRequest::set_session(const char* value,
    size_t size) {
  
  session_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:chippergrpc2.StreamingConnectionCheckRequest.session)
}
inline std::string* StreamingConnectionCheckRequest::_internal_mutable_session() {
  
  return session_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* StreamingConnectionCheckRequest::release_session() {
  // @@protoc_insertion_point(field_release:chippergrpc2.StreamingConnectionCheckRequest.session)
  return session_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void StreamingConnectionCheckRequest::set_allocated_session(std::string* session) {
  if (session != nullptr) {
    
  } else {
    
  }
  session_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), session,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:chippergrpc2.StreamingConnectionCheckRequest.session)
}
inline std::string* StreamingConnectionCheckRequest::unsafe_arena_release_session() {
  // @@protoc_insertion_point(field_unsafe_arena_release:chippergrpc2.StreamingConnectionCheckRequest.session)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return session_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void StreamingConnectionCheckRequest::unsafe_arena_set_allocated_session(
    std::string* session) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (session != nullptr) {
    
  } else {
    
  }
  session_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      session, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:chippergrpc2.StreamingConnectionCheckRequest.session)
}

// string device_id = 2;
inline void StreamingConnectionCheckRequest::clear_device_id() {
  device_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& StreamingConnectionCheckRequest::device_id() const {
  // @@protoc_insertion_point(field_get:chippergrpc2.StreamingConnectionCheckRequest.device_id)
  return _internal_device_id();
}
inline void StreamingConnectionCheckRequest::set_device_id(const std::string& value) {
  _internal_set_device_id(value);
  // @@protoc_insertion_point(field_set:chippergrpc2.StreamingConnectionCheckRequest.device_id)
}
inline std::string* StreamingConnectionCheckRequest::mutable_device_id() {
  // @@protoc_insertion_point(field_mutable:chippergrpc2.StreamingConnectionCheckRequest.device_id)
  return _internal_mutable_device_id();
}
inline const std::string& StreamingConnectionCheckRequest::_internal_device_id() const {
  return device_id_.Get();
}
inline void StreamingConnectionCheckRequest::_internal_set_device_id(const std::string& value) {
  
  device_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void StreamingConnectionCheckRequest::set_device_id(std::string&& value) {
  
  device_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:chippergrpc2.StreamingConnectionCheckRequest.device_id)
}
inline void StreamingConnectionCheckRequest::set_device_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  device_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:chippergrpc2.StreamingConnectionCheckRequest.device_id)
}
inline void StreamingConnectionCheckRequest::set_device_id(const char* value,
    size_t size) {
  
  device_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:chippergrpc2.StreamingConnectionCheckRequest.device_id)
}
inline std::string* StreamingConnectionCheckRequest::_internal_mutable_device_id() {
  
  return device_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* StreamingConnectionCheckRequest::release_device_id() {
  // @@protoc_insertion_point(field_release:chippergrpc2.StreamingConnectionCheckRequest.device_id)
  return device_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void StreamingConnectionCheckRequest::set_allocated_device_id(std::string* device_id) {
  if (device_id != nullptr) {
    
  } else {
    
  }
  device_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), device_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:chippergrpc2.StreamingConnectionCheckRequest.device_id)
}
inline std::string* StreamingConnectionCheckRequest::unsafe_arena_release_device_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:chippergrpc2.StreamingConnectionCheckRequest.device_id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return device_id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void StreamingConnectionCheckRequest::unsafe_arena_set_allocated_device_id(
    std::string* device_id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (device_id != nullptr) {
    
  } else {
    
  }
  device_id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      device_id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:chippergrpc2.StreamingConnectionCheckRequest.device_id)
}

// bytes input_audio = 3;
inline void StreamingConnectionCheckRequest::clear_input_audio() {
  input_audio_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& StreamingConnectionCheckRequest::input_audio() const {
  // @@protoc_insertion_point(field_get:chippergrpc2.StreamingConnectionCheckRequest.input_audio)
  return _internal_input_audio();
}
inline void StreamingConnectionCheckRequest::set_input_audio(const std::string& value) {
  _internal_set_input_audio(value);
  // @@protoc_insertion_point(field_set:chippergrpc2.StreamingConnectionCheckRequest.input_audio)
}
inline std::string* StreamingConnectionCheckRequest::mutable_input_audio() {
  // @@protoc_insertion_point(field_mutable:chippergrpc2.StreamingConnectionCheckRequest.input_audio)
  return _internal_mutable_input_audio();
}
inline const std::string& StreamingConnectionCheckRequest::_internal_input_audio() const {
  return input_audio_.Get();
}
inline void StreamingConnectionCheckRequest::_internal_set_input_audio(const std::string& value) {
  
  input_audio_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void StreamingConnectionCheckRequest::set_input_audio(std::string&& value) {
  
  input_audio_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:chippergrpc2.StreamingConnectionCheckRequest.input_audio)
}
inline void StreamingConnectionCheckRequest::set_input_audio(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  input_audio_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:chippergrpc2.StreamingConnectionCheckRequest.input_audio)
}
inline void StreamingConnectionCheckRequest::set_input_audio(const void* value,
    size_t size) {
  
  input_audio_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:chippergrpc2.StreamingConnectionCheckRequest.input_audio)
}
inline std::string* StreamingConnectionCheckRequest::_internal_mutable_input_audio() {
  
  return input_audio_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* StreamingConnectionCheckRequest::release_input_audio() {
  // @@protoc_insertion_point(field_release:chippergrpc2.StreamingConnectionCheckRequest.input_audio)
  return input_audio_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void StreamingConnectionCheckRequest::set_allocated_input_audio(std::string* input_audio) {
  if (input_audio != nullptr) {
    
  } else {
    
  }
  input_audio_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), input_audio,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:chippergrpc2.StreamingConnectionCheckRequest.input_audio)
}
inline std::string* StreamingConnectionCheckRequest::unsafe_arena_release_input_audio() {
  // @@protoc_insertion_point(field_unsafe_arena_release:chippergrpc2.StreamingConnectionCheckRequest.input_audio)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return input_audio_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void StreamingConnectionCheckRequest::unsafe_arena_set_allocated_input_audio(
    std::string* input_audio) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (input_audio != nullptr) {
    
  } else {
    
  }
  input_audio_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      input_audio, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:chippergrpc2.StreamingConnectionCheckRequest.input_audio)
}

// string firmware_version = 4;
inline void StreamingConnectionCheckRequest::clear_firmware_version() {
  firmware_version_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& StreamingConnectionCheckRequest::firmware_version() const {
  // @@protoc_insertion_point(field_get:chippergrpc2.StreamingConnectionCheckRequest.firmware_version)
  return _internal_firmware_version();
}
inline void StreamingConnectionCheckRequest::set_firmware_version(const std::string& value) {
  _internal_set_firmware_version(value);
  // @@protoc_insertion_point(field_set:chippergrpc2.StreamingConnectionCheckRequest.firmware_version)
}
inline std::string* StreamingConnectionCheckRequest::mutable_firmware_version() {
  // @@protoc_insertion_point(field_mutable:chippergrpc2.StreamingConnectionCheckRequest.firmware_version)
  return _internal_mutable_firmware_version();
}
inline const std::string& StreamingConnectionCheckRequest::_internal_firmware_version() const {
  return firmware_version_.Get();
}
inline void StreamingConnectionCheckRequest::_internal_set_firmware_version(const std::string& value) {
  
  firmware_version_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void StreamingConnectionCheckRequest::set_firmware_version(std::string&& value) {
  
  firmware_version_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:chippergrpc2.StreamingConnectionCheckRequest.firmware_version)
}
inline void StreamingConnectionCheckRequest::set_firmware_version(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  firmware_version_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:chippergrpc2.StreamingConnectionCheckRequest.firmware_version)
}
inline void StreamingConnectionCheckRequest::set_firmware_version(const char* value,
    size_t size) {
  
  firmware_version_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:chippergrpc2.StreamingConnectionCheckRequest.firmware_version)
}
inline std::string* StreamingConnectionCheckRequest::_internal_mutable_firmware_version() {
  
  return firmware_version_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* StreamingConnectionCheckRequest::release_firmware_version() {
  // @@protoc_insertion_point(field_release:chippergrpc2.StreamingConnectionCheckRequest.firmware_version)
  return firmware_version_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void StreamingConnectionCheckRequest::set_allocated_firmware_version(std::string* firmware_version) {
  if (firmware_version != nullptr) {
    
  } else {
    
  }
  firmware_version_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), firmware_version,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:chippergrpc2.StreamingConnectionCheckRequest.firmware_version)
}
inline std::string* StreamingConnectionCheckRequest::unsafe_arena_release_firmware_version() {
  // @@protoc_insertion_point(field_unsafe_arena_release:chippergrpc2.StreamingConnectionCheckRequest.firmware_version)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return firmware_version_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void StreamingConnectionCheckRequest::unsafe_arena_set_allocated_firmware_version(
    std::string* firmware_version) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (firmware_version != nullptr) {
    
  } else {
    
  }
  firmware_version_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      firmware_version, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:chippergrpc2.StreamingConnectionCheckRequest.firmware_version)
}

// string app_key = 5;
inline void StreamingConnectionCheckRequest::clear_app_key() {
  app_key_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& StreamingConnectionCheckRequest::app_key() const {
  // @@protoc_insertion_point(field_get:chippergrpc2.StreamingConnectionCheckRequest.app_key)
  return _internal_app_key();
}
inline void StreamingConnectionCheckRequest::set_app_key(const std::string& value) {
  _internal_set_app_key(value);
  // @@protoc_insertion_point(field_set:chippergrpc2.StreamingConnectionCheckRequest.app_key)
}
inline std::string* StreamingConnectionCheckRequest::mutable_app_key() {
  // @@protoc_insertion_point(field_mutable:chippergrpc2.StreamingConnectionCheckRequest.app_key)
  return _internal_mutable_app_key();
}
inline const std::string& StreamingConnectionCheckRequest::_internal_app_key() const {
  return app_key_.Get();
}
inline void StreamingConnectionCheckRequest::_internal_set_app_key(const std::string& value) {
  
  app_key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void StreamingConnectionCheckRequest::set_app_key(std::string&& value) {
  
  app_key_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:chippergrpc2.StreamingConnectionCheckRequest.app_key)
}
inline void StreamingConnectionCheckRequest::set_app_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  app_key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:chippergrpc2.StreamingConnectionCheckRequest.app_key)
}
inline void StreamingConnectionCheckRequest::set_app_key(const char* value,
    size_t size) {
  
  app_key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:chippergrpc2.StreamingConnectionCheckRequest.app_key)
}
inline std::string* StreamingConnectionCheckRequest::_internal_mutable_app_key() {
  
  return app_key_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* StreamingConnectionCheckRequest::release_app_key() {
  // @@protoc_insertion_point(field_release:chippergrpc2.StreamingConnectionCheckRequest.app_key)
  return app_key_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void StreamingConnectionCheckRequest::set_allocated_app_key(std::string* app_key) {
  if (app_key != nullptr) {
    
  } else {
    
  }
  app_key_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), app_key,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:chippergrpc2.StreamingConnectionCheckRequest.app_key)
}
inline std::string* StreamingConnectionCheckRequest::unsafe_arena_release_app_key() {
  // @@protoc_insertion_point(field_unsafe_arena_release:chippergrpc2.StreamingConnectionCheckRequest.app_key)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return app_key_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void StreamingConnectionCheckRequest::unsafe_arena_set_allocated_app_key(
    std::string* app_key) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (app_key != nullptr) {
    
  } else {
    
  }
  app_key_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      app_key, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:chippergrpc2.StreamingConnectionCheckRequest.app_key)
}

// uint32 total_audio_ms = 6;
inline void StreamingConnectionCheckRequest::clear_total_audio_ms() {
  total_audio_ms_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 StreamingConnectionCheckRequest::_internal_total_audio_ms() const {
  return total_audio_ms_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 StreamingConnectionCheckRequest::total_audio_ms() const {
  // @@protoc_insertion_point(field_get:chippergrpc2.StreamingConnectionCheckRequest.total_audio_ms)
  return _internal_total_audio_ms();
}
inline void StreamingConnectionCheckRequest::_internal_set_total_audio_ms(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  total_audio_ms_ = value;
}
inline void StreamingConnectionCheckRequest::set_total_audio_ms(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_total_audio_ms(value);
  // @@protoc_insertion_point(field_set:chippergrpc2.StreamingConnectionCheckRequest.total_audio_ms)
}

// uint32 audio_per_request = 7;
inline void StreamingConnectionCheckRequest::clear_audio_per_request() {
  audio_per_request_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 StreamingConnectionCheckRequest::_internal_audio_per_request() const {
  return audio_per_request_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 StreamingConnectionCheckRequest::audio_per_request() const {
  // @@protoc_insertion_point(field_get:chippergrpc2.StreamingConnectionCheckRequest.audio_per_request)
  return _internal_audio_per_request();
}
inline void StreamingConnectionCheckRequest::_internal_set_audio_per_request(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  audio_per_request_ = value;
}
inline void StreamingConnectionCheckRequest::set_audio_per_request(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_audio_per_request(value);
  // @@protoc_insertion_point(field_set:chippergrpc2.StreamingConnectionCheckRequest.audio_per_request)
}

// -------------------------------------------------------------------

// IntentResponse

// string session = 1;
inline void IntentResponse::clear_session() {
  session_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& IntentResponse::session() const {
  // @@protoc_insertion_point(field_get:chippergrpc2.IntentResponse.session)
  return _internal_session();
}
inline void IntentResponse::set_session(const std::string& value) {
  _internal_set_session(value);
  // @@protoc_insertion_point(field_set:chippergrpc2.IntentResponse.session)
}
inline std::string* IntentResponse::mutable_session() {
  // @@protoc_insertion_point(field_mutable:chippergrpc2.IntentResponse.session)
  return _internal_mutable_session();
}
inline const std::string& IntentResponse::_internal_session() const {
  return session_.Get();
}
inline void IntentResponse::_internal_set_session(const std::string& value) {
  
  session_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void IntentResponse::set_session(std::string&& value) {
  
  session_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:chippergrpc2.IntentResponse.session)
}
inline void IntentResponse::set_session(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  session_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:chippergrpc2.IntentResponse.session)
}
inline void IntentResponse::set_session(const char* value,
    size_t size) {
  
  session_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:chippergrpc2.IntentResponse.session)
}
inline std::string* IntentResponse::_internal_mutable_session() {
  
  return session_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* IntentResponse::release_session() {
  // @@protoc_insertion_point(field_release:chippergrpc2.IntentResponse.session)
  return session_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void IntentResponse::set_allocated_session(std::string* session) {
  if (session != nullptr) {
    
  } else {
    
  }
  session_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), session,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:chippergrpc2.IntentResponse.session)
}
inline std::string* IntentResponse::unsafe_arena_release_session() {
  // @@protoc_insertion_point(field_unsafe_arena_release:chippergrpc2.IntentResponse.session)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return session_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void IntentResponse::unsafe_arena_set_allocated_session(
    std::string* session) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (session != nullptr) {
    
  } else {
    
  }
  session_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      session, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:chippergrpc2.IntentResponse.session)
}

// string device_id = 2;
inline void IntentResponse::clear_device_id() {
  device_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& IntentResponse::device_id() const {
  // @@protoc_insertion_point(field_get:chippergrpc2.IntentResponse.device_id)
  return _internal_device_id();
}
inline void IntentResponse::set_device_id(const std::string& value) {
  _internal_set_device_id(value);
  // @@protoc_insertion_point(field_set:chippergrpc2.IntentResponse.device_id)
}
inline std::string* IntentResponse::mutable_device_id() {
  // @@protoc_insertion_point(field_mutable:chippergrpc2.IntentResponse.device_id)
  return _internal_mutable_device_id();
}
inline const std::string& IntentResponse::_internal_device_id() const {
  return device_id_.Get();
}
inline void IntentResponse::_internal_set_device_id(const std::string& value) {
  
  device_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void IntentResponse::set_device_id(std::string&& value) {
  
  device_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:chippergrpc2.IntentResponse.device_id)
}
inline void IntentResponse::set_device_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  device_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:chippergrpc2.IntentResponse.device_id)
}
inline void IntentResponse::set_device_id(const char* value,
    size_t size) {
  
  device_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:chippergrpc2.IntentResponse.device_id)
}
inline std::string* IntentResponse::_internal_mutable_device_id() {
  
  return device_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* IntentResponse::release_device_id() {
  // @@protoc_insertion_point(field_release:chippergrpc2.IntentResponse.device_id)
  return device_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void IntentResponse::set_allocated_device_id(std::string* device_id) {
  if (device_id != nullptr) {
    
  } else {
    
  }
  device_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), device_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:chippergrpc2.IntentResponse.device_id)
}
inline std::string* IntentResponse::unsafe_arena_release_device_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:chippergrpc2.IntentResponse.device_id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return device_id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void IntentResponse::unsafe_arena_set_allocated_device_id(
    std::string* device_id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (device_id != nullptr) {
    
  } else {
    
  }
  device_id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      device_id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:chippergrpc2.IntentResponse.device_id)
}

// bool is_final = 3;
inline void IntentResponse::clear_is_final() {
  is_final_ = false;
}
inline bool IntentResponse::_internal_is_final() const {
  return is_final_;
}
inline bool IntentResponse::is_final() const {
  // @@protoc_insertion_point(field_get:chippergrpc2.IntentResponse.is_final)
  return _internal_is_final();
}
inline void IntentResponse::_internal_set_is_final(bool value) {
  
  is_final_ = value;
}
inline void IntentResponse::set_is_final(bool value) {
  _internal_set_is_final(value);
  // @@protoc_insertion_point(field_set:chippergrpc2.IntentResponse.is_final)
}

// .chippergrpc2.IntentResult intent_result = 4;
inline bool IntentResponse::_internal_has_intent_result() const {
  return this != internal_default_instance() && intent_result_ != nullptr;
}
inline bool IntentResponse::has_intent_result() const {
  return _internal_has_intent_result();
}
inline void IntentResponse::clear_intent_result() {
  if (GetArena() == nullptr && intent_result_ != nullptr) {
    delete intent_result_;
  }
  intent_result_ = nullptr;
}
inline const ::chippergrpc2::IntentResult& IntentResponse::_internal_intent_result() const {
  const ::chippergrpc2::IntentResult* p = intent_result_;
  return p != nullptr ? *p : *reinterpret_cast<const ::chippergrpc2::IntentResult*>(
      &::chippergrpc2::_IntentResult_default_instance_);
}
inline const ::chippergrpc2::IntentResult& IntentResponse::intent_result() const {
  // @@protoc_insertion_point(field_get:chippergrpc2.IntentResponse.intent_result)
  return _internal_intent_result();
}
inline void IntentResponse::unsafe_arena_set_allocated_intent_result(
    ::chippergrpc2::IntentResult* intent_result) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(intent_result_);
  }
  intent_result_ = intent_result;
  if (intent_result) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:chippergrpc2.IntentResponse.intent_result)
}
inline ::chippergrpc2::IntentResult* IntentResponse::release_intent_result() {
  auto temp = unsafe_arena_release_intent_result();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::chippergrpc2::IntentResult* IntentResponse::unsafe_arena_release_intent_result() {
  // @@protoc_insertion_point(field_release:chippergrpc2.IntentResponse.intent_result)
  
  ::chippergrpc2::IntentResult* temp = intent_result_;
  intent_result_ = nullptr;
  return temp;
}
inline ::chippergrpc2::IntentResult* IntentResponse::_internal_mutable_intent_result() {
  
  if (intent_result_ == nullptr) {
    auto* p = CreateMaybeMessage<::chippergrpc2::IntentResult>(GetArena());
    intent_result_ = p;
  }
  return intent_result_;
}
inline ::chippergrpc2::IntentResult* IntentResponse::mutable_intent_result() {
  // @@protoc_insertion_point(field_mutable:chippergrpc2.IntentResponse.intent_result)
  return _internal_mutable_intent_result();
}
inline void IntentResponse::set_allocated_intent_result(::chippergrpc2::IntentResult* intent_result) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete intent_result_;
  }
  if (intent_result) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(intent_result);
    if (message_arena != submessage_arena) {
      intent_result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, intent_result, submessage_arena);
    }
    
  } else {
    
  }
  intent_result_ = intent_result;
  // @@protoc_insertion_point(field_set_allocated:chippergrpc2.IntentResponse.intent_result)
}

// .chippergrpc2.SpeechResult speech_result = 5;
inline bool IntentResponse::_internal_has_speech_result() const {
  return this != internal_default_instance() && speech_result_ != nullptr;
}
inline bool IntentResponse::has_speech_result() const {
  return _internal_has_speech_result();
}
inline void IntentResponse::clear_speech_result() {
  if (GetArena() == nullptr && speech_result_ != nullptr) {
    delete speech_result_;
  }
  speech_result_ = nullptr;
}
inline const ::chippergrpc2::SpeechResult& IntentResponse::_internal_speech_result() const {
  const ::chippergrpc2::SpeechResult* p = speech_result_;
  return p != nullptr ? *p : *reinterpret_cast<const ::chippergrpc2::SpeechResult*>(
      &::chippergrpc2::_SpeechResult_default_instance_);
}
inline const ::chippergrpc2::SpeechResult& IntentResponse::speech_result() const {
  // @@protoc_insertion_point(field_get:chippergrpc2.IntentResponse.speech_result)
  return _internal_speech_result();
}
inline void IntentResponse::unsafe_arena_set_allocated_speech_result(
    ::chippergrpc2::SpeechResult* speech_result) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(speech_result_);
  }
  speech_result_ = speech_result;
  if (speech_result) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:chippergrpc2.IntentResponse.speech_result)
}
inline ::chippergrpc2::SpeechResult* IntentResponse::release_speech_result() {
  auto temp = unsafe_arena_release_speech_result();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::chippergrpc2::SpeechResult* IntentResponse::unsafe_arena_release_speech_result() {
  // @@protoc_insertion_point(field_release:chippergrpc2.IntentResponse.speech_result)
  
  ::chippergrpc2::SpeechResult* temp = speech_result_;
  speech_result_ = nullptr;
  return temp;
}
inline ::chippergrpc2::SpeechResult* IntentResponse::_internal_mutable_speech_result() {
  
  if (speech_result_ == nullptr) {
    auto* p = CreateMaybeMessage<::chippergrpc2::SpeechResult>(GetArena());
    speech_result_ = p;
  }
  return speech_result_;
}
inline ::chippergrpc2::SpeechResult* IntentResponse::mutable_speech_result() {
  // @@protoc_insertion_point(field_mutable:chippergrpc2.IntentResponse.speech_result)
  return _internal_mutable_speech_result();
}
inline void IntentResponse::set_allocated_speech_result(::chippergrpc2::SpeechResult* speech_result) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete speech_result_;
  }
  if (speech_result) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(speech_result);
    if (message_arena != submessage_arena) {
      speech_result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, speech_result, submessage_arena);
    }
    
  } else {
    
  }
  speech_result_ = speech_result;
  // @@protoc_insertion_point(field_set_allocated:chippergrpc2.IntentResponse.speech_result)
}

// .chippergrpc2.RobotMode mode = 6;
inline void IntentResponse::clear_mode() {
  mode_ = 0;
}
inline ::chippergrpc2::RobotMode IntentResponse::_internal_mode() const {
  return static_cast< ::chippergrpc2::RobotMode >(mode_);
}
inline ::chippergrpc2::RobotMode IntentResponse::mode() const {
  // @@protoc_insertion_point(field_get:chippergrpc2.IntentResponse.mode)
  return _internal_mode();
}
inline void IntentResponse::_internal_set_mode(::chippergrpc2::RobotMode value) {
  
  mode_ = value;
}
inline void IntentResponse::set_mode(::chippergrpc2::RobotMode value) {
  _internal_set_mode(value);
  // @@protoc_insertion_point(field_set:chippergrpc2.IntentResponse.mode)
}

// string audio_id = 16;
inline void IntentResponse::clear_audio_id() {
  audio_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& IntentResponse::audio_id() const {
  // @@protoc_insertion_point(field_get:chippergrpc2.IntentResponse.audio_id)
  return _internal_audio_id();
}
inline void IntentResponse::set_audio_id(const std::string& value) {
  _internal_set_audio_id(value);
  // @@protoc_insertion_point(field_set:chippergrpc2.IntentResponse.audio_id)
}
inline std::string* IntentResponse::mutable_audio_id() {
  // @@protoc_insertion_point(field_mutable:chippergrpc2.IntentResponse.audio_id)
  return _internal_mutable_audio_id();
}
inline const std::string& IntentResponse::_internal_audio_id() const {
  return audio_id_.Get();
}
inline void IntentResponse::_internal_set_audio_id(const std::string& value) {
  
  audio_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void IntentResponse::set_audio_id(std::string&& value) {
  
  audio_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:chippergrpc2.IntentResponse.audio_id)
}
inline void IntentResponse::set_audio_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  audio_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:chippergrpc2.IntentResponse.audio_id)
}
inline void IntentResponse::set_audio_id(const char* value,
    size_t size) {
  
  audio_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:chippergrpc2.IntentResponse.audio_id)
}
inline std::string* IntentResponse::_internal_mutable_audio_id() {
  
  return audio_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* IntentResponse::release_audio_id() {
  // @@protoc_insertion_point(field_release:chippergrpc2.IntentResponse.audio_id)
  return audio_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void IntentResponse::set_allocated_audio_id(std::string* audio_id) {
  if (audio_id != nullptr) {
    
  } else {
    
  }
  audio_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), audio_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:chippergrpc2.IntentResponse.audio_id)
}
inline std::string* IntentResponse::unsafe_arena_release_audio_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:chippergrpc2.IntentResponse.audio_id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return audio_id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void IntentResponse::unsafe_arena_set_allocated_audio_id(
    std::string* audio_id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (audio_id != nullptr) {
    
  } else {
    
  }
  audio_id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      audio_id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:chippergrpc2.IntentResponse.audio_id)
}

// -------------------------------------------------------------------

// SpeechResult

// string transcript = 1;
inline void SpeechResult::clear_transcript() {
  transcript_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& SpeechResult::transcript() const {
  // @@protoc_insertion_point(field_get:chippergrpc2.SpeechResult.transcript)
  return _internal_transcript();
}
inline void SpeechResult::set_transcript(const std::string& value) {
  _internal_set_transcript(value);
  // @@protoc_insertion_point(field_set:chippergrpc2.SpeechResult.transcript)
}
inline std::string* SpeechResult::mutable_transcript() {
  // @@protoc_insertion_point(field_mutable:chippergrpc2.SpeechResult.transcript)
  return _internal_mutable_transcript();
}
inline const std::string& SpeechResult::_internal_transcript() const {
  return transcript_.Get();
}
inline void SpeechResult::_internal_set_transcript(const std::string& value) {
  
  transcript_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void SpeechResult::set_transcript(std::string&& value) {
  
  transcript_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:chippergrpc2.SpeechResult.transcript)
}
inline void SpeechResult::set_transcript(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  transcript_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:chippergrpc2.SpeechResult.transcript)
}
inline void SpeechResult::set_transcript(const char* value,
    size_t size) {
  
  transcript_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:chippergrpc2.SpeechResult.transcript)
}
inline std::string* SpeechResult::_internal_mutable_transcript() {
  
  return transcript_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* SpeechResult::release_transcript() {
  // @@protoc_insertion_point(field_release:chippergrpc2.SpeechResult.transcript)
  return transcript_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SpeechResult::set_allocated_transcript(std::string* transcript) {
  if (transcript != nullptr) {
    
  } else {
    
  }
  transcript_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), transcript,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:chippergrpc2.SpeechResult.transcript)
}
inline std::string* SpeechResult::unsafe_arena_release_transcript() {
  // @@protoc_insertion_point(field_unsafe_arena_release:chippergrpc2.SpeechResult.transcript)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return transcript_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void SpeechResult::unsafe_arena_set_allocated_transcript(
    std::string* transcript) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (transcript != nullptr) {
    
  } else {
    
  }
  transcript_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      transcript, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:chippergrpc2.SpeechResult.transcript)
}

// bool is_final = 2;
inline void SpeechResult::clear_is_final() {
  is_final_ = false;
}
inline bool SpeechResult::_internal_is_final() const {
  return is_final_;
}
inline bool SpeechResult::is_final() const {
  // @@protoc_insertion_point(field_get:chippergrpc2.SpeechResult.is_final)
  return _internal_is_final();
}
inline void SpeechResult::_internal_set_is_final(bool value) {
  
  is_final_ = value;
}
inline void SpeechResult::set_is_final(bool value) {
  _internal_set_is_final(value);
  // @@protoc_insertion_point(field_set:chippergrpc2.SpeechResult.is_final)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// IntentResult

// string query_text = 1;
inline void IntentResult::clear_query_text() {
  query_text_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& IntentResult::query_text() const {
  // @@protoc_insertion_point(field_get:chippergrpc2.IntentResult.query_text)
  return _internal_query_text();
}
inline void IntentResult::set_query_text(const std::string& value) {
  _internal_set_query_text(value);
  // @@protoc_insertion_point(field_set:chippergrpc2.IntentResult.query_text)
}
inline std::string* IntentResult::mutable_query_text() {
  // @@protoc_insertion_point(field_mutable:chippergrpc2.IntentResult.query_text)
  return _internal_mutable_query_text();
}
inline const std::string& IntentResult::_internal_query_text() const {
  return query_text_.Get();
}
inline void IntentResult::_internal_set_query_text(const std::string& value) {
  
  query_text_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void IntentResult::set_query_text(std::string&& value) {
  
  query_text_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:chippergrpc2.IntentResult.query_text)
}
inline void IntentResult::set_query_text(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  query_text_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:chippergrpc2.IntentResult.query_text)
}
inline void IntentResult::set_query_text(const char* value,
    size_t size) {
  
  query_text_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:chippergrpc2.IntentResult.query_text)
}
inline std::string* IntentResult::_internal_mutable_query_text() {
  
  return query_text_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* IntentResult::release_query_text() {
  // @@protoc_insertion_point(field_release:chippergrpc2.IntentResult.query_text)
  return query_text_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void IntentResult::set_allocated_query_text(std::string* query_text) {
  if (query_text != nullptr) {
    
  } else {
    
  }
  query_text_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), query_text,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:chippergrpc2.IntentResult.query_text)
}
inline std::string* IntentResult::unsafe_arena_release_query_text() {
  // @@protoc_insertion_point(field_unsafe_arena_release:chippergrpc2.IntentResult.query_text)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return query_text_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void IntentResult::unsafe_arena_set_allocated_query_text(
    std::string* query_text) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (query_text != nullptr) {
    
  } else {
    
  }
  query_text_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      query_text, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:chippergrpc2.IntentResult.query_text)
}

// string action = 2;
inline void IntentResult::clear_action() {
  action_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& IntentResult::action() const {
  // @@protoc_insertion_point(field_get:chippergrpc2.IntentResult.action)
  return _internal_action();
}
inline void IntentResult::set_action(const std::string& value) {
  _internal_set_action(value);
  // @@protoc_insertion_point(field_set:chippergrpc2.IntentResult.action)
}
inline std::string* IntentResult::mutable_action() {
  // @@protoc_insertion_point(field_mutable:chippergrpc2.IntentResult.action)
  return _internal_mutable_action();
}
inline const std::string& IntentResult::_internal_action() const {
  return action_.Get();
}
inline void IntentResult::_internal_set_action(const std::string& value) {
  
  action_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void IntentResult::set_action(std::string&& value) {
  
  action_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:chippergrpc2.IntentResult.action)
}
inline void IntentResult::set_action(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  action_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:chippergrpc2.IntentResult.action)
}
inline void IntentResult::set_action(const char* value,
    size_t size) {
  
  action_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:chippergrpc2.IntentResult.action)
}
inline std::string* IntentResult::_internal_mutable_action() {
  
  return action_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* IntentResult::release_action() {
  // @@protoc_insertion_point(field_release:chippergrpc2.IntentResult.action)
  return action_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void IntentResult::set_allocated_action(std::string* action) {
  if (action != nullptr) {
    
  } else {
    
  }
  action_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), action,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:chippergrpc2.IntentResult.action)
}
inline std::string* IntentResult::unsafe_arena_release_action() {
  // @@protoc_insertion_point(field_unsafe_arena_release:chippergrpc2.IntentResult.action)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return action_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void IntentResult::unsafe_arena_set_allocated_action(
    std::string* action) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (action != nullptr) {
    
  } else {
    
  }
  action_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      action, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:chippergrpc2.IntentResult.action)
}

// float intent_confidence = 3;
inline void IntentResult::clear_intent_confidence() {
  intent_confidence_ = 0;
}
inline float IntentResult::_internal_intent_confidence() const {
  return intent_confidence_;
}
inline float IntentResult::intent_confidence() const {
  // @@protoc_insertion_point(field_get:chippergrpc2.IntentResult.intent_confidence)
  return _internal_intent_confidence();
}
inline void IntentResult::_internal_set_intent_confidence(float value) {
  
  intent_confidence_ = value;
}
inline void IntentResult::set_intent_confidence(float value) {
  _internal_set_intent_confidence(value);
  // @@protoc_insertion_point(field_set:chippergrpc2.IntentResult.intent_confidence)
}

// float speech_confidence = 4;
inline void IntentResult::clear_speech_confidence() {
  speech_confidence_ = 0;
}
inline float IntentResult::_internal_speech_confidence() const {
  return speech_confidence_;
}
inline float IntentResult::speech_confidence() const {
  // @@protoc_insertion_point(field_get:chippergrpc2.IntentResult.speech_confidence)
  return _internal_speech_confidence();
}
inline void IntentResult::_internal_set_speech_confidence(float value) {
  
  speech_confidence_ = value;
}
inline void IntentResult::set_speech_confidence(float value) {
  _internal_set_speech_confidence(value);
  // @@protoc_insertion_point(field_set:chippergrpc2.IntentResult.speech_confidence)
}

// map<string, string> parameters = 5;
inline int IntentResult::_internal_parameters_size() const {
  return parameters_.size();
}
inline int IntentResult::parameters_size() const {
  return _internal_parameters_size();
}
inline void IntentResult::clear_parameters() {
  parameters_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
IntentResult::_internal_parameters() const {
  return parameters_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
IntentResult::parameters() const {
  // @@protoc_insertion_point(field_map:chippergrpc2.IntentResult.parameters)
  return _internal_parameters();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
IntentResult::_internal_mutable_parameters() {
  return parameters_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
IntentResult::mutable_parameters() {
  // @@protoc_insertion_point(field_mutable_map:chippergrpc2.IntentResult.parameters)
  return _internal_mutable_parameters();
}

// bool all_parameters_present = 6;
inline void IntentResult::clear_all_parameters_present() {
  all_parameters_present_ = false;
}
inline bool IntentResult::_internal_all_parameters_present() const {
  return all_parameters_present_;
}
inline bool IntentResult::all_parameters_present() const {
  // @@protoc_insertion_point(field_get:chippergrpc2.IntentResult.all_parameters_present)
  return _internal_all_parameters_present();
}
inline void IntentResult::_internal_set_all_parameters_present(bool value) {
  
  all_parameters_present_ = value;
}
inline void IntentResult::set_all_parameters_present(bool value) {
  _internal_set_all_parameters_present(value);
  // @@protoc_insertion_point(field_set:chippergrpc2.IntentResult.all_parameters_present)
}

// bool has_context = 7;
inline void IntentResult::clear_has_context() {
  has_context_ = false;
}
inline bool IntentResult::_internal_has_context() const {
  return has_context_;
}
inline bool IntentResult::has_context() const {
  // @@protoc_insertion_point(field_get:chippergrpc2.IntentResult.has_context)
  return _internal_has_context();
}
inline void IntentResult::_internal_set_has_context(bool value) {
  
  has_context_ = value;
}
inline void IntentResult::set_has_context(bool value) {
  _internal_set_has_context(value);
  // @@protoc_insertion_point(field_set:chippergrpc2.IntentResult.has_context)
}

// .chippergrpc2.IntentService service = 8;
inline void IntentResult::clear_service() {
  service_ = 0;
}
inline ::chippergrpc2::IntentService IntentResult::_internal_service() const {
  return static_cast< ::chippergrpc2::IntentService >(service_);
}
inline ::chippergrpc2::IntentService IntentResult::service() const {
  // @@protoc_insertion_point(field_get:chippergrpc2.IntentResult.service)
  return _internal_service();
}
inline void IntentResult::_internal_set_service(::chippergrpc2::IntentService value) {
  
  service_ = value;
}
inline void IntentResult::set_service(::chippergrpc2::IntentService value) {
  _internal_set_service(value);
  // @@protoc_insertion_point(field_set:chippergrpc2.IntentResult.service)
}

// .chippergrpc2.KnowledgeGraphResponse kgresponse = 9;
inline bool IntentResult::_internal_has_kgresponse() const {
  return this != internal_default_instance() && kgresponse_ != nullptr;
}
inline bool IntentResult::has_kgresponse() const {
  return _internal_has_kgresponse();
}
inline void IntentResult::clear_kgresponse() {
  if (GetArena() == nullptr && kgresponse_ != nullptr) {
    delete kgresponse_;
  }
  kgresponse_ = nullptr;
}
inline const ::chippergrpc2::KnowledgeGraphResponse& IntentResult::_internal_kgresponse() const {
  const ::chippergrpc2::KnowledgeGraphResponse* p = kgresponse_;
  return p != nullptr ? *p : *reinterpret_cast<const ::chippergrpc2::KnowledgeGraphResponse*>(
      &::chippergrpc2::_KnowledgeGraphResponse_default_instance_);
}
inline const ::chippergrpc2::KnowledgeGraphResponse& IntentResult::kgresponse() const {
  // @@protoc_insertion_point(field_get:chippergrpc2.IntentResult.kgresponse)
  return _internal_kgresponse();
}
inline void IntentResult::unsafe_arena_set_allocated_kgresponse(
    ::chippergrpc2::KnowledgeGraphResponse* kgresponse) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(kgresponse_);
  }
  kgresponse_ = kgresponse;
  if (kgresponse) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:chippergrpc2.IntentResult.kgresponse)
}
inline ::chippergrpc2::KnowledgeGraphResponse* IntentResult::release_kgresponse() {
  auto temp = unsafe_arena_release_kgresponse();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::chippergrpc2::KnowledgeGraphResponse* IntentResult::unsafe_arena_release_kgresponse() {
  // @@protoc_insertion_point(field_release:chippergrpc2.IntentResult.kgresponse)
  
  ::chippergrpc2::KnowledgeGraphResponse* temp = kgresponse_;
  kgresponse_ = nullptr;
  return temp;
}
inline ::chippergrpc2::KnowledgeGraphResponse* IntentResult::_internal_mutable_kgresponse() {
  
  if (kgresponse_ == nullptr) {
    auto* p = CreateMaybeMessage<::chippergrpc2::KnowledgeGraphResponse>(GetArena());
    kgresponse_ = p;
  }
  return kgresponse_;
}
inline ::chippergrpc2::KnowledgeGraphResponse* IntentResult::mutable_kgresponse() {
  // @@protoc_insertion_point(field_mutable:chippergrpc2.IntentResult.kgresponse)
  return _internal_mutable_kgresponse();
}
inline void IntentResult::set_allocated_kgresponse(::chippergrpc2::KnowledgeGraphResponse* kgresponse) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete kgresponse_;
  }
  if (kgresponse) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(kgresponse);
    if (message_arena != submessage_arena) {
      kgresponse = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, kgresponse, submessage_arena);
    }
    
  } else {
    
  }
  kgresponse_ = kgresponse;
  // @@protoc_insertion_point(field_set_allocated:chippergrpc2.IntentResult.kgresponse)
}

// -------------------------------------------------------------------

// KnowledgeGraphResponse

// string session = 1;
inline void KnowledgeGraphResponse::clear_session() {
  session_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& KnowledgeGraphResponse::session() const {
  // @@protoc_insertion_point(field_get:chippergrpc2.KnowledgeGraphResponse.session)
  return _internal_session();
}
inline void KnowledgeGraphResponse::set_session(const std::string& value) {
  _internal_set_session(value);
  // @@protoc_insertion_point(field_set:chippergrpc2.KnowledgeGraphResponse.session)
}
inline std::string* KnowledgeGraphResponse::mutable_session() {
  // @@protoc_insertion_point(field_mutable:chippergrpc2.KnowledgeGraphResponse.session)
  return _internal_mutable_session();
}
inline const std::string& KnowledgeGraphResponse::_internal_session() const {
  return session_.Get();
}
inline void KnowledgeGraphResponse::_internal_set_session(const std::string& value) {
  
  session_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void KnowledgeGraphResponse::set_session(std::string&& value) {
  
  session_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:chippergrpc2.KnowledgeGraphResponse.session)
}
inline void KnowledgeGraphResponse::set_session(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  session_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:chippergrpc2.KnowledgeGraphResponse.session)
}
inline void KnowledgeGraphResponse::set_session(const char* value,
    size_t size) {
  
  session_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:chippergrpc2.KnowledgeGraphResponse.session)
}
inline std::string* KnowledgeGraphResponse::_internal_mutable_session() {
  
  return session_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* KnowledgeGraphResponse::release_session() {
  // @@protoc_insertion_point(field_release:chippergrpc2.KnowledgeGraphResponse.session)
  return session_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void KnowledgeGraphResponse::set_allocated_session(std::string* session) {
  if (session != nullptr) {
    
  } else {
    
  }
  session_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), session,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:chippergrpc2.KnowledgeGraphResponse.session)
}
inline std::string* KnowledgeGraphResponse::unsafe_arena_release_session() {
  // @@protoc_insertion_point(field_unsafe_arena_release:chippergrpc2.KnowledgeGraphResponse.session)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return session_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void KnowledgeGraphResponse::unsafe_arena_set_allocated_session(
    std::string* session) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (session != nullptr) {
    
  } else {
    
  }
  session_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      session, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:chippergrpc2.KnowledgeGraphResponse.session)
}

// string device_id = 2;
inline void KnowledgeGraphResponse::clear_device_id() {
  device_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& KnowledgeGraphResponse::device_id() const {
  // @@protoc_insertion_point(field_get:chippergrpc2.KnowledgeGraphResponse.device_id)
  return _internal_device_id();
}
inline void KnowledgeGraphResponse::set_device_id(const std::string& value) {
  _internal_set_device_id(value);
  // @@protoc_insertion_point(field_set:chippergrpc2.KnowledgeGraphResponse.device_id)
}
inline std::string* KnowledgeGraphResponse::mutable_device_id() {
  // @@protoc_insertion_point(field_mutable:chippergrpc2.KnowledgeGraphResponse.device_id)
  return _internal_mutable_device_id();
}
inline const std::string& KnowledgeGraphResponse::_internal_device_id() const {
  return device_id_.Get();
}
inline void KnowledgeGraphResponse::_internal_set_device_id(const std::string& value) {
  
  device_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void KnowledgeGraphResponse::set_device_id(std::string&& value) {
  
  device_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:chippergrpc2.KnowledgeGraphResponse.device_id)
}
inline void KnowledgeGraphResponse::set_device_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  device_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:chippergrpc2.KnowledgeGraphResponse.device_id)
}
inline void KnowledgeGraphResponse::set_device_id(const char* value,
    size_t size) {
  
  device_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:chippergrpc2.KnowledgeGraphResponse.device_id)
}
inline std::string* KnowledgeGraphResponse::_internal_mutable_device_id() {
  
  return device_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* KnowledgeGraphResponse::release_device_id() {
  // @@protoc_insertion_point(field_release:chippergrpc2.KnowledgeGraphResponse.device_id)
  return device_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void KnowledgeGraphResponse::set_allocated_device_id(std::string* device_id) {
  if (device_id != nullptr) {
    
  } else {
    
  }
  device_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), device_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:chippergrpc2.KnowledgeGraphResponse.device_id)
}
inline std::string* KnowledgeGraphResponse::unsafe_arena_release_device_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:chippergrpc2.KnowledgeGraphResponse.device_id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return device_id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void KnowledgeGraphResponse::unsafe_arena_set_allocated_device_id(
    std::string* device_id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (device_id != nullptr) {
    
  } else {
    
  }
  device_id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      device_id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:chippergrpc2.KnowledgeGraphResponse.device_id)
}

// string query_text = 3;
inline void KnowledgeGraphResponse::clear_query_text() {
  query_text_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& KnowledgeGraphResponse::query_text() const {
  // @@protoc_insertion_point(field_get:chippergrpc2.KnowledgeGraphResponse.query_text)
  return _internal_query_text();
}
inline void KnowledgeGraphResponse::set_query_text(const std::string& value) {
  _internal_set_query_text(value);
  // @@protoc_insertion_point(field_set:chippergrpc2.KnowledgeGraphResponse.query_text)
}
inline std::string* KnowledgeGraphResponse::mutable_query_text() {
  // @@protoc_insertion_point(field_mutable:chippergrpc2.KnowledgeGraphResponse.query_text)
  return _internal_mutable_query_text();
}
inline const std::string& KnowledgeGraphResponse::_internal_query_text() const {
  return query_text_.Get();
}
inline void KnowledgeGraphResponse::_internal_set_query_text(const std::string& value) {
  
  query_text_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void KnowledgeGraphResponse::set_query_text(std::string&& value) {
  
  query_text_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:chippergrpc2.KnowledgeGraphResponse.query_text)
}
inline void KnowledgeGraphResponse::set_query_text(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  query_text_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:chippergrpc2.KnowledgeGraphResponse.query_text)
}
inline void KnowledgeGraphResponse::set_query_text(const char* value,
    size_t size) {
  
  query_text_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:chippergrpc2.KnowledgeGraphResponse.query_text)
}
inline std::string* KnowledgeGraphResponse::_internal_mutable_query_text() {
  
  return query_text_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* KnowledgeGraphResponse::release_query_text() {
  // @@protoc_insertion_point(field_release:chippergrpc2.KnowledgeGraphResponse.query_text)
  return query_text_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void KnowledgeGraphResponse::set_allocated_query_text(std::string* query_text) {
  if (query_text != nullptr) {
    
  } else {
    
  }
  query_text_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), query_text,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:chippergrpc2.KnowledgeGraphResponse.query_text)
}
inline std::string* KnowledgeGraphResponse::unsafe_arena_release_query_text() {
  // @@protoc_insertion_point(field_unsafe_arena_release:chippergrpc2.KnowledgeGraphResponse.query_text)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return query_text_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void KnowledgeGraphResponse::unsafe_arena_set_allocated_query_text(
    std::string* query_text) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (query_text != nullptr) {
    
  } else {
    
  }
  query_text_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      query_text, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:chippergrpc2.KnowledgeGraphResponse.query_text)
}

// string spoken_text = 4;
inline void KnowledgeGraphResponse::clear_spoken_text() {
  spoken_text_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& KnowledgeGraphResponse::spoken_text() const {
  // @@protoc_insertion_point(field_get:chippergrpc2.KnowledgeGraphResponse.spoken_text)
  return _internal_spoken_text();
}
inline void KnowledgeGraphResponse::set_spoken_text(const std::string& value) {
  _internal_set_spoken_text(value);
  // @@protoc_insertion_point(field_set:chippergrpc2.KnowledgeGraphResponse.spoken_text)
}
inline std::string* KnowledgeGraphResponse::mutable_spoken_text() {
  // @@protoc_insertion_point(field_mutable:chippergrpc2.KnowledgeGraphResponse.spoken_text)
  return _internal_mutable_spoken_text();
}
inline const std::string& KnowledgeGraphResponse::_internal_spoken_text() const {
  return spoken_text_.Get();
}
inline void KnowledgeGraphResponse::_internal_set_spoken_text(const std::string& value) {
  
  spoken_text_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void KnowledgeGraphResponse::set_spoken_text(std::string&& value) {
  
  spoken_text_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:chippergrpc2.KnowledgeGraphResponse.spoken_text)
}
inline void KnowledgeGraphResponse::set_spoken_text(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  spoken_text_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:chippergrpc2.KnowledgeGraphResponse.spoken_text)
}
inline void KnowledgeGraphResponse::set_spoken_text(const char* value,
    size_t size) {
  
  spoken_text_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:chippergrpc2.KnowledgeGraphResponse.spoken_text)
}
inline std::string* KnowledgeGraphResponse::_internal_mutable_spoken_text() {
  
  return spoken_text_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* KnowledgeGraphResponse::release_spoken_text() {
  // @@protoc_insertion_point(field_release:chippergrpc2.KnowledgeGraphResponse.spoken_text)
  return spoken_text_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void KnowledgeGraphResponse::set_allocated_spoken_text(std::string* spoken_text) {
  if (spoken_text != nullptr) {
    
  } else {
    
  }
  spoken_text_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), spoken_text,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:chippergrpc2.KnowledgeGraphResponse.spoken_text)
}
inline std::string* KnowledgeGraphResponse::unsafe_arena_release_spoken_text() {
  // @@protoc_insertion_point(field_unsafe_arena_release:chippergrpc2.KnowledgeGraphResponse.spoken_text)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return spoken_text_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void KnowledgeGraphResponse::unsafe_arena_set_allocated_spoken_text(
    std::string* spoken_text) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (spoken_text != nullptr) {
    
  } else {
    
  }
  spoken_text_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      spoken_text, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:chippergrpc2.KnowledgeGraphResponse.spoken_text)
}

// string command_type = 5;
inline void KnowledgeGraphResponse::clear_command_type() {
  command_type_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& KnowledgeGraphResponse::command_type() const {
  // @@protoc_insertion_point(field_get:chippergrpc2.KnowledgeGraphResponse.command_type)
  return _internal_command_type();
}
inline void KnowledgeGraphResponse::set_command_type(const std::string& value) {
  _internal_set_command_type(value);
  // @@protoc_insertion_point(field_set:chippergrpc2.KnowledgeGraphResponse.command_type)
}
inline std::string* KnowledgeGraphResponse::mutable_command_type() {
  // @@protoc_insertion_point(field_mutable:chippergrpc2.KnowledgeGraphResponse.command_type)
  return _internal_mutable_command_type();
}
inline const std::string& KnowledgeGraphResponse::_internal_command_type() const {
  return command_type_.Get();
}
inline void KnowledgeGraphResponse::_internal_set_command_type(const std::string& value) {
  
  command_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void KnowledgeGraphResponse::set_command_type(std::string&& value) {
  
  command_type_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:chippergrpc2.KnowledgeGraphResponse.command_type)
}
inline void KnowledgeGraphResponse::set_command_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  command_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:chippergrpc2.KnowledgeGraphResponse.command_type)
}
inline void KnowledgeGraphResponse::set_command_type(const char* value,
    size_t size) {
  
  command_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:chippergrpc2.KnowledgeGraphResponse.command_type)
}
inline std::string* KnowledgeGraphResponse::_internal_mutable_command_type() {
  
  return command_type_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* KnowledgeGraphResponse::release_command_type() {
  // @@protoc_insertion_point(field_release:chippergrpc2.KnowledgeGraphResponse.command_type)
  return command_type_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void KnowledgeGraphResponse::set_allocated_command_type(std::string* command_type) {
  if (command_type != nullptr) {
    
  } else {
    
  }
  command_type_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), command_type,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:chippergrpc2.KnowledgeGraphResponse.command_type)
}
inline std::string* KnowledgeGraphResponse::unsafe_arena_release_command_type() {
  // @@protoc_insertion_point(field_unsafe_arena_release:chippergrpc2.KnowledgeGraphResponse.command_type)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return command_type_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void KnowledgeGraphResponse::unsafe_arena_set_allocated_command_type(
    std::string* command_type) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (command_type != nullptr) {
    
  } else {
    
  }
  command_type_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      command_type, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:chippergrpc2.KnowledgeGraphResponse.command_type)
}

// repeated string domains_used = 6;
inline int KnowledgeGraphResponse::_internal_domains_used_size() const {
  return domains_used_.size();
}
inline int KnowledgeGraphResponse::domains_used_size() const {
  return _internal_domains_used_size();
}
inline void KnowledgeGraphResponse::clear_domains_used() {
  domains_used_.Clear();
}
inline std::string* KnowledgeGraphResponse::add_domains_used() {
  // @@protoc_insertion_point(field_add_mutable:chippergrpc2.KnowledgeGraphResponse.domains_used)
  return _internal_add_domains_used();
}
inline const std::string& KnowledgeGraphResponse::_internal_domains_used(int index) const {
  return domains_used_.Get(index);
}
inline const std::string& KnowledgeGraphResponse::domains_used(int index) const {
  // @@protoc_insertion_point(field_get:chippergrpc2.KnowledgeGraphResponse.domains_used)
  return _internal_domains_used(index);
}
inline std::string* KnowledgeGraphResponse::mutable_domains_used(int index) {
  // @@protoc_insertion_point(field_mutable:chippergrpc2.KnowledgeGraphResponse.domains_used)
  return domains_used_.Mutable(index);
}
inline void KnowledgeGraphResponse::set_domains_used(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:chippergrpc2.KnowledgeGraphResponse.domains_used)
  domains_used_.Mutable(index)->assign(value);
}
inline void KnowledgeGraphResponse::set_domains_used(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:chippergrpc2.KnowledgeGraphResponse.domains_used)
  domains_used_.Mutable(index)->assign(std::move(value));
}
inline void KnowledgeGraphResponse::set_domains_used(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  domains_used_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:chippergrpc2.KnowledgeGraphResponse.domains_used)
}
inline void KnowledgeGraphResponse::set_domains_used(int index, const char* value, size_t size) {
  domains_used_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:chippergrpc2.KnowledgeGraphResponse.domains_used)
}
inline std::string* KnowledgeGraphResponse::_internal_add_domains_used() {
  return domains_used_.Add();
}
inline void KnowledgeGraphResponse::add_domains_used(const std::string& value) {
  domains_used_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:chippergrpc2.KnowledgeGraphResponse.domains_used)
}
inline void KnowledgeGraphResponse::add_domains_used(std::string&& value) {
  domains_used_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:chippergrpc2.KnowledgeGraphResponse.domains_used)
}
inline void KnowledgeGraphResponse::add_domains_used(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  domains_used_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:chippergrpc2.KnowledgeGraphResponse.domains_used)
}
inline void KnowledgeGraphResponse::add_domains_used(const char* value, size_t size) {
  domains_used_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:chippergrpc2.KnowledgeGraphResponse.domains_used)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
KnowledgeGraphResponse::domains_used() const {
  // @@protoc_insertion_point(field_list:chippergrpc2.KnowledgeGraphResponse.domains_used)
  return domains_used_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
KnowledgeGraphResponse::mutable_domains_used() {
  // @@protoc_insertion_point(field_mutable_list:chippergrpc2.KnowledgeGraphResponse.domains_used)
  return &domains_used_;
}

// string audio_id = 7;
inline void KnowledgeGraphResponse::clear_audio_id() {
  audio_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& KnowledgeGraphResponse::audio_id() const {
  // @@protoc_insertion_point(field_get:chippergrpc2.KnowledgeGraphResponse.audio_id)
  return _internal_audio_id();
}
inline void KnowledgeGraphResponse::set_audio_id(const std::string& value) {
  _internal_set_audio_id(value);
  // @@protoc_insertion_point(field_set:chippergrpc2.KnowledgeGraphResponse.audio_id)
}
inline std::string* KnowledgeGraphResponse::mutable_audio_id() {
  // @@protoc_insertion_point(field_mutable:chippergrpc2.KnowledgeGraphResponse.audio_id)
  return _internal_mutable_audio_id();
}
inline const std::string& KnowledgeGraphResponse::_internal_audio_id() const {
  return audio_id_.Get();
}
inline void KnowledgeGraphResponse::_internal_set_audio_id(const std::string& value) {
  
  audio_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void KnowledgeGraphResponse::set_audio_id(std::string&& value) {
  
  audio_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:chippergrpc2.KnowledgeGraphResponse.audio_id)
}
inline void KnowledgeGraphResponse::set_audio_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  audio_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:chippergrpc2.KnowledgeGraphResponse.audio_id)
}
inline void KnowledgeGraphResponse::set_audio_id(const char* value,
    size_t size) {
  
  audio_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:chippergrpc2.KnowledgeGraphResponse.audio_id)
}
inline std::string* KnowledgeGraphResponse::_internal_mutable_audio_id() {
  
  return audio_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* KnowledgeGraphResponse::release_audio_id() {
  // @@protoc_insertion_point(field_release:chippergrpc2.KnowledgeGraphResponse.audio_id)
  return audio_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void KnowledgeGraphResponse::set_allocated_audio_id(std::string* audio_id) {
  if (audio_id != nullptr) {
    
  } else {
    
  }
  audio_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), audio_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:chippergrpc2.KnowledgeGraphResponse.audio_id)
}
inline std::string* KnowledgeGraphResponse::unsafe_arena_release_audio_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:chippergrpc2.KnowledgeGraphResponse.audio_id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return audio_id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void KnowledgeGraphResponse::unsafe_arena_set_allocated_audio_id(
    std::string* audio_id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (audio_id != nullptr) {
    
  } else {
    
  }
  audio_id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      audio_id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:chippergrpc2.KnowledgeGraphResponse.audio_id)
}

// -------------------------------------------------------------------

// ConnectionCheckResponse

// string status = 1;
inline void ConnectionCheckResponse::clear_status() {
  status_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ConnectionCheckResponse::status() const {
  // @@protoc_insertion_point(field_get:chippergrpc2.ConnectionCheckResponse.status)
  return _internal_status();
}
inline void ConnectionCheckResponse::set_status(const std::string& value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:chippergrpc2.ConnectionCheckResponse.status)
}
inline std::string* ConnectionCheckResponse::mutable_status() {
  // @@protoc_insertion_point(field_mutable:chippergrpc2.ConnectionCheckResponse.status)
  return _internal_mutable_status();
}
inline const std::string& ConnectionCheckResponse::_internal_status() const {
  return status_.Get();
}
inline void ConnectionCheckResponse::_internal_set_status(const std::string& value) {
  
  status_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ConnectionCheckResponse::set_status(std::string&& value) {
  
  status_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:chippergrpc2.ConnectionCheckResponse.status)
}
inline void ConnectionCheckResponse::set_status(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  status_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:chippergrpc2.ConnectionCheckResponse.status)
}
inline void ConnectionCheckResponse::set_status(const char* value,
    size_t size) {
  
  status_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:chippergrpc2.ConnectionCheckResponse.status)
}
inline std::string* ConnectionCheckResponse::_internal_mutable_status() {
  
  return status_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ConnectionCheckResponse::release_status() {
  // @@protoc_insertion_point(field_release:chippergrpc2.ConnectionCheckResponse.status)
  return status_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ConnectionCheckResponse::set_allocated_status(std::string* status) {
  if (status != nullptr) {
    
  } else {
    
  }
  status_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), status,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:chippergrpc2.ConnectionCheckResponse.status)
}
inline std::string* ConnectionCheckResponse::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_unsafe_arena_release:chippergrpc2.ConnectionCheckResponse.status)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return status_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ConnectionCheckResponse::unsafe_arena_set_allocated_status(
    std::string* status) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (status != nullptr) {
    
  } else {
    
  }
  status_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      status, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:chippergrpc2.ConnectionCheckResponse.status)
}

// uint32 frames_received = 2;
inline void ConnectionCheckResponse::clear_frames_received() {
  frames_received_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ConnectionCheckResponse::_internal_frames_received() const {
  return frames_received_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ConnectionCheckResponse::frames_received() const {
  // @@protoc_insertion_point(field_get:chippergrpc2.ConnectionCheckResponse.frames_received)
  return _internal_frames_received();
}
inline void ConnectionCheckResponse::_internal_set_frames_received(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  frames_received_ = value;
}
inline void ConnectionCheckResponse::set_frames_received(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_frames_received(value);
  // @@protoc_insertion_point(field_set:chippergrpc2.ConnectionCheckResponse.frames_received)
}

// -------------------------------------------------------------------

// WeatherLocation

// string city = 1;
inline void WeatherLocation::clear_city() {
  city_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& WeatherLocation::city() const {
  // @@protoc_insertion_point(field_get:chippergrpc2.WeatherLocation.city)
  return _internal_city();
}
inline void WeatherLocation::set_city(const std::string& value) {
  _internal_set_city(value);
  // @@protoc_insertion_point(field_set:chippergrpc2.WeatherLocation.city)
}
inline std::string* WeatherLocation::mutable_city() {
  // @@protoc_insertion_point(field_mutable:chippergrpc2.WeatherLocation.city)
  return _internal_mutable_city();
}
inline const std::string& WeatherLocation::_internal_city() const {
  return city_.Get();
}
inline void WeatherLocation::_internal_set_city(const std::string& value) {
  
  city_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void WeatherLocation::set_city(std::string&& value) {
  
  city_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:chippergrpc2.WeatherLocation.city)
}
inline void WeatherLocation::set_city(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  city_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:chippergrpc2.WeatherLocation.city)
}
inline void WeatherLocation::set_city(const char* value,
    size_t size) {
  
  city_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:chippergrpc2.WeatherLocation.city)
}
inline std::string* WeatherLocation::_internal_mutable_city() {
  
  return city_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* WeatherLocation::release_city() {
  // @@protoc_insertion_point(field_release:chippergrpc2.WeatherLocation.city)
  return city_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void WeatherLocation::set_allocated_city(std::string* city) {
  if (city != nullptr) {
    
  } else {
    
  }
  city_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), city,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:chippergrpc2.WeatherLocation.city)
}
inline std::string* WeatherLocation::unsafe_arena_release_city() {
  // @@protoc_insertion_point(field_unsafe_arena_release:chippergrpc2.WeatherLocation.city)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return city_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void WeatherLocation::unsafe_arena_set_allocated_city(
    std::string* city) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (city != nullptr) {
    
  } else {
    
  }
  city_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      city, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:chippergrpc2.WeatherLocation.city)
}

// string state = 2;
inline void WeatherLocation::clear_state() {
  state_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& WeatherLocation::state() const {
  // @@protoc_insertion_point(field_get:chippergrpc2.WeatherLocation.state)
  return _internal_state();
}
inline void WeatherLocation::set_state(const std::string& value) {
  _internal_set_state(value);
  // @@protoc_insertion_point(field_set:chippergrpc2.WeatherLocation.state)
}
inline std::string* WeatherLocation::mutable_state() {
  // @@protoc_insertion_point(field_mutable:chippergrpc2.WeatherLocation.state)
  return _internal_mutable_state();
}
inline const std::string& WeatherLocation::_internal_state() const {
  return state_.Get();
}
inline void WeatherLocation::_internal_set_state(const std::string& value) {
  
  state_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void WeatherLocation::set_state(std::string&& value) {
  
  state_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:chippergrpc2.WeatherLocation.state)
}
inline void WeatherLocation::set_state(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  state_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:chippergrpc2.WeatherLocation.state)
}
inline void WeatherLocation::set_state(const char* value,
    size_t size) {
  
  state_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:chippergrpc2.WeatherLocation.state)
}
inline std::string* WeatherLocation::_internal_mutable_state() {
  
  return state_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* WeatherLocation::release_state() {
  // @@protoc_insertion_point(field_release:chippergrpc2.WeatherLocation.state)
  return state_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void WeatherLocation::set_allocated_state(std::string* state) {
  if (state != nullptr) {
    
  } else {
    
  }
  state_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), state,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:chippergrpc2.WeatherLocation.state)
}
inline std::string* WeatherLocation::unsafe_arena_release_state() {
  // @@protoc_insertion_point(field_unsafe_arena_release:chippergrpc2.WeatherLocation.state)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return state_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void WeatherLocation::unsafe_arena_set_allocated_state(
    std::string* state) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (state != nullptr) {
    
  } else {
    
  }
  state_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      state, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:chippergrpc2.WeatherLocation.state)
}

// string country = 3;
inline void WeatherLocation::clear_country() {
  country_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& WeatherLocation::country() const {
  // @@protoc_insertion_point(field_get:chippergrpc2.WeatherLocation.country)
  return _internal_country();
}
inline void WeatherLocation::set_country(const std::string& value) {
  _internal_set_country(value);
  // @@protoc_insertion_point(field_set:chippergrpc2.WeatherLocation.country)
}
inline std::string* WeatherLocation::mutable_country() {
  // @@protoc_insertion_point(field_mutable:chippergrpc2.WeatherLocation.country)
  return _internal_mutable_country();
}
inline const std::string& WeatherLocation::_internal_country() const {
  return country_.Get();
}
inline void WeatherLocation::_internal_set_country(const std::string& value) {
  
  country_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void WeatherLocation::set_country(std::string&& value) {
  
  country_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:chippergrpc2.WeatherLocation.country)
}
inline void WeatherLocation::set_country(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  country_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:chippergrpc2.WeatherLocation.country)
}
inline void WeatherLocation::set_country(const char* value,
    size_t size) {
  
  country_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:chippergrpc2.WeatherLocation.country)
}
inline std::string* WeatherLocation::_internal_mutable_country() {
  
  return country_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* WeatherLocation::release_country() {
  // @@protoc_insertion_point(field_release:chippergrpc2.WeatherLocation.country)
  return country_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void WeatherLocation::set_allocated_country(std::string* country) {
  if (country != nullptr) {
    
  } else {
    
  }
  country_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), country,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:chippergrpc2.WeatherLocation.country)
}
inline std::string* WeatherLocation::unsafe_arena_release_country() {
  // @@protoc_insertion_point(field_unsafe_arena_release:chippergrpc2.WeatherLocation.country)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return country_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void WeatherLocation::unsafe_arena_set_allocated_country(
    std::string* country) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (country != nullptr) {
    
  } else {
    
  }
  country_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      country, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:chippergrpc2.WeatherLocation.country)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace chippergrpc2

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::chippergrpc2::LanguageCode> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::chippergrpc2::LanguageCode>() {
  return ::chippergrpc2::LanguageCode_descriptor();
}
template <> struct is_proto_enum< ::chippergrpc2::IntentService> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::chippergrpc2::IntentService>() {
  return ::chippergrpc2::IntentService_descriptor();
}
template <> struct is_proto_enum< ::chippergrpc2::AudioEncoding> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::chippergrpc2::AudioEncoding>() {
  return ::chippergrpc2::AudioEncoding_descriptor();
}
template <> struct is_proto_enum< ::chippergrpc2::RobotMode> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::chippergrpc2::RobotMode>() {
  return ::chippergrpc2::RobotMode_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_chipperpb_2eproto
